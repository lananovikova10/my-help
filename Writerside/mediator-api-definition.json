{
  "openapi": "3.0.3",
  "info": {
    "title": "Composer API by GBST",
    "description": "Composer API by GBST are a set of JSON based REST APIs you can use to retrieve, create and maintain data within the Composer Wealth Management system.\nThe APIs within this collection provide a range of services for Investors and their Accounts including the ability to retrieve an Investor’s personal information or specific Investor Account information e.g. the investments held, an account balance or transaction history. There are also services providing the ability to create new data or maintain existing data e.g. adjusting a regular contribution, creating a regular withdrawal or setting up a regular investment rebalance.\n# Overview of Terms\n- _**API Call**_\n    - an API call is a request towards the API which receives a response. The API is by design stateless, and therefore it does not ‘remember’ anything about previous requests, i.e., there is no session. Therefore, every request made towards the API must contain certain headers so that the API can authenticate and authorise the user.\n- _**Authentication**_\n    - a process which provides the correct identity of the user. Authentication is the key component in enforcing that users are only able to access only the resources that they are allowed to.\n- _**Authorisation**_\n    - a process which allows or disallows a user to access resources and is done based on the user identity. This means that to be able to be authorised a user must first be authenticated, i.e., authorisation uses users’ identity provided by the authentication process.\n- _**Access Token**_\n    - a token which is retrieved by the user after successful OAuth2 flow. The access token is used by the API to authenticate users. The access token does not contain any information that the client can use.\n- _**OAuth2**_\n    - an authorisation framework that enables applications to obtain limited access to user accounts on an HTTP service. See the authorisation section & Access Manage API for more details.\n- _**HTTP Methods / Operations**_\n    - RESTful APIs use HTTP methods to perform actions to fetch, modify, add or delete resources.\n\n# HTTP Methods\n- _**POST**_\n    - Create\n        - This method creates a new resource\n        - Success Response : '201 Created'\n- _**POST**_\n    - Action\n        - This POST call performs the initiation of an action against the resource as opposed to creating a  \n            new resource\n        - Success Response : '204 No Content'\n- _**GET**_\n    - Read\n        - This method reads a resource and returns associated values\n        - Success Response : '200 OK'\n- _**PATCH**_\n    - Update (Partial)\n        - This method makes a partial change to the resource identified by the URI to only those attributes as provided within the request body\n        - Success Response : '204 No Content'\n    - Update (Full - Patch Array)\n        - This method sends a payload which is to be the full resource representation on completion of the update.  \n            When arrays are provided in a PATCH, the following rules will be adhered to:\n            - It will be a _**replacement**_ of the elements that exist in the array, not a merge. e.g. if an item is left out of an array, it will be removed from the data set.\n            - If the individual array elements are objects, then each object will be merged with the data that is currently stored for that object.\n        - Success Response : '204 No Content'\n\n# Response Codes\nThe response codes below represent those that could be returned as a result of submitting a service request:\n- _**200 OK**_\n    - This is to be returned from the server in the following scenarios:\n        - When requesting a singular resource and it exists and the data is successfully collated by the server.\n        - When requesting data from a collection resource and a set of resources is returned by the server.  \n            Note that the response in this case can be empty.\n- _**201 Created**_\n    - This is to be returned on successful creation of the resource.\n    - A response body will also be provided to indicate the location of the new resource.\n- _**204 No Content**_\n    - This is to be returned on successful execution of a Action based POST or PATCH request.\n- _**403 Forbidden**_\n    - Indication that the server understands the request but refuses to authorize it. The access is tied to the application logic, such as insufficient rights to a resource.\n- _**404 Not found**_\n    - This is to be returned from the server when requesting a singular resource and it does not exist.\n- _**405 Method not allowed**_\n    - You tried to access an endpoint with an invalid method\n- _**422 Unprocessable entity**_\n    - This is to be returned from the server when a validation error is encountered by the server when processing the data provided by the client. The list of errors will be provided in the response body.\n- _**5xx Server error**_\n    - Returned when a server error occurs while fetching data.\n\n# Working with Composer APIs\nAt the top right of the documentation page choose the 'Run in Postman' option to download the Postman collection of the APIs and endpoints.\n\nThe Full OpenAPI/Swagger JSON file ('ComposerAPIByGBST_V1_0_0-OpenAPI-Definition.zip') containing the definition of all endpoints can be accessed from the 'Composer API documentation' folder of the GBST Extranet site.\n\n# Authorisation\nEndpoint access authorisation is controlled using OAuth access tokens. Clients must obtain an OAuth access token via KeyCloak to be able to successfully submit a message request.\nIf valid, Keycloak will issue an access token with attributes as determined from the user credentials provided and information regarding the user from that as held internally.\nWhen receiving an endpoint message request, using the granted access token which will have been provided within the request header, the Authorisation Server will determine whether the details provided with the token gives the user the relevant access to be able to execute the endpoint request.\nThe request for an access token to be able to run any of these endpoints included, can be obtained by sending the 'Obtain an API Access Token' (/access-token) message request as provided within the 'Access Management' API.\nThe access token once issued is then required to be provided within the 'Authorization' key of the applicable service endpoint request header.\nie:\n- Authorization : Bearer _tePgmYec3uTYUsP5BrKwLvU8sS................qzXTJXHo-r44mOO_",
    "version": "1.2.0"
  },
  "tags": [
    {
      "name": "Investor",
      "description": "The Composer definition of an investor is a party which has opened one or more accounts in products as offered by the fund.\n\nAn Investors personal information is recorded separate to that relating to the details held in respect to the Products they invest into, irrespective of whether the Investor is an Individual, Joint Owner, Company, or something else. The Investor information is shared across all of the accounts and as a result any Investor specific updates performed will be reflected where ever those details are shown in relation to any of the accounts held for that investor.\n\nThis Investor API resource provides methods that will enable you to be able to view and maintain an Investors personal details, associated accounts and any regular contribution arrangements.\n\nThe ability to perform any investor specific updates is therefore provided though services which are not tied specifically to any of the underlying accounts held for that Investor.\n\n**Note :** Some products held by the Investor may have some specific attributes that are flagged as mandatory based on that product's definition e.g. products with insurance offerings typically require the Investor's Date Of Birth and Gender to be recorded."
    },
    {
      "name": "Investor Account",
      "description": "An Investor within Composer is able to hold multiple **_accounts_** within a particular financial product or have them across many of the different product offerings available.\n\nWithin each of the product offerings, the investor is able to define different savings goals, risk appetites and investment instructions.\n\nAn **_Account_** being the representation of an investor's association with a particular product.\n\nA product defines those offerings made available to the investors for investment into the fund, whether it be it under a Pension, Annuity, Bond, Tax Saving or General Investment arrangement.\n\nThe methods offered within this API are those around being able to view and maintain the account definitions."
    },
    {
      "name": "Relations",
      "description": "A relation within Composer represents an association or connection to a third party who can fulfill a servicing or supporting role."
    },
    {
      "name": "Workplace Scheme",
      "description": "A Workplace Pension allows employees to save for retirement and is arranged and managed by the employer. The API’s available within this resource relate to the administration of workplace pension schemes and allows information relating to an Investor’s relationship with an Employer and the associated Workplace Pension to be viewed and maintained."
    },
    {
      "name": "Common Party Functions",
      "description": "Common functionality applicable to the various parties fullfilling a purpose or role within Composer."
    },
    {
      "name": "Work Item",
      "description": "A Composer Work Item is much like any other correspondence that you receive in that it is generally giving you information about something, or asking you to do something./nIt may initially be in the form of a letter, email, or phone call, which is input into Composer and becomes an electronic work item. Most processing in Composer will start and ends with such a work item.\n\nThe work item can become a complete record of who asked for what, how the request was processed, when and by whom with any transactions written or data modifications made during processing being linked to that work item.\n\nThe methods offered within this API are those around being able to create, complete or reject a work item."
    },
    {
      "name": "Illustrations",
      "description": "This service supports the creation of pre-sale & post-sale Pension and Investment illustrations and back office regulatory illustrations such as Statutory Money Purchase Illustrations."
    },
    {
      "name": "Product",
      "description": "Products within Composer represent the offerings which have been defined as available for Investors to invest into upon the platform."
    },
    {
      "name": "Investment",
      "description": "Investments within Composer relate to the definition of Market Level and Asset Holdings held on the platform, including their type (equity, fund), sector, pricing, terms of trade details, associated Investment Managers and Custodians."
    },
    {
      "name": "Financial Institution",
      "description": "The methods and endpoints under the Financial Institutions API relate to those acting upon the banking structure as defined within Composer."
    },
    {
      "name": "Work Item Managed Tasks",
      "description": "APIs with Work Item tracking."
    },
    {
      "name": "Operational - Composer Configuration",
      "description": "Management and reporting on the internal operations of Composer including areas such as system configuration and setup, bulk/batch processing and external integrations initiated by Composer."
    },
    {
      "name": "Operational - Batch Processing Control",
      "description": "This API collection contains the methods and endpoints that relate to the tracking of the batch processing which is performed within Composer."
    },
    {
      "name": "Access Management",
      "description": "As also mentioned within the Authorisation section of the Introduction, the endpoint access management is controlled using OAuth access tokens.\nClients must obtain an OAuth access token via KeyCloak to be able to successfully submit a request.\nWhere successful, Keycloak will issue an access token with 'grp' attributes that have been determined from the user credentials provided within the request and information regarding the user from that as held internally.\nThe issued token will have details such as the users name, given_name, etc and attributes which will define the Composer access groups to which the user has been defined.\nUpon receiving an endpoint request, using the granted access token which will have been provided within the request header, the Authorisation Server will determine whether the details provided with the token grants the user the relevant access to be able to execute the endpoint request.\nIf so then the message request will be processed otherwise a message response will be received stating that access has been denied.\n\nThis API collection contains the methods to be able to submit a request for an Authorisation Token."
    }
  ],
  "paths": {
    "/investors/search" : {
      "get" : {
        "tags" : [ "Investor" ],
        "summary": "Investor Search",
        "description" : "To perform the search and retrieval of investors matching the provided search parameters.",
        "operationId" : "GET-investors-search",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "investors" : {
                          "type" : "array",
                          "description" : "Listing of Investors and details for those matching the search criteria as provided.",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "investorIdentifier" : {
                                "type" : "integer",
                                "description" : "The unique Composer identifier for the Investor.",
                                "example" : 6399
                              },
                              "fullName" : {
                                "type" : "string",
                                "description" : "The Investor's full name.",
                                "example" : "Monohan, Rich"
                              },
                              "givenNames" : {
                                "type" : "string",
                                "description" : "The Investor's forename and any middle names.",
                                "example" : "Rich"
                              },
                              "surname" : {
                                "type" : "string",
                                "description" : "The Investor's surname.",
                                "example" : "Monohan"
                              },
                              "birthDate" : {
                                "description" : "The Investor's date of birth.",
                                "example" : "1954-07-04",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/date"
                                } ]
                              },
                              "hasActiveAccounts" : {
                                "type" : "boolean",
                                "description" : "Indicator as to whether the Investor has active accounts.",
                                "example" : true
                              },
                              "number" : {
                                "type" : "string",
                                "description" : "The street number of the Investor’s address.",
                                "example" : "74"
                              },
                              "street" : {
                                "type" : "string",
                                "description" : "The street name of the Investor’s address.",
                                "example" : "High Street"
                              },
                              "town" : {
                                "type" : "string",
                                "description" : "The town name of the Investor’s address.",
                                "example" : "Basildon"
                              },
                              "postCode" : {
                                "type" : "string",
                                "description" : "The postcode of the Investor’s address.",
                                "example" : "SS13"
                              },
                              "county" : {
                                "type" : "string",
                                "description" : "The county name of the Investor’s address.",
                                "example" : "Essex"
                              },
                              "country" : {
                                "type" : "string",
                                "description" : "The country code of the Investor’s address.",
                                "example" : "GBR"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "in": "query",
          "description": "The Investor's surname.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Erskin"
        },
        {
          "name": "givenNames",
          "in": "query",
          "description": "The Investor's forename and any middle names.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Adam"
        },
        {
          "name": "nino",
          "in": "query",
          "description": "The Investor's National Insurance number.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "NN222222A"
        },
        {
          "name": "emailAddress",
          "in": "query",
          "description": "The Investor's e-mail address.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "addamerskin@gmail.com"
        },
        {
          "name": "entityType",
          "in": "query",
          "description": "The entity type of the Investor.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/entityType"
          },
          "example": "Individual"
        },
        {
          "name": "addressType",
          "in": "query",
          "description": "The type of address. Possible values are: Actual, Postal.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/addressType"
          },
          "example": "Actual"
        },
        {
          "name": "postcode",
          "in": "query",
          "description": "The postcode of the address.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "10000"
        },
        {
          "name": "externalSystem",
          "in": "query",
          "description": "The description for an external system.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "CDB"
        },
        {
          "name": "externalReference",
          "in": "query",
          "description": "An external system's reference number.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "A123"
        },
        {
          "name": "dobStart",
          "in": "query",
          "description": "The start date of the range to search for an Investor by their date of birth.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "1994-01-01"
        },
        {
          "name": "dobEnd",
          "in": "query",
          "description": "The end date of the range to search for an Investor by their date of birth.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "1995-01-01"
        }
      ]
    },
    "/investors/{investorId}/individual-personal-details": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Individual Investor's Personal Details",
        "description": "This will retrieve an individual investor's personal and address details. Depending on the product definition of those which the investor chooses to purchase there are constraints as to the Investor Types permitted i.e. Individual as opposed to a Company or Trustee for a Pension Drawdown account. For those of Investor Types other than Individual then the applicable endpoint for that type will need to be submitted.",
        "operationId": "GET-{investorid}-individual-personal-details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier for an Investor.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "name": {
                          "type": "string",
                          "description": "The Investor's surname.",
                          "example": "Monohan"
                        },
                        "givenNames": {
                          "type": "string",
                          "description": "The Investor's forename and any middle names.",
                          "example": "Rich"
                        },
                        "shortName": {
                          "type": "string",
                          "description": "The Investor's short name.",
                          "example": "Mono"
                        },
                        "title": {
                          "description": "The title of the individual.",
                          "example": "Mr",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/title"
                            }
                          ]
                        },
                        "salutation": {
                          "type": "string",
                          "description": "The Investor's salutation.",
                          "example": "Captain Monohan"
                        },
                        "gender": {
                          "type": "string",
                          "description": "The Investor's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                          "example": "Male"
                        },
                        "clientType": {
                          "type": "string",
                          "description": "The Investor's client type. The value provided will match a client type as configured within Composer.",
                          "example": "Retail"
                        },
                        "birthdate": {
                          "description": "The Investor's date of birth.",
                          "example": "1954-07-04",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "birthplace": {
                          "type": "string",
                          "description": "The Investor's place of birth.",
                          "example": "Melbourne"
                        },
                        "birthCountryCode": {
                          "type": "string",
                          "description": "The Investor's birth country in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer and is used in FATCA reporting.",
                          "example": "AUS"
                        },
                        "addresses": {
                          "type": "array",
                          "description": "The addresses associated to the Investor. The ability exists for the Investor to record up to 4 addresses each of a differing type, Actual, Postal, Forwarding, DocumentExchange.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the address.",
                                "example": 195271,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "addressType": {
                                "type": "string",
                                "description": "The type of address. Possible values are: Actual, Postal.",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/addressType"
                                  }
                                ],
                                "example": "Actual"
                              },
                              "prefixType": {
                                "type": "string",
                                "description": "The address prefix type. The value provided will match a prefix type as configured within Composer.",
                                "example": "BLDNG"
                              },
                              "prefix": {
                                "type": "string",
                                "description": "The actual value related to the address prefix.",
                                "example": "23"
                              },
                              "suffixType": {
                                "type": "string",
                                "description": "The address suffix type. The value provided will match a prefix type as configured within Composer.",
                                "example": "GATE"
                              },
                              "suffix": {
                                "type": "string",
                                "description": "The actual value related to the address suffix.",
                                "example": "7"
                              },
                              "propertyName": {
                                "type": "string",
                                "description": "The name of the property of the address.",
                                "example": "The Cottage"
                              },
                              "careOfName": {
                                "type": "string",
                                "description": "The care of name of address.",
                                "example": "The Manager"
                              },
                              "streetNumber": {
                                "type": "string",
                                "description": "The street number of the address.",
                                "example": "74"
                              },
                              "street": {
                                "type": "string",
                                "description": "The street name of the address.",
                                "example": "High Street"
                              },
                              "street2": {
                                "type": "string",
                                "description": "The second part of the street name of the address.",
                                "example": "Garners Lane"
                              },
                              "town": {
                                "type": "string",
                                "description": "The town name of the address.",
                                "example": "Basildon"
                              },
                              "district": {
                                "type": "string",
                                "description": "The district name of the address.",
                                "example": "Essex District"
                              },
                              "county": {
                                "type": "string",
                                "description": "The county name of the address.",
                                "example": "Essex"
                              },
                              "postCode": {
                                "type": "string",
                                "description": "The postcode of the address.",
                                "example": "SS13"
                              },
                              "countryCode": {
                                "type": "string",
                                "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer.",
                                "example": "GBR"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 785,
                              "addressType": "Actual",
                              "prefixType": "BLDNG",
                              "prefix": "23",
                              "suffixType": "GATE",
                              "suffix": "7",
                              "propertyName": "The Cottage",
                              "careOfName": "The Manager",
                              "streetNumber": "74",
                              "street": "High Street",
                              "street2": "Garners Lane",
                              "town": "Basildon",
                              "district": "Essex District",
                              "county": "Essex",
                              "postCode": "SS13",
                              "countryCode": "GBR"
                            },
                            {
                              "id": 922,
                              "addressType": "Postal",
                              "propertyName": "The Manor",
                              "careOfName": "Caretaker",
                              "streetNumber": "300",
                              "street": "Privit Drive",
                              "town": "Heswall",
                              "district": "Bournemouth",
                              "county": "Dorset",
                              "postCode": "BH1 1AA",
                              "countryCode": "GBR"
                            }
                          ]
                        },
                        "email": {
                          "type": "string",
                          "description": "The Investor's e-mail address.",
                          "example": "mne@home.com"
                        },
                        "homePhone": {
                          "type": "string",
                          "description": "The Investor's home phone number.",
                          "example": "0115698574"
                        },
                        "workPhone": {
                          "type": "string",
                          "description": "The Investor's work phone number.",
                          "example": "0115698574"
                        },
                        "mobile": {
                          "type": "string",
                          "description": "The Investor's mobile phone number.",
                          "example": "0115698574"
                        },
                        "preferredCorrespondenceMethod": {
                          "type": "string",
                          "description": "The Investor's preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                          "example": "Mail",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                            }
                          ]
                        },
                        "nextBestPreferredCorrespondenceMethod": {
                          "type": "string",
                          "description": "The Investor's next preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                          "example": "Email",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                            }
                          ]
                        },
                        "nino": {
                          "type": "string",
                          "description": "The Investor's National Insurance Number.",
                          "example": "JJ334455A"
                        },
                        "noNinoReason": {
                          "type": "string",
                          "description": "This is the reason why no National Insurance Number is stored for the Investor. The value provided will match a value configured in the NO_NINO_REASONS reference code in Composer.",
                          "example": "O"
                        },
                        "retirementDate": {
                          "description": "The Investor's selected retirement date.",
                          "example": "2024-07-04",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "deceasedDate": {
                          "description": "The Investor's date of death.",
                          "example": "2023-04-02",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "deceasedNotificationDate": {
                          "description": "The date you were notified of the Investor's death.",
                          "example": "2023-05-11",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "deceasedDateStatus": {
                          "type": "string",
                          "description": "The Investor's deceased date status. The value provided will match a deceased date status as configured within Composer.",
                          "example": "DNOT"
                        },
                        "occupation": {
                          "type": "string",
                          "description": "The Investor's occupation.",
                          "example": "Sailor"
                        },
                        "annualSalary": {
                          "description": "The Investor's annual salary.",
                          "example": "25000.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "salaryDate": {
                          "description": "The date at which the investors advised annual salary was applicable.",
                          "example": "2022-09-21",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "residentStatus": {
                          "type": "string",
                          "description": "The Investor's resident status for tax purposes. Possible values are: R - Resident, N - Non-Resident.",
                          "enum": [
                            "Resident",
                            "Non-Resident"
                          ],
                          "example": "Resident"
                        },
                        "residenceCountryCode": {
                          "type": "string",
                          "description": "The Investor's resident country code for tax purposes in the ISO alpha-3 three-letter code format. This is held for a non-resident Investor for FATCA purposes and the value provided will match a country code as configured within Composer.",
                          "example": "AUS"
                        },
                        "amlStatus": {
                          "type": "string",
                          "description": "The Investor's AML Status. The value provided will match a value configured in the AML_STATUS_LIST reference code in Composer.",
                          "example": "Y"
                        },
                        "fatcaStatus": {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/fatcaStatus"
                            }
                          ]
                        },
                        "lostMember": {
                          "type": "string",
                          "description": "Indicator as to whether the Investor is classed as Lost/Gone Away. Possible values are: Lost, Found, Reported.",
                          "enum": [
                            "Lost",
                            "Found",
                            "Reported"
                          ],
                          "example": "Lost"
                        },
                        "mailReturnedDate1": {
                          "description": "This is the date the Investor was first recorded as being Lost/Gone Away.",
                          "example": "2023-02-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "mailReturnedDate2": {
                          "description": "This is the date the Investor was subsequently recorded as being Lost/Gone Away.",
                          "example": "2023-02-02",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        }
                      },
                      "description": "The personal details relating to an individual investor."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Investor"
        ],
        "summary": "Update an Individual Investor Personal details",
        "description": "This will update an individual investor's personal details. Only the properties provided within the request body will be those updated. A successful response for the update will be a '204 Operation succeeded'.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same update of the Individuals personal details but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be for the standard PATCH request for the Investor Personal Details.\n    - `PATCH /investors/{investorId}/individual-personal-details`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `PATCH /work-item-managed-tasks/investors/{investorId}/individual-personal-details`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPATCH /work-item-managed-tasks/investors/{investorId}/individual-personal-details\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId": "PATCH-{investorid}-individual-personal-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The Investor's surname.",
                    "example": "Monohan"
                  },
                  "givenNames": {
                    "type": "string",
                    "description": "The Investor's forename and any middle names.",
                    "example": "Rich"
                  },
                  "shortName": {
                    "type": "string",
                    "description": "The Investor's short name.",
                    "example": "Mono"
                  },
                  "title": {
                    "description": "The title of the individual.",
                    "example": "Mr",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/title"
                      }
                    ]
                  },
                  "salutation": {
                    "type": "string",
                    "description": "The Investor's salutation.",
                    "example": "Captain Monohan"
                  },
                  "gender": {
                    "type": "string",
                    "description": "The Investor's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                    "enum": [
                      "Female",
                      "Male",
                      "NotDisclosed",
                      "Unknown"
                    ],
                    "example": "Male"
                  },
                  "clientType": {
                    "type": "string",
                    "description": "The Investor's client type. The value provided must match a client type as configured within Composer.",
                    "example": "Retail"
                  },
                  "birthdate": {
                    "description": "The Investor's date of birth.",
                    "example": "1954-07-04",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "birthplace": {
                    "type": "string",
                    "description": "The Investor's place of birth.",
                    "example": "Melbourne"
                  },
                  "birthCountryCode": {
                    "type": "string",
                    "description": "The Investor's birth country in the ISO alpha-3 three-letter code format. The value provided must match a country code as configured within Composer and is used in FATCA reporting.",
                    "example": "AUS"
                  },
                  "email": {
                    "type": "string",
                    "description": "The Investor's e-mail address.",
                    "example": "mne@home.com"
                  },
                  "homePhone": {
                    "type": "string",
                    "description": "The Investor's e-mail address.",
                    "example": "0115698574"
                  },
                  "workPhone": {
                    "type": "string",
                    "description": "The Investor's work phone number.",
                    "example": "0115698574"
                  },
                  "mobile": {
                    "type": "string",
                    "description": "The Investor's mobile phone number.",
                    "example": "0115698574"
                  },
                  "preferredCorrespondenceMethod": {
                    "type": "string",
                    "description": "The Investor's preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                    "example": "Mail",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                      }
                    ]
                  },
                  "nextBestPreferredCorrespondenceMethod": {
                    "type": "string",
                    "description": "The Investor's next preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                    "example": "Email",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                      }
                    ]
                  },
                  "nino": {
                    "type": "string",
                    "description": "The Investor's National Insurance Number.",
                    "example": "JJ334455A"
                  },
                  "noNinoReason": {
                    "type": "string",
                    "description": "This is the reason why no National Insurance Number has been provided for the Investor. The value provided must match a value configured in the NO_NINO_REASONS reference code in Composer.",
                    "example": "R"
                  },
                  "retirementDate": {
                    "description": "The Investor's selected retirement date.",
                    "example": "2024-07-04",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "deceasedDate": {
                    "description": "The Investor's date of death.",
                    "example": "2023-04-02",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "deceasedNotificationDate": {
                    "description": "The date you were notified of the Investor's death.",
                    "example": "2023-05-11",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "deceasedDateStatus": {
                    "type": "string",
                    "description": "The Investor's deceased date status. The value provided must match a deceased date status as configured in Composer.",
                    "example": "DNOT"
                  },
                  "occupation": {
                    "type": "string",
                    "description": "The Investor's occupation.",
                    "example": "Sailor"
                  },
                  "annualSalary": {
                    "description": "The Investor's annual salary.",
                    "example": "25000.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "salaryDate": {
                    "description": "The date at which the investors advised annual salary was applicable",
                    "example": "2022-09-21",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "residentStatus": {
                    "type": "string",
                    "description": "The Investor's resident status for tax purposes. Possible values are: Resident, Non-Resident.",
                    "example": "Resident"
                  },
                  "residenceCountryCode": {
                    "type": "string",
                    "description": "The Investor's resident country code for tax purposes in the ISO alpha-3 three-letter code format. This is required for a non-resident Investor for FATCA purposes and the value provided must match a country code as configured in Composer.",
                    "example": "AUS"
                  },
                  "amlStatus": {
                    "type": "string",
                    "description": "The Investor's AML Status. The value provided must match a value configured in the AML_STATUS_LIST reference code in Composer.",
                    "example": "Y"
                  },
                  "fatcaStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/fatcaStatus"
                      }
                    ]
                  },
                  "lostMember": {
                    "type": "string",
                    "description": "Indicator as to whether the Investor is classed as Lost/Gone Away. Possible values are: Lost, Found, Reported.",
                    "example": "Lost"
                  },
                  "mailReturnedDate1": {
                    "description": "This is the date the Investor was first recorded as being Lost/Gone Away.",
                    "example": "2023-02-01",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "mailReturnedDate2": {
                    "description": "This is the date the Investor was subsequently recorded as being Lost/Gone Away.",
                    "example": "2023-02-02",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "addresses": {
                    "type": "array",
                    "description": "The addresses associated to the Investor. The ability exists for the Investor to record 4 addresses each of differing types, Actual, Postal, Forwarding, Document Exchange.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier for the address.",
                          "example": 195271,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "addressType": {
                          "type": "string",
                          "description": "The type of address. Possible values are: Actual, Postal.",
                          "example": "Actual",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/addressType"
                            }
                          ]
                        },
                        "prefixType": {
                          "type": "string",
                          "description": "The address prefix type. The value provided must match a prefix type as configured in Composer.",
                          "example": "BLDNG"
                        },
                        "prefix": {
                          "type": "string",
                          "description": "The actual value related to the address prefix.",
                          "example": "23"
                        },
                        "suffixType": {
                          "type": "string",
                          "description": "The address suffix type. The value provided must match a prefix type as configured in Composer.",
                          "example": "GATE"
                        },
                        "suffix": {
                          "type": "string",
                          "description": "The actual value related to the address suffix.",
                          "example": "7"
                        },
                        "propertyName": {
                          "type": "string",
                          "description": "The name of the property of the address.",
                          "example": "The Cottage"
                        },
                        "careOfName": {
                          "type": "string",
                          "description": "The care of name of address.",
                          "example": "The Manager"
                        },
                        "streetNumber": {
                          "type": "string",
                          "description": "The street number of the address.",
                          "example": "74"
                        },
                        "street": {
                          "type": "string",
                          "description": "The street name of the address.",
                          "example": "High Street"
                        },
                        "street2": {
                          "type": "string",
                          "description": "The second  part of the street name of the address.",
                          "example": "Garners Lane"
                        },
                        "town": {
                          "type": "string",
                          "description": "The town name of the address.",
                          "example": "Basildon"
                        },
                        "district": {
                          "type": "string",
                          "description": "The district name of the address.",
                          "example": "Essex District"
                        },
                        "county": {
                          "type": "string",
                          "description": "The county name of the address.",
                          "example": "Essex"
                        },
                        "postCode": {
                          "type": "string",
                          "description": "The postcode of the address.",
                          "example": "SS13"
                        },
                        "countryCode": {
                          "type": "string",
                          "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured in Composer.",
                          "example": "GBR"
                        }
                      }
                    },
                    "example": [
                      {
                        "id": 785,
                        "addressType": "Actual",
                        "prefixType": "BLDNG",
                        "prefix": "23",
                        "suffixType": "GATE",
                        "suffix": "7",
                        "propertyName": "The Cottage",
                        "careOfName": "The Manager",
                        "streetNumber": "74",
                        "street": "High Street",
                        "street2": "Garners Lane",
                        "town": "Basildon",
                        "district": "Essex District",
                        "county": "Essex",
                        "postCode": "SS13",
                        "countryCode": "GBR"
                      },
                      {
                        "id": 922,
                        "addressType": "Postal",
                        "propertyName": "The Manor",
                        "careOfName": "Caretaker",
                        "streetNumber": "300",
                        "street": "Privit Drive",
                        "town": "Heswall",
                        "district": "Bournemouth",
                        "county": "Dorset",
                        "postCode": "BH1 1AA",
                        "countryCode": "GBR"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor to whom the personal details are associated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investors/{investorId}/bank-accounts": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve an Investor's Bank Accounts",
        "description": "This method will perform the ability to retrieve all the bank accounts held by an Investor.",
        "operationId": "GET-investors-{investorid}-bank-accounts",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "bankAccounts": {
                          "type": "array",
                          "description": "The bank accounts held by an Investor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The unique Composer identifier of the entity and bank account held in Composer.",
                                "example": "21-470"
                              },
                              "accountName": {
                                "type": "string",
                                "description": "The name associated to the bank account.",
                                "example": "AISL Gross Untraded Client Account"
                              },
                              "accountNumber": {
                                "type": "string",
                                "description": "The number associated to a domestic bank account.",
                                "example": "61418769"
                              },
                              "accountType": {
                                "type": "string",
                                "description": "Indicator as to whether the bank account is Domestic or International.",
                                "example": "Domestic",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/accountType"
                                  }
                                ]
                              },
                              "bankAccountId": {
                                "description": "The unique Composer identifier of the bank account held in Composer.",
                                "example": 21,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "bankAccountType": {
                                "type": "string",
                                "description": "The specific type of bank account.",
                                "example": "T"
                              },
                              "bicCode": {
                                "type": "string",
                                "description": "The Bank Identifier Code for the bank.",
                                "example": "AVCDUK64"
                              },
                              "sortCode": {
                                "type": "string",
                                "description": "The Sort Code of the bank.",
                                "example": "400250"
                              },
                              "customerReference": {
                                "type": "string",
                                "description": "An external customer reference relating to the bank account.",
                                "example": "PB1970"
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The currency of the bank account. The value will match a currency code as configured in Composer.",
                                "example": "GBP"
                              },
                              "directDebitCount": {
                                "type": "integer",
                                "description": "An ongoing count for the number of direct debits set up against the entity.",
                                "example": 0
                              },
                              "defaultBankAccount": {
                                "type": "boolean",
                                "description": "Indicator as to whether the bank account is set as the default for the entity.",
                                "example": false
                              },
                              "internationalAccountNumber": {
                                "type": "string",
                                "description": "The number associated to an international bank account (IBAN).",
                                "example": "99991199"
                              },
                              "financialInstitutionName": {
                                "type": "string",
                                "description": "The name of the Financial Institution.",
                                "example": "Smith"
                              },
                              "institutionBranchName": {
                                "type": "string",
                                "description": "The name of the Institution Branch.",
                                "example": "REGIONAL SERV CENTRE EUROPE"
                              },
                              "associatedInternalClientMoneyAccountId": {
                                "description": "The unique Composer identifier of the associated Internal Client Money Account held in Composer, where the Bank Account Type has been set to External Client Money.",
                                "example": 5,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "thirdPartyEntityId": {
                                "description": "The unique Composer identifier of the Third Party held in Composer, where the Bank Account Type has been set to Third Party.",
                                "example": 11,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "fxIntermediaryId": {
                                "description": "The unique Composer identifier of the FX Intermediary held in Composer.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "institutionBranchId": {
                                "description": "The unique Composer identifier of the Institution Branch of the bank held in Composer.",
                                "example": 3253,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "id": "21-470",
                              "accountName": "AISL Gross Untraded Client Account",
                              "accountNumber": "61418769",
                              "accountType": "Domestic",
                              "bankAccountId": 21,
                              "bankAccountType": "T",
                              "bicCode": "AVCDUK64",
                              "sortCode": "400250",
                              "customerReference": "PB1970",
                              "currencyCode": "GBP",
                              "directDebitCount": 0,
                              "defaultBankAccount": false,
                              "internationalAccountNumber": "99991199",
                              "financialInstitutionName": "Smith",
                              "institutionBranchName": "REGIONAL SERV CENTRE EUROPE",
                              "associatedInternalClientMoneyAccountId": 5,
                              "thirdPartyEntityId": 11,
                              "fxIntermediaryId": 2,
                              "institutionBranchId": 3253
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Investor"
        ],
        "summary": "Create a new Investor Bank Account",
        "description": "This will perform the creation of a new bank account for an Investor.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same creation of an Investor Bank Account but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be the standard POST request for the Investor Bank Account.\n    - `POST /investors/{investorId}/bank-accounts`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `PATCH /work-item-managed-tasks/investors/{investorId}/bank-accounts`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPOST /work-item-managed-tasks/investors/{investorId}/bank-accounts\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId": "POST-investors-{investorid}-bank-accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name associated to the bank account.",
                    "example": "Tom Abbot",
                    "maxLength": 40
                  },
                  "accountType": {
                    "type": "string",
                    "description": "Indicator as to whether the bank account is Domestic or International.",
                    "example": "Domestic",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/accountType"
                      }
                    ]
                  },
                  "defaultBankAccount": {
                    "type": "boolean",
                    "description": "Indicator as to whether the bank account is set as the default for the Investor.",
                    "example": true
                  },
                  "accountNumber": {
                    "type": "string",
                    "description": "The account number associated to a domestic bank account.",
                    "example": "8075440",
                    "maxLength": 10
                  },
                  "bankAccountId": {
                    "type": "integer",
                    "description": "The unique Composer identifier of the bank account held in Composer.",
                    "example": 21696670,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "sortCode": {
                    "type": "string",
                    "description": "The Sort Code of the bank institution and branch.",
                    "example": "114727",
                    "maxLength": 10
                  },
                  "bicCode": {
                    "type": "string",
                    "description": "The Bank Identifier Code (BIC).",
                    "example": "AVCDUK64",
                    "maxLength": 11
                  },
                  "internationalAccountNumber": {
                    "type": "string",
                    "description": "The account number associated to an international bank account (IBAN).",
                    "example": "1236589",
                    "maxLength": 40
                  },
                  "customerReference": {
                    "type": "string",
                    "description": "An external customer reference relating to the bank account.",
                    "example": "A1254987",
                    "maxLength": 20
                  },
                  "bankAccountType": {
                    "type": "string",
                    "description": "The specific type of bank account. Possible values are: Third Party, Retiready, External Client Money.",
                    "example": "ThirdParty",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/bankAccountType"
                      }
                    ]
                  },
                  "thirdPartyId": {
                    "description": "The unique Composer identifier of the Third Party held in Composer, where the Bank Account Type has been set to Third Party.",
                    "example": 21696670,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "institutionBranchId": {
                    "description": "The unique Composer identifier of the Institution Branch of the bank held in Composer.",
                    "example": 6893,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "currencyCode": {
                    "type": "string",
                    "description": "The currency of the bank account. The value will match a currency code as configured in Composer.",
                    "example": "USD",
                    "maxLength": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the investor to whom the Bank Account(s) are associated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investors/{investorId}/accounts": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Investor Accounts for an Investor",
        "description": "Performs the retrieval of all investor accounts that are held by an investor.",
        "operationId": "GET-investors-{investorid}-accounts",
        "responses": {
          "200": {
            "description": "Operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investorAccounts": {
                          "type": "array",
                          "description": "A list of all accounts associated to the Investor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investorAccountId": {
                                "description": "The unique Composer identifier for the Investor Account.",
                                "example": 70824317,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "adviserAccountId": {
                                "description": "The unique Composer identifier for the primary Adviser associated to the Investor Account.",
                                "example": 737,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productName": {
                                "type": "string",
                                "description": "The name of the Product associated to the Investor Account.",
                                "example": "GBST SIPP Drawdown"
                              },
                              "primarySippProductName": {
                                "type": "string",
                                "description": "The name of the product associated to the Primary SIPP investor account that is linked to the Investor Account.",
                                "example": "GBST SIPP Uncrystallised"
                              },
                              "accountStopped": {
                                "type": "boolean",
                                "description": "Indicator as to whether the investor account has been stopped.",
                                "example": false
                              },
                              "adviserName": {
                                "type": "string",
                                "description": "The name of the primary Adviser associated to the Investor Account.",
                                "example": "Mr Adviser # 737"
                              },
                              "primarySippAccountId": {
                                "description": "The unique Composer identifier for the Primary SIPP Account associated to the Investor Account.",
                                "example": 70824316,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "schemeName": {
                                "type": "string",
                                "description": "The name of the scheme.",
                                "example": "GBST Pension and Investment Fund"
                              },
                              "status": {
                                "description": "The status of the Investor Account.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "externalReference": {
                                "type": "string",
                                "description": "External system references associated to the Investor Account.",
                                "example": "External reference"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the investor.",
          "required": true,
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          }
        },
        {
          "name": "status",
          "in": "query",
          "description": "The status of the required investor accounts.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/activeInactiveStatus"
          },
          "example": "Active"
        }
      ]
    },
    "/investors/{investorId}/investor-account-balances": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Account Balances for the Investor",
        "description": "The Composer definition of an investor is a party which has opened one or more accounts in products as offered by the fund. This service will retrieve the balances for all accounts under the Investor.",
        "operationId": "GET-investor-investors-{investorid}-investor-account-balances-response",
        "responses": {
          "200": {
            "description": "Operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investorAccountBalances": {
                          "type": "array",
                          "description": "This method will perform the retrieval of the account balances held by an Investor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investorAccountId": {
                                "description": "The unique Composer identifier for an Investor Account associated to the Investor.",
                                "example": 16,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investorId": {
                                "description": "The unique Composer identifier for an Investor.",
                                "example": 21696670,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "adviserAccountId": {
                                "description": "The unique Composer identifier for the primary Adviser associated to an Investor Account.",
                                "example": 14,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productTypeId": {
                                "description": "The unique Composer identifier for the Product Type associated to an Investor Account.",
                                "example": 19,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productName": {
                                "type": "string",
                                "description": "The name of the Product associated to an Investor Account.",
                                "example": "SIPP Uncrystallised"
                              },
                              "totalBalance": {
                                "description": "The total balance held in the associated Investor Account.",
                                "example": "65000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "availableBalance": {
                                "description": "The available balance held in the associated Investor Account.",
                                "example": "39837.50",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "availableCash": {
                                "description": "The available cash held in the associated Investor Account.",
                                "example": "0.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "fundStartDate": {
                                "description": "The date at which the Investor Account was started.",
                                "example": "2019-02-05",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "investorAccountId": 12326598,
                              "investorId": 21696670,
                              "adviserAccountId": 14,
                              "productTypeId": 19,
                              "productName": "SIPP Uncrystallised",
                              "totalBalance": "65000.00",
                              "availableBalance": "39837.50",
                              "availableCash": "2500.55",
                              "fundStartDate": "2019-02-05"
                            },
                            {
                              "investorAccountId": 6545978,
                              "investorId": 21696670,
                              "adviserAccountId": 3,
                              "productTypeId": 20,
                              "productName": "SIPP Crystallised",
                              "totalBalance": "255621.00",
                              "availableBalance": "255621.00",
                              "availableCash": "5000.00",
                              "fundStartDate": "2014-11-22"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for an Investor.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investors/{investorId}/investment-returns": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieval of Investment Returns",
        "description": "This will retrieve the Investment Return value for each investment on an account owned by an Investor.",
        "operationId": "GET-investors-{investorid}-investment-returns",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investmentReturns": {
                          "type": "array",
                          "description": "An investment return provides details of the gains or losses achieved by an investment.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investmentId": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 638,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "gainLossAmount": {
                                "description": "The calculated gain/loss as an amount for an investment during the specified period.",
                                "example": "0.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "gainLossPercent": {
                                "description": "The calculated gain/loss as a percentage for an investment during the specified period.",
                                "example": "0.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "investorId": {
                                "description": "The unique Composer identifier for the Investor holding the Investor Account.",
                                "example": 977,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investorAccountId": {
                                "description": "The unique Composer identifier for the Investor Account.",
                                "example": 12,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "investmentId": 1245,
                              "gainLossAmount": "12350.00",
                              "gainLossPercent": "10.68",
                              "investorId": 4569872,
                              "investorAccountId": 98752365
                            },
                            {
                              "investmentId": 6542,
                              "gainLossAmount": "550.00",
                              "gainLossPercent": "7.57",
                              "investorId": 6547893,
                              "investorAccountId": 98632541
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor holding the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "investorAccountId",
          "in": "query",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "investmentId",
          "in": "query",
          "description": "The unique Composer identifier for the Investment.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "startDate",
          "in": "query",
          "description": "The start date of the required period for the return.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        },
        {
          "name": "endDate",
          "in": "query",
          "description": "The end date of the required period for the return.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        }
      ]
    },
    "/investors/{investorId}/investor-accounts/{primarySippAccountId}/incomedrawdown-income-details": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Income Details for Income Drawdown Accounts",
        "description": "This will retrieve the income details for the Income Drawdown Accounts associated to the Investor's main SIPP Account.",
        "operationId": "GET-investors-{investorId}-investor-accounts-{primarySippAccountId}-incomedrawdown-income-details",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investorAccountIncomeDetails": {
                          "type": "array",
                          "description": "The income details for all the Income Drawdown Accounts associated to the Investor's main SIPP Account.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investorAccountId": {
                                "description": "The unique Composer identifier for an Investor’s Income Drawdown Account.",
                                "example": 70824146,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productId": {
                                "description": "The unique Composer identifier for the Product to which the Investor’s Income Drawdown Account is associated.",
                                "example": 20,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productName": {
                                "type": "string",
                                "description": "The name of the Product to which the Investor’s Income Drawdown Account is associated.",
                                "example": "SIPP Drawdown"
                              },
                              "productGrouping": {
                                "type": "string",
                                "description": "The name of the Product Grouping to which the Investor’s Income Drawdown Account is associated.",
                                "example": "SIPP"
                              },
                              "productFlag": {
                                "type": "string",
                                "description": "The type of Product to which the Investor’s Income Drawdown Account is associated.",
                                "example": "INVESTMENT PENSION"
                              },
                              "accountBalance": {
                                "description": "The current balance of the Investor’s Income Drawdown Account.",
                                "example": "9225.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "primarySippAccountId": {
                                "description": "The unique Composer identifier for the Primary SIPP Account associated to the Investor’s Income Drawdown Account.",
                                "example": 70824145,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "flexibleIncomeAllowed": {
                                "type": "boolean",
                                "description": "Indicator as to whether Flexible Income allowed.",
                                "example": true
                              },
                              "incomePaymentFrequency": {
                                "type": "string",
                                "description": "The frequency of income payments from the Income Drawdown Account. Possible values include Weekly, Monthly, Quarterly, HalfYearly and Annually.",
                                "example": "Monthly",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/incomePaymentFrequency"
                                  }
                                ]
                              },
                              "paymentAmount": {
                                "description": "The pension income amount per payment.",
                                "example": "500.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "currentPolicyYearToDateAmount": {
                                "description": "The total gross pension income paid amount for the Policy Year to Date.",
                                "example": "1500.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "bankAccount": {
                                "type": "object",
                                "description": "The bank account details held in Composer to which the income payments are made.",
                                "properties": {
                                  "id": {
                                    "description": "The unique Composer identifier of the bank account as held in Composer.",
                                    "example": 287011,
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/identifier"
                                      }
                                    ]
                                  },
                                  "sortCode": {
                                    "type": "string",
                                    "description": "The bank institution and branch sort code for the bank account to which the income payments are made.",
                                    "example": "826908"
                                  },
                                  "accountNumber": {
                                    "type": "string",
                                    "description": "The bank account number of that to which the income payments are made.",
                                    "example": "8075440"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The bank account name of that to which the income payments are made.",
                                    "example": "PSN_1699577459404"
                                  },
                                  "customerReference": {
                                    "type": "string",
                                    "description": "The bank customer reference for the income payments made.",
                                    "example": "A5FFE9F837"
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "investorAccountId": 70824146,
                              "productId": 20,
                              "productName": "SIPP Drawdown",
                              "productGrouping": "SIPP",
                              "productFlag": "INVESTMENT PENSION",
                              "accountBalance": "9225.00",
                              "primarySippAccountId": 70824145,
                              "flexibleIncomeAllowed": true,
                              "incomePaymentFrequency": "Monthly",
                              "paymentAmount": "500.00",
                              "currentPolicyYearToDateAmount": "1500.00",
                              "bankAccount": {
                                "id": 287011,
                                "sortCode": "826908",
                                "accountNumber": "8075440",
                                "name": "PSN_1699577459404",
                                "customerReference": "A5FFE9F837"
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "primarySippAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Primary SIPP Account associated to the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "includePre06Accounts",
          "in": "query",
          "description": "Indicator as to whether to include pre 2006 accounts.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "includeCrystallisedTransferAccounts",
          "in": "query",
          "description": "Indicator as to whether to include Crystallised Transfer Accounts.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        }
      ]
    },
    "/investors/{investorId}/regular-contributions": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Investor's Regular Contributions",
        "description": "An investor has the ability to define one or many regular contribution arrangements for the recurring payments of funds into their own and / or other Investor Accounts defined to Composer i.e. regular contribution payment for the Investor and their partner. The arrangements are tied to the Investor and the applicable bank account from which the payment is to be sourced.\n\nThis will retrieve all regular contributions arrangements defined for an investor.",
        "operationId": "GET-investors-{investorid}-regular-contributions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "regularContributions": {
                          "type": "array",
                          "description": "Regular contribution arrangements defined for an investor.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the regular contribution arrangement.",
                                "example": 221,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "status": {
                                "description": "The status of the Regular Contribution record. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "bsbNumber": {
                                "type": "string",
                                "description": "The bank sort code that the Regular Contribution is being paid from.",
                                "example": "400919"
                              },
                              "accountNumber": {
                                "type": "string",
                                "description": "The bank account number that the Regular Contribution is being paid from.",
                                "example": "00125366"
                              },
                              "branch": {
                                "type": "string",
                                "description": "The name of the branch that the Regular Contribution is being paid from.",
                                "example": "BATH MILSOM STREET"
                              },
                              "frequency": {
                                "type": "string",
                                "description": "The payment frequency of the Regular Contribution.",
                                "example": "Monthly"
                              },
                              "amount": {
                                "description": "The amount of the Regular Contribution.",
                                "example": "1500.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "bank": {
                                "type": "string",
                                "description": "The name of the bank that the Regular Contribution is being paid from.",
                                "example": "HSBC BANK PLC"
                              },
                              "nextDueDate": {
                                "description": "The date that the next Regular Contribution is due to be collected.",
                                "example": "2022-12-30",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "bankAccountId": {
                                "description": "The unique Composer identifier of the bank account held in Composer.",
                                "example": 9646,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "adoFileImport": {
                                "type": "boolean",
                                "description": "Indicator as to whether the definition represents an Approved Deposit arrangement.",
                                "example": false
                              },
                              "nextRunDatetime": {
                                "type": "string",
                                "description": "The date that the next Regular Contribution is due to run.",
                                "example": "2022-12-30"
                              },
                              "startDate": {
                                "description": "The date that the Regular Contribution was set up.",
                                "example": "2022-12-30",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "investorAccounts": {
                                "type": "array",
                                "description": "Those investor accounts linked to the regular contribution into which the funds are to be directed.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The unique Composer identifier for the Investor Account.",
                                      "example": 7101,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "productName": {
                                      "type": "string",
                                      "description": "The name of the Product for the Investor Account that the Regular Contribution relates to.",
                                      "example": "GBST SIPP Uncrystallised"
                                    },
                                    "investorAccountStatus": {
                                      "type": "string",
                                      "description": "The status of the Investor Account that the Regular Contribution relates to. Possible values are: Active, Inactive.",
                                      "example": "Active",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/activeInactiveStatus"
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 221,
                              "status": "Active",
                              "bsbNumber": "400919",
                              "accountNumber": "00125366",
                              "branch": "BATH MILSOM STREET",
                              "frequency": "Monthly",
                              "amount": "1500.00",
                              "bank": "HSBC BANK PLC",
                              "nextDueDate": "2022-12-30",
                              "bankAccountId": 9646,
                              "adoFileImport": false,
                              "nextRunDatetime": "2022-12-30",
                              "startDate": "2022-12-30",
                              "investorAccounts": [
                                {
                                  "id": 98745632,
                                  "productName": "SIPP Crystallised",
                                  "investorAccountStatus": "Active"
                                },
                                {
                                  "id": 87541936,
                                  "productName": "SIPP Uncrystallised",
                                  "investorAccountStatus": "Active"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "description": "Regular Contribution arrangements defined for an Investor."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/regular-contributions/{regularContributionId}/details": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Investor's Regular Contribution details",
        "description": "An investor has the ability to define one or many regular contribution arrangements for the recurring payments of funds into their own and / or other Investor Accounts defined to Composer i.e. regular contribution payment for the Investor and their partner. The arrangements are tied to the Investor and the applicable bank account from which the payment is to be sourced.\n\nThis will retrieve, for a specific regular contribution arrangement, the details relating to the arrangement, recipient accounts and investments into which the funds are to be directed and any investment purchases from those funds if defined.",
        "operationId": "GET-regular-contributions-{regularcontributionid}-details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "regularContributions": {
                          "type": "array",
                          "description": "Regular contribution arrangement details.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the regular contribution arrangement.",
                                "example": 221,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "regularContributionInvestorAccountId": {
                                "description": "The unique Composer identifier for the Investor Accounts associated to the regular contribution arrangement.",
                                "example": 224,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "status": {
                                "description": "The status of the Regular Contribution record. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "investorId": {
                                "description": "The unique Composer identifier for the Investor holding the Investor Account.",
                                "example": 6399,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investorGivenName": {
                                "type": "string",
                                "description": "The Investor's forename and any middle names.",
                                "example": "Rich"
                              },
                              "investorName": {
                                "type": "string",
                                "description": "The Investor's surname.",
                                "example": "Monohan"
                              },
                              "investorAccountId": {
                                "description": "The unique Composer identifier for the Investor Account.",
                                "example": 7101,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productFlag": {
                                "type": "string",
                                "description": "The type of Product in which the Investor Account relates to.",
                                "example": "Accumulation"
                              },
                              "productTypeId": {
                                "description": "The unique Composer identifier for the Product in which the Investor Account relates to.",
                                "example": 19,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productTypeName": {
                                "type": "string",
                                "description": "The name of the Product of which the Investor Account relates to.",
                                "example": "GBST SIPP Uncrystallised"
                              },
                              "totalAmount": {
                                "description": "The amount of the Regular Contribution.",
                                "example": "1500.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "fixedAmountNominated": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Regular Contribution is for a fixed amount.",
                                "example": false
                              },
                              "contributionType": {
                                "type": "string",
                                "description": "The Contribution Type of the Regular Contribution. This will match a Contribution Type as configured in Composer.",
                                "example": "P"
                              },
                              "investments": {
                                "type": "array",
                                "description": "Details for those Investments into which the Regular Contribution is to be directed.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The unique Composer identifier for the Investment.",
                                      "example": 74,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "amount": {
                                      "description": "The amount from the Regular Contribution to be invested into the Investment.",
                                      "example": "1500.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "entryFeePercent": {
                                      "description": "The percentage Entry Fee to be paid.",
                                      "example": "0.40",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    },
                                    "entryFeeAmount": {
                                      "description": "The amount of Entry Fee to be paid.",
                                      "example": "60.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "brokeragePercent": {
                                      "description": "The percentage Adviser Entry Fee to be paid.",
                                      "example": "0.25",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    },
                                    "brokerageAmount": {
                                      "description": "The amount of Adviser Entry Fee to be paid.",
                                      "example": "30.75",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              "reinvestmentApplies": {
                                "type": "string",
                                "description": "Indicator as to whether the funds received as part of the Regular Contribution are to used to fund the purchase of external Investments and if so how are they nominated.",
                                "example": "UserSpecified",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/regularContReinvestmentApplies"
                                  }
                                ]
                              },
                              "reinvestments": {
                                "type": "array",
                                "description": "Investment details of those to be purchased from the Regular Contribution funds received where the option for reinvestment has been nominated.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "investmentId": {
                                      "description": "The unique Composer identifier for the Investment.",
                                      "example": 12927,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "reinvestmentPercent": {
                                      "description": "The percentage to be reinvested.",
                                      "example": "50.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    },
                                    "initialChargePercent": {
                                      "description": "The percentage Initial Charge per investment.",
                                      "example": "0.40",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              "preInitialChargeFeeBasis": {
                                "type": "boolean",
                                "description": "Indicator as to whether the initial charge is to be treated as Pre or Post investment.",
                                "example": false
                              },
                              "adviserSent": {
                                "type": "boolean",
                                "description": "Indicator as to whether the regular contribution was created by the adviser from the web.",
                                "example": false
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 221,
                              "regularContributionInvestorAccountId": 224,
                              "status": "Active",
                              "investorId": 6399,
                              "investorGivenName": "Rich",
                              "investorName": "Monohan",
                              "investorAccountId": 7101,
                              "productFlag": "Accumulation",
                              "productTypeId": 19,
                              "productTypeName": "GBST SIPP Uncrystallised",
                              "totalAmount": "1500.00",
                              "fixedAmountNominated": false,
                              "contributionType": "P",
                              "investments": [
                                {
                                  "id": 74,
                                  "amount": "1500.00",
                                  "entryFeePercent": "0.40",
                                  "entryFeeAmount": "60.00",
                                  "brokeragePercent": "0.25",
                                  "brokerageAmount": "30.75"
                                },
                                {
                                  "id": 102,
                                  "amount": "25750.65",
                                  "entryFeePercent": "0.42",
                                  "entryFeeAmount": "85.25",
                                  "brokeragePercent": "0.23",
                                  "brokerageAmount": "40.52"
                                }
                              ],
                              "reinvestmentApplies": "UserSpecified",
                              "reinvestments": [
                                {
                                  "investmentId": 745,
                                  "reinvestmentPercent": "25.55",
                                  "initialChargePercent": "0.35"
                                },
                                {
                                  "investmentId": 965,
                                  "reinvestmentPercent": "47.25",
                                  "initialChargePercent": "0.40"
                                }
                              ],
                              "preInitialChargeFeeBasis": false,
                              "adviserSent": false
                            }
                          ]
                        }
                      },
                      "description": "Details of regular contribution arrangements defined for an investor."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "regularContributionId",
          "in": "path",
          "description": "The unique Composer identifier for the Regular Contribution arrangement.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/regular-contributions": {
      "post": {
        "tags": [
          "Investor"
        ],
        "summary": "Create a Regular Contribution Arrangement",
        "description": "An investor has the ability to define one or many regular contribution arrangements for the recurring payments of funds into their own and / or other Investor Accounts defined to Composer i.e. regular contribution payment for the Investor and their partner. The arrangements are tied to the Investor and the applicable bank account from which the payment is to be sourced.\n\nThis will create a regular contribution arrangement against an Investors existing bank account along with the recipient accounts and investments into which the funds are to be directed along with any investment purchase requests to be made from those funds if required. A successful response will be a '201 Created' with the body containing the resource id created.",
        "operationId": "POST-regular-contributions",
        "requestBody": {
          "description": "Creates a regular contribution arrangement for an investor.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "bankAccountId": {
                    "description": "The unique Composer identifier of the bank account held in Composer.",
                    "example": 9649,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The payment frequency of the Regular Contribution.",
                    "example": "Monthly"
                  },
                  "startDate": {
                    "description": "The date that the Regular Contribution is to start.",
                    "example": "2023-02-28",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "endDate": {
                    "description": "The date that the Regular Contribution is to end.",
                    "example": "2024-02-28",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "nextDueDate": {
                    "description": "The date that the next Regular Contribution is due to be collected.",
                    "example": "2023-02-28",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "adoFileImport": {
                    "type": "boolean",
                    "description": "Indicator as to whether the definition represents an Approved Deposit arrangement.",
                    "example": false
                  },
                  "contscheduleDateAdvised": {
                    "description": "The date the contribution schedule was received.",
                    "example": "2023-02-28",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "ddInvestorAccounts": {
                    "type": "array",
                    "description": "Investor Accounts associated to the Regular Contribution arrangement to receive the fund allocation as defined.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier for the Regular Contribution and Investor Account association.",
                          "example": 7107,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "totalAmount": {
                          "description": "The amount of the Regular Contribution.",
                          "example": "1575.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "status": {
                          "description": "The status of the Regular Contribution record. Possible values are: Active, Inactive.",
                          "example": "Active",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/activeInactiveStatus"
                            }
                          ]
                        },
                        "contributionType": {
                          "type": "string",
                          "description": "The Contribution Type of the Regular Contribution. This must match a Contribution Type as configured in Composer.",
                          "example": "P"
                        },
                        "entryFeePercent": {
                          "description": "The percentage Entry Fee to be paid.",
                          "example": "0.04",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "entryFeeBasis": {
                          "type": "string",
                          "description": "Used to indicate whether the contribution amount is Pre or Post the Upfront Adviser Charge and VAT where the Product is defined to allow PreInvestment EntryFees.",
                          "example": "PreInvestment"
                        },
                        "brokeragePercent": {
                          "description": "The percentage Adviser Entry Fee to be paid.",
                          "example": "0.02",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "fixedAmount": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Regular Contribution is for a fixed amount.",
                          "example": false
                        },
                        "marketingCodeId": {
                          "description": "The Marketing Code that applies to the Regular Contribution. This must match a Marketing Code as configured in Composer.",
                          "example": 16,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "sourceOfWealth": {
                          "type": "string",
                          "description": "The Source of Wealth that applies to the Regular Contribution. This must match a Source of Wealth as configured in Composer.",
                          "example": "Father"
                        },
                        "cashReservePurpose": {
                          "type": "string",
                          "description": "The Cash Reserve Purpose that applies to the Regular Contribution. This must match a Cash Reserve Purpose as configured in Composer.",
                          "example": "F"
                        },
                        "adviserSent": {
                          "type": "boolean",
                          "description": "Indicator as to whether the regular contribution was created by the adviser from the web.",
                          "example": true
                        },
                        "investments": {
                          "type": "array",
                          "description": "Details for those Investments into which the Regular Contribution is to be directed.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "amount": {
                                "description": "The amount from the Regular Contribution to be invested into the Investment.",
                                "example": "1575.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "entryFeePercent": {
                                "description": "The percentage Entry Fee to be paid.",
                                "example": "0.04",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "brokeragePercent": {
                                "description": "The percentage Adviser Entry Fee to be paid.",
                                "example": "0.02",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "entryFeeAmount": {
                                "description": "The amount of Entry Fee to be paid.",
                                "example": "12.25",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "brokerageAmount": {
                                "description": "The amount of Adviser Entry Fee to be paid.",
                                "example": "25.75",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "reinvestmentApplies": {
                          "type": "string",
                          "description": "Indicator as to whether the funds received as part of the Regular Contribution are to used to fund the purchase of external Investments and if so how are they nominated.",
                          "example": "UserSpecified",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/regularContReinvestmentApplies"
                            }
                          ]
                        },
                        "reinvestments": {
                          "type": "array",
                          "description": "Investment details of those to be purchased from the Regular Contribution funds received where the option for reinvestment has been nominated.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investmentId": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 5733,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "reinvestmentPercent": {
                                "description": "The percentage to be reinvested.",
                                "example": "50.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "initialChargePercent": {
                                "description": "The percentage Initial Charge.",
                                "example": "0.02",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "example": [
                      {
                        "id": 7107,
                        "totalAmount": "1575.00",
                        "status": "Active",
                        "contributionType": "P",
                        "entryFeePercent": "0.04",
                        "entryFeeBasis": "PreInvestment",
                        "brokeragePercent": "0.02",
                        "fixedAmount": false,
                        "marketingCodeId": 16,
                        "sourceOfWealth": "Father",
                        "cashReservePurpose": "F",
                        "adviserSent": true,
                        "investments": [
                          {
                            "id": 1987,
                            "amount": "1575.00",
                            "entryFeePercent": "0.04",
                            "brokeragePercent": "0.02",
                            "entryFeeAmount": "12.25",
                            "brokerageAmount": "25.75"
                          }
                        ],
                        "reinvestmentApplies": "UserSpecified",
                        "reinvestments": [
                          {
                            "investmentId": 45,
                            "reinvestmentPercent": "75.00",
                            "initialChargePercent": "0.02"
                          },
                          {
                            "investmentId": 5733,
                            "reinvestmentPercent": "25.00",
                            "initialChargePercent": "0.04"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/regular-contributions/{regularContributionId}": {
      "patch": {
        "tags": [
          "Investor"
        ],
        "summary": "Update Investor's Regular Contribution Arrangements",
        "description": "An investor has the ability to define one or many regular contribution arrangements for the recurring payments of funds into their own and / or other Investor Accounts defined to Composer i.e. regular contribution payment for the Investor and their partner. The arrangements are tied to the Investor and the applicable bank account from which the payment is to be sourced.\n\nThis will update, for a specific regular contribution arrangement, those details relating to the arrangement, recipient accounts and investments into which the funds are to be directed and any investment purchases from those funds if defined. A successful response for the update will be a '204 Operation succeeded'\n\n**NOTE :**For the data within the Investor Account, Investment and Reinvestment arrays the update is performed as a patch array within this request meaning the  data provided will be a replacement of what currently exists and therefore the request needs to represent the full details of the desired end state.",
        "operationId": "PATCH-regular-contributions-{regularcontributionid}",
        "requestBody": {
          "description": "Updates a Regular Contribution arrangement for an Investor.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "bankAccountId": {
                    "description": "The unique Composer identifier of the bank account held in Composer.",
                    "example": 9650,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "startDate": {
                    "description": "The date that the Regular Contribution is to start.",
                    "example": "2023-03-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "endDate": {
                    "description": "The date that the Regular Contribution is to end.",
                    "example": "2025-03-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "nextDueDate": {
                    "description": "The date that the Regular Contribution is next due to be collected.",
                    "example": "2023-03-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "contscheduleDateAdvised": {
                    "description": "The date the contribution schedule was received.",
                    "example": "2023-03-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The payment frequency of the Regular Contribution.",
                    "example": "Monthly"
                  },
                  "adoFileImport": {
                    "type": "boolean",
                    "description": "Indicator as to whether the definition represents an Approved Deposit arrangement.",
                    "example": false
                  },
                  "ddInvestorAccounts": {
                    "type": "array",
                    "description": "Investor Accounts associated to the Regular Contribution arrangement to receive the fund allocation as defined.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier for the Regular Contribution and Investor Account association.",
                          "example": 7221,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "totalAmount": {
                          "description": "The amount of the Regular Contribution.",
                          "example": "1225.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "status": {
                          "description": "The status of the Regular Contribution record. Possible values are: Active, Inactive.",
                          "example": "Active",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/activeInactiveStatus"
                            }
                          ]
                        },
                        "contributionType": {
                          "type": "string",
                          "description": "The Contribution Type of the Regular Contribution. This must match a Contribution Type as configured in Composer.",
                          "example": "P"
                        },
                        "entryFeePercent": {
                          "description": "The percentage Entry Fee to be paid.",
                          "example": "0.04",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "entryFeeBasis": {
                          "type": "string",
                          "description": "Used to indicate whether the contribution amount is Pre or Post the Upfront Adviser Charge and VAT where the Product is defined to allow PreInvestment EntryFees.",
                          "example": "PreInvestment"
                        },
                        "brokeragePercent": {
                          "description": "The percentage Adviser Entry Fee to be paid.",
                          "example": "0.02",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "fixedAmount": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Regular Contribution is for a fixed amount.",
                          "example": false
                        },
                        "marketingCodeId": {
                          "description": "The Marketing Code that applies to the Regular Contribution. This must match a Marketing Code as configured in Composer.",
                          "example": 13,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "sourceOfWealth": {
                          "type": "string",
                          "description": "The Source of Wealth that applies to the Regular Contribution. This must match a Source of Wealth as configured in Composer.",
                          "example": "Father"
                        },
                        "reinvestmentApplies": {
                          "type": "string",
                          "description": "Indicator as to whether the funds received as part of the Regular Contribution are to used to fund the purchase of external Investments and if so how are they nominated.",
                          "example": "UserSpecified",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/regularContReinvestmentApplies"
                            }
                          ]
                        },
                        "cashReservePurpose": {
                          "type": "string",
                          "description": "The Cash Reserve Purpose that applies to the Regular Contribution. This must match a Cash Reserve Purpose as configured in Composer.",
                          "example": "F"
                        },
                        "adviserSent": {
                          "type": "boolean",
                          "description": "Indicator as to whether the regular contribution was created by the adviser from the web.",
                          "example": false
                        },
                        "investments": {
                          "type": "array",
                          "description": "Details for those Investments into which the Regular Contribution is to be directed.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "amount": {
                                "description": "The amount from the Regular Contribution to be invested into the Investment.",
                                "example": "1225.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "entryFeePercent": {
                                "description": "The percentage Entry Fee to be paid.",
                                "example": "0.0400",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "brokeragePercent": {
                                "description": "The percentage Adviser Entry Fee to be paid.",
                                "example": "0.0200",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "entryFeeAmount": {
                                "description": "The amount of Entry Fee to be paid.",
                                "example": "60.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "brokerageAmount": {
                                "description": "The percentage Adviser Entry Fee to be paid.",
                                "example": "30.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "reinvestments": {
                          "type": "array",
                          "description": "Investment details of those to be purchased from the Regular Contribution funds received where the option for reinvestment has been nominated.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investmentId": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 5733,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "reinvestmentPercent": {
                                "description": "The percentage to be reinvested.",
                                "example": "25.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "initialChargePercent": {
                                "description": "The percentage Initial Charge.",
                                "example": "0.02",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "example": [
                      {
                        "id": 7221,
                        "totalAmount": "1225.00",
                        "status": "Active",
                        "contributionType": "P",
                        "entryFeePercent": "0.04",
                        "entryFeeBasis": "PreInvestment",
                        "brokeragePercent": "0.02",
                        "fixedAmount": false,
                        "marketingCodeId": 13,
                        "sourceOfWealth": "Father",
                        "reinvestmentApplies": "UserSpecified",
                        "cashReservePurpose": "F",
                        "adviserSent": false,
                        "investments": [
                          {
                            "id": 74,
                            "amount": "1225.00",
                            "entryFeePercent": "0.0400",
                            "brokeragePercent": "0.0200",
                            "entryFeeAmount": "60.00",
                            "brokerageAmount": "30.00"
                          }
                        ],
                        "reinvestments": [
                          {
                            "investmentId": 546,
                            "reinvestmentPercent": "25.00",
                            "initialChargePercent": "0.02"
                          },
                          {
                            "investmentId": 5733,
                            "reinvestmentPercent": "75.00",
                            "initialChargePercent": "0.04"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "regularContributionId",
          "in": "path",
          "description": "The unique Composer identifier for the Regular Contribution arrangement.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investors/{investorId}/scheme-specific-protection": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Investor’s Scheme Specific Protection",
        "description": "This will retrieve of the details of any Scheme Specific Protection that the Investor may hold. This information will need to be considered before the Investor takes any benefits from their pension.",
        "operationId": "GET-investors_{investorid}_scheme-specific-protection",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "schemeSpecificProtections": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investorAccountId": {
                                "description": "The unique Composer identifier for an Investor Account.",
                                "example": 23568971,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "protectedEarlyRetirementAge": {
                                "type": "integer",
                                "description": "The scheme specific protected early retirement age.",
                                "example": 50
                              },
                              "dateGranted": {
                                "description": "The date when scheme specific protection was granted.",
                                "example": "2016-04-05",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "lumpSum": {
                                "description": "The scheme specific tax free lump sum protected amount.",
                                "example": "1000000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "aDayAmount": {
                                "description": "The scheme specific protected A-Day amount.",
                                "example": "350000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "investorAccountId": 23568971,
                              "protectedEarlyRetirementAge": 50,
                              "dateGranted": "2016-04-05",
                              "lumpSum": "1000000.00",
                              "aDayAmount": "350000.00"
                            },
                            {
                              "investorAccountId": 12346872,
                              "protectedEarlyRetirementAge": 54,
                              "dateGranted": "2017-07-11",
                              "lumpSum": "1500000.00",
                              "aDayAmount": "400000.00"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for an Investor Account",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor/{investorId}/small-pot-eligibility-check": {
      "get": {
        "tags": [
          "Investor"
        ],
        "summary": "Retrieve Account balances for an Investor per Scheme",
        "description": "This endpoint will provide the total account balances held by an Investor within a Scheme and the Small Pot Limit to establish if they are eligible for a Small Pot payment.",
        "operationId": "GET-investor_{investorid}_small-pot-eligibility-response",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalAccountBalancesHeld": {
                          "type": "array",
                          "description": "The provision of the total account balances held within a Scheme.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "schemeId": {
                                "description": "The unique Composer identifier for a Scheme.",
                                "example": 3,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "smallPotLimit": {
                                "description": "The total amount that can be taken as a Small Pot.",
                                "example": "100000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "smallPotMultiAccount": {
                                "type": "boolean",
                                "description": "Indicates whether the small pot check applies across all accounts.",
                                "example": true
                              },
                              "totalBalance": {
                                "description": "The total balance of all the Investor’s Accounts held within the Scheme.",
                                "example": "27000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accountBalances": {
                                "type": "array",
                                "description": "The balance for the Investor Account.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "investorAccountId": {
                                      "description": "The unique Composer identifier for the Investor’s Account.",
                                      "example": 6918,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "balance": {
                                      "description": "The balance for the Investor Account.",
                                      "example": "23000.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "schemeId": 3,
                              "smallPotLimit": "100000.00",
                              "smallPotMultiAccount": true,
                              "totalBalance": "27000.00",
                              "accountBalances": [
                                {
                                  "investorAccountId": 89715687,
                                  "balance": "23000.00"
                                },
                                {
                                  "investorAccountId": 5187415,
                                  "balance": "5000.00"
                                }
                              ]
                            },
                            {
                              "schemeId": 6,
                              "smallPotLimit": "100000.00",
                              "smallPotMultiAccount": true,
                              "totalBalance": "35750.50",
                              "accountBalances": [
                                {
                                  "investorAccountId": 3527418,
                                  "balance": "30750.00"
                                },
                                {
                                  "investorAccountId": 6578945,
                                  "balance": "5750.50"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investors/{investorId}/investor-accounts/{investorAccountId}/transfer-in" : {
      "post" : {
        "tags" : [ "Investor" ],
        "summary": "Create a Transfer-in Request",
        "description" : "This endpoint will provide the ability to create an account transfer in.",
        "operationId" : "POST-investor-{investorid}-investor-accounts-{investoraccountid}-transfer-in",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required": ["data", "meta"],
                "properties" : {
                  "data" : {
                    "type" : "object",
                    "required": ["transferIn"],
                    "properties" : {
                      "transferIn" : {
                        "type" : "object",
                        "properties" : {
                          "assetAllocation" : {
                            "type" : "array",
                            "description" : "The details of Asset Allocation.",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "investmentId" : {
                                  "description" : "The unique Composer identifier for an investment.",
                                  "example" : 1,
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/identifier"
                                  } ]
                                },
                                "percentage" : {
                                  "description" : "The percentage of the total account balance that this Investment is targeted to hold.",
                                  "example" : "100.00",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/percentage"
                                  } ]
                                }
                              }
                            },
                            "example": [
                              {
                                "investmentId": 44,
                                "percentage": "75.00"
                              },
                              {
                                "investmentId": 908,
                                "percentage": "25.00"
                              }
                            ]
                          },
                          "applications" : {
                            "type" : "object",
                            "description" : "The details of the SIPP transfer in applications.",
                            "properties" : {
                              "sippTransferIn" : {
                                "type" : "array",
                                "description" : "The details of the Transfer In application. Choice between - blockModel, pensionCreditModel or standardModel.",
                                "items" : {
                                  "type" : "object",
                                  "oneOf" : [
                                    {"required": ["blockModel"]},
                                    {"required": ["pensionCreditModel"]},
                                    {"required": ["standardModel"]}
                                  ],
                                  "properties" : {
                                    "blockModel" : {
                                      "type" : "object",
                                      "description": "The details of Block Transfer In application.",
                                      "required" : ["scheme"],
                                      "properties" : {
                                        "investments" : {
                                          "type" : "array",
                                          "description" : "The details of the Investment Strategy.",
                                          "items" : {
                                            "type" : "object",
                                            "required": ["investmentId", "percentage"],
                                            "properties" : {
                                              "investmentId" : {
                                                "description" : "The unique Composer identifier for an investment.",
                                                "example" : 1,
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/identifier"
                                                } ]
                                              },
                                              "percentage" : {
                                                "description" : "The percentage of the total amount that this Investment is targeted to hold.",
                                                "example" : "50.00",
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/percentage"
                                                } ]
                                              }
                                            }
                                          }
                                        },
                                        "adviserCharge" : {
                                          "type": "object",
                                          "description": "The details of the Adviser Charges.",
                                          "properties" : {
                                            "amount" : {
                                              "description" : "The amount of adviser charge.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "20.0"
                                            },
                                            "rate" : {
                                              "description" : "The percentage rate of adviser charge to be applied to the Transfer In application.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "100.0"
                                            }
                                          }
                                        },
                                        "scheme" : {
                                          "type" : "object",
                                          "description" : "The details of the fund provider being transferred from.",
                                          "oneOf" : [
                                            {"required": ["name"]},
                                            {"required": ["fundProviderId"]}
                                          ],
                                          "properties" : {
                                            "name" : {
                                              "type" : "string",
                                              "description" : "The scheme name.",
                                              "example" : "Adam&Co.NomineesLtd"
                                            },
                                            "address" : {
                                              "type" : "string",
                                              "description" : "The scheme address.",
                                              "example" : "Adam&Co"
                                            },
                                            "phone" : {
                                              "type" : "string",
                                              "description" : "The scheme Phone Number.",
                                              "example" : "1321"
                                            },
                                            "fundProviderId" : {
                                              "type" : "integer",
                                              "description" : "The unique Composer identifier for the transferring scheme.",
                                              "example" : 1
                                            }
                                          }
                                        },
                                        "reference" : {
                                          "type" : "string",
                                          "description" : "The transferring scheme reference number.",
                                          "example" : "AB123456C"
                                        },
                                        "uncrystallisedAmount" : {
                                          "description" : "The last known uncrystallised value. This field value is not required for SIPP Income Drawdown Transfers.",
                                          "example" : "10000.00",
                                          "allOf" : [ {
                                            "$ref" : "#/components/schemas/decimal"
                                          } ]
                                        },
                                        "isRegisteredPensionScheme" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the Pension Scheme is registered.",
                                          "example" : true
                                        },
                                        "immediatePclsRequired" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether immediate PCLS is required.",
                                          "example" : false
                                        },
                                        "occupationalTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for occupational transfer.",
                                          "example" : false
                                        },
                                        "definedBenefitsTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for defined benefits transfer.",
                                          "example" : false
                                        },
                                        "protectedPCLS" : {
                                          "type" : "string",
                                          "description" : "The Investor’s protected Pension Commencement Lump Sum amount.",
                                          "example" : "100"
                                        },
                                        "protectedAge" : {
                                          "description" : "The Investor’s protected age.",
                                          "allOf" : [ {
                                            "$ref" : "#/components/schemas/nonNegativeInteger"
                                          } ],
                                          "example" : 70
                                        }
                                      }
                                    },
                                    "pensionCreditModel" : {
                                      "type" : "object",
                                      "required" : ["scheme"],
                                      "properties" : {
                                        "investments" : {
                                          "type" : "array",
                                          "required": ["investmentId", "percentage"],
                                          "description" : "The details of the Investment Strategy.",
                                          "items" : {
                                            "type" : "object",
                                            "properties" : {
                                              "investmentId" : {
                                                "description" : "The unique Composer identifier for an investment.",
                                                "example" : 1,
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/identifier"
                                                } ]
                                              },
                                              "percentage" : {
                                                "description" : "The percentage of the total amount that this Investment is targeted to hold.",
                                                "example" : "40.00",
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/percentage"
                                                } ]
                                              }
                                            }
                                          }
                                        },
                                        "adviserCharge" : {
                                          "type": "object",
                                          "description": "The details of the Adviser Charges.",
                                          "properties" : {
                                            "amount" : {
                                              "description" : "The amount of adviser charge.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "20.0"
                                            },
                                            "rate" : {
                                              "description" : "The percentage rate of adviser charge to be applied to the Transfer In application.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "100.0"
                                            }
                                          }
                                        },
                                        "scheme" : {
                                          "type" : "object",
                                          "description" : "The details of the fund provider being transferred from.",
                                          "oneOf" : [
                                            {"required": ["name"]},
                                            {"required": ["fundProviderId"]}
                                          ],
                                          "properties" : {
                                            "name" : {
                                              "type" : "string",
                                              "description" : "The scheme name.",
                                              "example" : "HargreavesLansdown"
                                            },
                                            "address" : {
                                              "type" : "string",
                                              "description" : "The scheme address.",
                                              "example" : "OneCollegeSquare"
                                            },
                                            "phone" : {
                                              "type" : "string",
                                              "description" : "The scheme Phone Number.",
                                              "example" : "13233"
                                            },
                                            "fundProviderId" : {
                                              "type" : "integer",
                                              "description" : "The unique Composer identifier for the transferring scheme.",
                                              "example" : 1
                                            }
                                          }
                                        },
                                        "reference" : {
                                          "type" : "string",
                                          "description" : "The transferring scheme reference number.",
                                          "example" : "AB123456C"
                                        },
                                        "uncrystallisedAmount" : {
                                          "description" : "The last known uncrystallised value. This field value is not required for SIPP Income Drawdown Transfers.",
                                          "example" : "10000.00",
                                          "allOf" : [ {
                                            "$ref" : "#/components/schemas/decimal"
                                          } ]
                                        },
                                        "isRegisteredPensionScheme" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the Pension Scheme is registered.",
                                          "example" : true
                                        },
                                        "occupationalTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for occupational transfer.",
                                          "example" : false
                                        },
                                        "definedBenefitsTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for defined benefits transfer.",
                                          "example" : false
                                        },
                                        "fullTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for full transfer.",
                                          "example" : true
                                        },
                                        "isDisqualifyingPensionCredit" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the SIPP being transferred in is a disqualifying pension.",
                                          "example" : false
                                        }
                                      }
                                    },
                                    "standardModel" : {
                                      "type" : "object",
                                      "required" : ["scheme"],
                                      "description" : "The details of Standard Transfer In application.",
                                      "properties" : {
                                        "investments" : {
                                          "type" : "array",
                                          "required": ["investmentId", "percentage"],
                                          "description" : "The details of the Investment Strategy.",
                                          "items" : {
                                            "type" : "object",
                                            "properties" : {
                                              "investmentId" : {
                                                "description" : "The unique Composer identifier for an investment.",
                                                "example" : 1,
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/identifier"
                                                } ]
                                              },
                                              "percentage" : {
                                                "description" : "The percentage of the total amount that this Investment is targeted to hold.",
                                                "example" : "40.00",
                                                "allOf" : [ {
                                                  "$ref" : "#/components/schemas/percentage"
                                                } ]
                                              }
                                            }
                                          }
                                        },
                                        "adviserCharge" : {
                                          "type": "object",
                                          "description": "The details of the Adviser Charges.",
                                          "properties" : {
                                            "amount" : {
                                              "description" : "The amount of adviser charge.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "20.0"
                                            },
                                            "rate" : {
                                              "description" : "The percentage rate of adviser charge to be applied to the Transfer In application.",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ],
                                              "example" : "100.0"
                                            }
                                          }
                                        },
                                        "scheme" : {
                                          "type" : "object",
                                          "description" : "The details of the fund provider being transferred from.",
                                          "oneOf" : [
                                            {"required": ["name"]},
                                            {"required": ["fundProviderId"]}
                                          ],
                                          "properties" : {
                                            "name" : {
                                              "type" : "string",
                                              "description" : "The scheme name.",
                                              "example" : "HargreavesLansdown"
                                            },
                                            "address" : {
                                              "type" : "string",
                                              "description" : "The scheme address.",
                                              "example" : "OneCollegeSquare"
                                            },
                                            "phone" : {
                                              "type" : "string",
                                              "description" : "The scheme Phone Number.",
                                              "example" : "13233"
                                            },
                                            "fundProviderId" : {
                                              "type" : "integer",
                                              "description" : "The unique Composer identifier for the transferring scheme.",
                                              "example" : 1
                                            }
                                          }
                                        },
                                        "reference" : {
                                          "type" : "string",
                                          "description" : "The transferring scheme reference number.",
                                          "example" : "AB123456C"
                                        },
                                        "uncrystallisedAmount" : {
                                          "description" : "The last known crystallised value. This field value is not required for SIPP Uncrystallised Transfers.",
                                          "example" : "10000.00",
                                          "allOf" : [ {
                                            "$ref" : "#/components/schemas/decimal"
                                          } ]
                                        },
                                        "isRegisteredPensionScheme" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the Pension Scheme is registered.",
                                          "example" : true
                                        },
                                        "occupationalTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for occupational transfer.",
                                          "example" : true
                                        },
                                        "definedBenefitsTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for defined benefits transfer.",
                                          "example" : true
                                        },
                                        "fullTransfer" : {
                                          "type" : "boolean",
                                          "description" : "Indicates as to whether the application is for full transfer.",
                                          "example" : true
                                        }
                                      }
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "blockModel": {
                                      "investments": [
                                        {
                                          "investmentId": 44,
                                          "percentage": "50.00"
                                        },
                                        {
                                          "investmentId": 986,
                                          "percentage": "50.00"
                                        }
                                      ],
                                      "adviserCharge": {
                                        "amount": "20.0",
                                        "rate": "100.0"
                                      },
                                      "scheme": {
                                        "name": "Adam&Co.Nominees Ltd",
                                        "address": "Adam&Co",
                                        "phone": "04321321234",
                                        "fundProviderId": 1
                                      },
                                      "reference": "AB123456C",
                                      "uncrystallisedAmount": "10000.00",
                                      "isRegisteredPensionScheme": true,
                                      "immediatePclsRequired": false,
                                      "occupationalTransfer": false,
                                      "definedBenefitsTransfer": false,
                                      "protectedPCLS": "1000.00",
                                      "protectedAge": 70
                                    },
                                    "pensionCreditModel": {
                                      "investments": [
                                        {
                                          "investmentId": 44,
                                          "percentage": "40.00"
                                        },
                                        {
                                          "investmentId": 5645,
                                          "percentage": "60.00"
                                        }
                                      ],
                                      "adviserCharge": {
                                        "amount": "20.00",
                                        "rate": "0.04"
                                      },
                                      "scheme": {
                                        "name": "HargreavesLansdown",
                                        "address": "OneCollegeSquare",
                                        "phone": "043213233234",
                                        "fundProviderId": 1
                                      },
                                      "reference": "AB123456C",
                                      "uncrystallisedAmount": "10000.00",
                                      "isRegisteredPensionScheme": true,
                                      "occupationalTransfer": false,
                                      "definedBenefitsTransfer": false,
                                      "fullTransfer": true,
                                      "isDisqualifyingPensionCredit": false
                                    },
                                    "standardModel": {
                                      "investments": [
                                        {
                                          "investmentId": 44,
                                          "percentage": "40.00"
                                        },
                                        {
                                          "investmentId": 5645,
                                          "percentage": "60.00"
                                        }
                                      ],
                                      "adviserCharge": {
                                        "amount": "20.00",
                                        "rate": "0.04"
                                      },
                                      "scheme": {
                                        "name": "HargreavesLansdown",
                                        "address": "OneCollegeSquare",
                                        "phone": "043213233234",
                                        "fundProviderId": 1
                                      },
                                      "reference": "AB123456C",
                                      "uncrystallisedAmount": "10000.00",
                                      "isRegisteredPensionScheme": true,
                                      "occupationalTransfer": false,
                                      "definedBenefitsTransfer": false,
                                      "fullTransfer": true
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "sippBlockTransfer" : {
                            "type" : "boolean",
                            "description" : "Indicates as to whether the initial application for the investor account within a pension wrapper was a block transfer.",
                            "example" : true
                          },
                          "protection" : {
                            "type" : "boolean",
                            "description" : "Indicates as to whether the protection is applicable for Investor.",
                            "example" : true
                          }
                        }
                      },
                      "discretionaryMandate" : {
                        "type" : "boolean",
                        "description" : "Indicator as to whether there is a discretionary mandate which allows the adviser to place trades on the Investor Account.",
                        "example" : true
                      },
                      "adviserCreated" : {
                        "type" : "boolean",
                        "description" : "Indicates as to whether the adviser created the request.",
                        "example" : true
                      }
                    }
                  },
                  "meta" : {
                    "type" : "object",
                    "required" : ["payloadId", "sender"],
                    "properties" : {
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "809d326d-0ee7-4840-a011-8831872c6074"
                      },
                      "sender" : {
                        "type" : "object",
                        "required" : ["senderId"],
                        "description" : "The details of the user logging the request.",
                        "properties" : {
                          "senderId" : {
                            "type" : "string",
                            "description" : "The unique Composer identifier used to represent the calling application.",
                            "example" : "MEMBERPORTAL"
                          },
                          "role" : {
                            "type" : "string",
                            "description" : "The role of the user who logged the request.",
                            "example" : "Adviser"
                          },
                          "partyType" : {
                            "description" : "The Composer identifier for the Party Type of that to whom the attributes are associated.",
                            "example" : "InvestorAccount",
                            "type": "string",
                            "enum": [
                              "InvestorAccount",
                              "AdviserAccount",
                              "Investor"
                            ]
                          },
                          "partyId" : {
                            "description" : "The unique identifier for the acting party who submitted the request.",
                            "example" : 10,
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/identifier"
                            } ]
                          },
                          "adviceGiven" : {
                            "type" : "boolean",
                            "description" : "Indicator as to whether advice was given for this event.",
                            "example" : false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Response on successful creation of the resource",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/201CreatedRESPONSEWithWorkItemId"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Operation is bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        },
        "parameters" : [
          {
            "name" : "investorId",
            "in" : "path",
            "description" : "The unique Composer identifier for the Investor.",
            "required" : true,
            "example": 90823572,
            "schema" : {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name" : "investorAccountId",
            "in" : "path",
            "description" : "The unique Composer identifier for the Investor Account.",
            "required" : true,
            "example": 120963732,
            "schema" : {
              "$ref": "#/components/schemas/identifier"
            }
          } ]
      }
    },
    "/crystallisation": {
      "post": {
        "tags": [
          "Investor"
        ],
        "summary": "Create a Crystallisation Request",
        "description": "Initiate the Crystallisation of monies from an existing accumulation account to a new or an existing drawdown account.",
        "operationId": "POST-investor-crystallisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "accountDetails": {
                    "type": "object",
                    "properties": {
                      "accountStopped": {
                        "type": "boolean",
                        "description": "Indicator as to whether the Investor Account has been stopped.",
                        "example": true
                      },
                      "administratorUserId": {
                        "description": "The Composer User Id of the administrator that is administering this account. Must be a valid Composer user. Only should be supplied where reference code ALLOW_INV_ACC_ADMIN = 'Y'",
                        "example": 5,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ]
                      },
                      "adviserId": {
                        "description": "The financial adviser associated with the given investor account.",
                        "example": 3,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ]
                      },
                      "correspondenceSentTo": {
                        "type": "string",
                        "description": "Indicator as to whom correspondence related to this investor account is to be sent. Possible values are:  None, Member, Adviser, Both.",
                        "enum": [
                          "NoCorrespondence",
                          "AdviserOnly",
                          "InvestorAndAdviser",
                          "InvestorOnly"
                        ],
                        "example": "InvestorAndAdviser"
                      },
                      "createKYC": {
                        "type": "boolean",
                        "description": "Indicator as to whether KYC is created.",
                        "example": false
                      },
                      "crystallisedAccountDetails": {
                        "type": "object",
                        "properties": {
                          "accountAttributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "attributeId": {
                                  "description": "A unique Composer identifier for the Attribute.",
                                  "example": 1,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/identifier"
                                    }
                                  ]
                                },
                                "attributeValue": {
                                  "type": "string",
                                  "description": "The value of the Attribute",
                                  "example": "Yes"
                                },
                                "shortCode": {
                                  "type": "string",
                                  "description": "A unique Composer identifier for the Attribute short code.",
                                  "example": "MiFID"
                                }
                              }
                            },
                            "example": [
                              {
                                "attributeId": 1,
                                "attributeValue": "Yes",
                                "shortCode": "MiFID"
                              }
                            ]
                          },
                          "accountDesignation": {
                            "type": "string",
                            "description": "Indicates as to whether account has any account designation. Account designations are used to distinguish between holdings or reflect the beneficial ownership.",
                            "example": "string"
                          },
                          "accountInvestmentStrategy": {
                            "type": "object",
                            "properties": {
                              "investmentModelId": {
                                "description": "The unique Composer identifier for the Investment model.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investments": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "cashDistributionOption": {
                                      "type": "string",
                                      "description": "The cash distribution option for the account investment. Possible values are: DistributionToBePaidOut, ReInvestIntoDefaultCash, RePurchaseIntoSameAsset",
                                      "example": "DistributionToBePaidOut"
                                    },
                                    "investmentId": {
                                      "description": "The unique Composer identifier for the Investment.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "investmentPathwayId": {
                                      "description": "The unique Composer identifier for the Investment pathway.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "percentage": {
                                      "description": "The percentage to be invested.",
                                      "example": "90.3",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "cashDistributionOption": "DistributionToBePaidOut",
                                    "investmentId": 14,
                                    "investmentPathwayId": 21,
                                    "percentage": "100.00"
                                  }
                                ]
                              }
                            }
                          },
                          "benefitCrystallisationEvents": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "bceDate": {
                                  "description": "The date of the benefit crystallisation event.",
                                  "example": "2023-11-24",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/date"
                                    }
                                  ]
                                },
                                "bceType": {
                                  "type": "string",
                                  "description": "The type of the benefit crystallisation event.",
                                  "example": "o"
                                },
                                "ltaUtilisedAmount": {
                                  "type": "integer",
                                  "description": "The amount of the lifetime utilisation.",
                                  "example": 0
                                },
                                "ltaUtilisedPercent": {
                                  "type": "integer",
                                  "description": "The percentage of the lifetime utilisation.",
                                  "example": 0
                                }
                              }
                            },
                            "example": [
                              {
                                "bceDate": "2023-11-24",
                                "bceType": "o",
                                "ltaUtilisedAmount": 0,
                                "ltaUtilisedPercent": 0
                              }
                            ]
                          },
                          "adviserCharges": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "adviserRole": {
                                  "type": "string",
                                  "description": "The adviser role details.",
                                  "example": "four"
                                },
                                "amount": {
                                  "type": "string",
                                  "description": "The amount of adviser charge.",
                                  "example": 0,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                },
                                "applicationType": {
                                  "type": "string",
                                  "description": "The type of application. Possible Values are: ReRegistration, Regular, RegularEmployer, Single, SingleEmployer, TransferIn, TransferInEmployer.",
                                  "enum": [
                                    "Single",
                                    "Regular",
                                    "TransferIn",
                                    "ReRegistration",
                                    "SingleEmployer",
                                    "RegularEmployer",
                                    "TransferInEmployer"
                                  ],
                                  "example": "ReRegistration"
                                },
                                "adviserChargeType": {
                                  "type": "string",
                                  "description": "The type of Charges. Possible values are: Charge, Switch, Trail, Upfront.",
                                  "enum": [
                                    "Charge",
                                    "Switch",
                                    "Trail",
                                    "Upfront"
                                  ],
                                  "example": "Charge"
                                },
                                "frequency": {
                                  "type": "string",
                                  "description": "The frequency at which the adviser charge is to be applied.",
                                  "example": "Annually",
                                  "enum": [
                                    "Monthly",
                                    "Quarterly",
                                    "Annually",
                                    "HalfYearly"
                                  ]
                                },
                                "rate": {
                                  "type": "string",
                                  "description": "The percentage rate of adviser charge to be applied.",
                                  "example": "0.0",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                },
                                "vatApplies": {
                                  "type": "boolean",
                                  "description": "Indicator as to whether the VAT is applied.",
                                  "example": true
                                }
                              }
                            },
                            "example": [
                              {
                                "adviserRole": "four",
                                "amount": "100.05",
                                "applicationType": "ReRegistration",
                                "adviserChargeType": "Charge",
                                "frequency": "Annually",
                                "rate": "0.0",
                                "vatApplies": true
                              }
                            ]
                          },
                          "crystallisationDetails": {
                            "type": "object",
                            "properties": {
                              "bankAccount": {
                                "type": "object",
                                "properties": {
                                  "accountNumber": {
                                    "type": "string",
                                    "description": "The number associated to a domestic bank account.",
                                    "example": "44445555"
                                  },
                                  "bankAccount": {
                                    "type": "string",
                                    "description": "Details for the bank account into which income and PCLS will be paid.",
                                    "example": "405030"
                                  },
                                  "bankAccountName": {
                                    "type": "string",
                                    "description": "The name associated to the bank account.",
                                    "example": "John Smith"
                                  },
                                  "bankAccountType": {
                                    "type": "string",
                                    "description": "The specific type of bank account. Possible values are: Third Party, Retiready.",
                                    "example": "Retiready",
                                    "enum": [
                                      "ThirdParty",
                                      "Retiready"
                                    ]
                                  },
                                  "bankClassificationType": {
                                    "type": "string",
                                    "description": "Indicator as to whether the bank account is Domestic or International.",
                                    "example": "Domestic",
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/accountType"
                                      }
                                    ]
                                  },
                                  "bankCustomerReference": {
                                    "type": "string",
                                    "description": "An external customer reference relating to the bank account.",
                                    "example": "My account"
                                  },
                                  "bankIdentifierCode": {
                                    "type": "string",
                                    "description": "The Bank Identifier Code for the bank.",
                                    "example": "ANZBAU3M"
                                  },
                                  "currencyCode": {
                                    "type": "string",
                                    "description": "The currency of the bank account. The value will match a currency code as configured in Composer.",
                                    "example": "USD"
                                  },
                                  "defaultBankAccount": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether the bank account is set as the default for the entity.",
                                    "example": true
                                  },
                                  "forFurtherCreditTo": {
                                    "type": "string",
                                    "description": "A reference that is submitted to the intermediary bank where a transfer is sent to the final beneficiary's bank account via an intermediary bank",
                                    "example": "string"
                                  },
                                  "internationalAccountNumber": {
                                    "type": "string",
                                    "description": "The number associated to an international bank account (IBAN).",
                                    "example": "123456789"
                                  },
                                  "overrideBankAccountValidationWarnings": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether to ignore all warnings.",
                                    "example": true
                                  }
                                }
                              },
                              "bankAccountId": {
                                "description": "The unique Composer identifier of the bank account held in Composer ",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "crystalliseMethod": {
                                "type": "string",
                                "description": "The crystallisation method. Possible values are: Full, Income, PCLS, SLTARemaining, Value.",
                                "example": "Full",
                                "enum":  [
                                  "PCLS",
                                  "Full",
                                  "Value",
                                  "Income",
                                  "SLTARemaining"
                                ]
                              },
                              "crystallisedAmount": {
                                "description": "The amount value to be crystallised.",
                                "example": "1.0",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "deactivatePrimaryAccountRecurringSwitch": {
                                "type": "boolean",
                                "description": "Indicates as to whether the recurring switch is de-activated.",
                                "example": true
                              },
                              "directPayTypeCode": {
                                "type": "string",
                                "description": "The type of direct credit payment to be used for the Pension Income. Possible value are: BACS, CHAPS, FASTPAY, INTNL, INTTFR, PDC.",
                                "enum": [
                                  "BACS",
                                  "CHAPS",
                                  "FASTPAY",
                                  "INTNL",
                                  "INTTFR",
                                  "PDC"
                                ],
                                "example": "BACS"
                              },
                              "incomeDetails": {
                                "type": "object",
                                "properties": {
                                  "incomePaymentDay": {
                                    "type": "integer",
                                    "description": "Requested day of the month for income requested in the drawdown to be paid.  ",
                                    "example": 1
                                  },
                                  "incomeRequired": {
                                    "description": "The amount value of income required.",
                                    "example": "0.0",
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/decimal"
                                      }
                                    ]
                                  },
                                  "incomeRequiredFrequency": {
                                    "type": "string",
                                    "description": "The frequency of the income required. Possible values are: Annually, HalfYearly, Monthly, Quarterly.",
                                    "enum": [
                                      "Annually",
                                      "HalfYearly",
                                      "Monthly",
                                      "Quarterly"
                                    ],
                                    "example": "Annually"
                                  }
                                }
                              },
                              "initialAdviserAmount": {
                                "description": "The initial adviser charge amount.",
                                "example": "1.0",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "initialAdviserPercentage": {
                                "description": "The initial adviser charge percentage.",
                                "example": "1.0",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "maxPclsAmount": {
                                "type": "boolean",
                                "description": "Indicator as to whether the PCLS amount is set to be maximum allowed.",
                                "example": true
                              },
                              "pclsAmount": {
                                "description": "The amount to be taken as Pension Commencement Lump Sum amount.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "pensionGuidance": {
                                "type": "object",
                                "properties": {
                                  "pensionGuidanceSought": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether Pension Guidance has been sought.",
                                    "example": true
                                  },
                                  "pensionGuidanceOptOut": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether the user opted out from the Pension Wise Guidance.",
                                    "example": true
                                  },
                                  "pensionGuidanceOptOutReason": {
                                    "type": "string",
                                    "description": "The reason for opting out from Pension Wise Guidance.",
                                    "example": "REASON"
                                  },
                                  "accessingBenefits": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether user is accessing the pension benefits.",
                                    "example": false
                                  }
                                }
                              },
                              "selectedBceAssets": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "cashReservePurposeCode": {
                                      "type": "string",
                                      "description": "The unique Composer identifier code for the Cash Reserve Purpose.",
                                      "example": "E"
                                    },
                                    "designationAmount": {
                                      "description": "The designated amount for BCE.",
                                      "example": "1.0",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "investmentId": {
                                      "description": "The unique Composer identifier for the Investment to be used for crystallisation.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "pclsAssetAmount": {
                                      "description": "The PCLS asset amount to be used for BCE.",
                                      "example": "1.0",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "cashReservePurposeCode": "E",
                                    "designationAmount": "1000.0",
                                    "investmentId": 41,
                                    "pclsAssetAmount": "150.0"
                                  }
                                ]
                              },
                              "shortFall": {
                                "type": "boolean",
                                "description": "Indicator as to whether the short fall is allowed.",
                                "example": true
                              },
                              "targetIncomeType": {
                                "type": "string",
                                "description": "The method used to define income. Possible values are: CurrentIncome, MaximumIncome, MinimumIncome, SpecifiedIncome",
                                "enum": [
                                  "CurrentIncome",
                                  "MaximumIncome",
                                  "MinimumIncome",
                                  "SpecifiedIncome"
                                ],
                                "example": "CurrentIncome"
                              }
                            }
                          },
                          "crystallisedValue": {
                            "description": "The value of crystallised funds received into the Income Drawdown Account.",
                            "example": "0.0",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          },
                          "externalReferences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "externalReference": {
                                  "type": "string",
                                  "description": "The external reference.",
                                  "example": "45678"
                                },
                                "externalSystem": {
                                  "type": "string",
                                  "description": "The external system reference.",
                                  "example": "OLDSYSREF"
                                }
                              }
                            },
                            "example" : [
                              {
                                "externalReference": "45678",
                                "externalSystem": "OLDSYSREF"
                              }
                            ]
                          },
                          "flexiAccount": {
                            "type": "boolean",
                            "description": "Indicator as to whether Flexible Income is allowed.",
                            "example": true
                          },
                          "productId": {
                            "description": "The unique Composer identifier for the Product associated to the new Investor Account.",
                            "example": 20,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "rebalanceSwitch": {
                            "type": "object",
                            "properties": {
                              "adhocRebalanceSwitch": {
                                "type": "boolean",
                                "description": "Indicator this rebalance switch definition is a one off rebalance request. Will be made inactive after being run.",
                                "example": true
                              },
                              "endDate": {
                                "description": "The date after which the rebalance becomes inactive.",
                                "example": "2019-09-10",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "frequency": {
                                "type": "string",
                                "description": "The frequency at which the rebalance is to be performed.",
                                "example": "Monthly",
                                "enum": [
                                  "Weekly",
                                  "Fortnightly",
                                  "Monthly",
                                  "Quarterly",
                                  "HalfYearly",
                                  "Annually"
                                ]
                              },
                              "nextDueDate": {
                                "description": "The date that the rebalance is next due.",
                                "example": "2019-09-10",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "rebalanceRecurringSwitchType": {
                                "type": "string",
                                "description": "Type of Recurring Switch.",
                                "example": "Rebalance",
                                "enum": [
                                  "Rebalance",
                                  "RebalanceTolerance"
                                ]
                              },
                              "rebalanceStrategies": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "investmentId": {
                                      "description": "The unique Composer identifier for the Investment.",
                                      "example": 10,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "investmentStrategyPercent": {
                                      "description": "The percentage of the total account balance that this Investment is targeted to hold.",
                                      "example": "100.0",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    },
                                    "rebalanceTolerancePercent": {
                                      "description": "The percentage tolerance to be considered in the determination as to whether a switch rebalance is required.",
                                      "example": "100.0",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "investmentId": 10,
                                    "investmentStrategyPercent": "100.0",
                                    "rebalanceTolerancePercent": "100.0"
                                  }
                                ]
                              },
                              "startDate": {
                                "description": "The date from which the Rebalance Switch definition is to start.",
                                "example": "2019-02-28",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "status": {
                                "description": "The status of the Rebalance Switch definition.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "switchTargetAmount": {
                                "description": "The target amount of the Rebalance Switch.",
                                "example": "0.0",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          },
                          "crystallisedAccountId": {
                            "description": "The unique Composer identifier for Investor's crystallised account id.",
                            "example": 1,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "discretionaryInvestmentManager": {
                            "type": "integer",
                            "description": "Indicator as to whether there is any additional discretionary investment manager on the account.",
                            "example": 0
                          },
                          "feeDeductionMemberAccountId": {
                            "description": "The fee deduction member account id.",
                            "example": 1,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "feeGroupId": {
                            "description": "The id of the fee group to assign to the account.",
                            "example": 0,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "mailExclusion": {
                            "type": "boolean",
                            "description": "Indicator to advise if the Investor Account has been flagged as being excluded from being sent correspondence.",
                            "example": true
                          },
                          "preferredPaymentType": {
                            "type": "string",
                            "description": "The Preferred Payment Type of payments to be made from the Investor Account.",
                            "example": "string"
                          },
                          "propositionId": {
                            "description": "The unique Composer identifier for proposition Id.",
                            "example": 12345,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "startDate": {
                            "description": "The date at which the Investor account is to start.",
                            "example": "2018-01-31",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/date"
                              }
                            ]
                          },
                          "uncrystallisedAccountId": {
                            "description": "The unique Composer identifier for Investor's uncrystallised account id.",
                            "example": 0,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "updateMatchPartyId": {
                            "description": "The unique Composer identifier for the party who provide the fee group id.",
                            "example": 0,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "updateMatchPartyTypeId": {
                            "description": "The unique Composer identifier for the party who provide the fee group id.",
                            "example": 0,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          }
                        }
                      },
                      "adviceGiven": {
                        "type": "boolean",
                        "description": "Indicator as to whether advice was given for this event.",
                        "example": true
                      },
                      "basisOfSale": {
                        "type": "string",
                        "description": "Indicator as to the Basis of Sale",
                        "example": "I"
                      },
                      "cashWarning": {
                        "type": "boolean",
                        "description": "Indicator as to whether a cash warning was provided to the investor.",
                        "example": true
                      },
                      "cashWarningConfirmation": {
                        "type": "boolean",
                        "description": "Indicator as to whether a cash warning was accepted.",
                        "example": true
                      },
                      "discretionaryMandate": {
                        "type": "boolean",
                        "description": "Indicator as to whether there is a discretionary mandate which allows the adviser to place trades on the Investor Account.",
                        "example": true
                      },
                      "investor": {
                        "type": "object",
                        "properties": {
                          "investorId": {
                            "description": "The unique Composer identifier for the Investor holding the Investor Account.",
                            "example": 0,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "sagaId": {
                          "description": "",
                          "example": 99,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "sagaStatus": {
                          "type": "string",
                          "description": "",
                          "example": "IN_PROGRESS"
                        }
                      },
                      "description": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/relationships/individuals": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "Create a new Individual Relation",
        "description": "This will create a new individual relation, such as a beneficiary.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same creation of an Individual Relation but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be for the standard POST request for the Individual Relation.\n    - `POST /relationships/individuals`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `POST /work-item-managed-tasks/relationships/individuals`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPOST /work-item-managed-tasks/relationships/individuals\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId": "POST-relationships-individuals",
        "requestBody": {
          "description": "Create a new individual relation such as a beneficiary.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "givenNames": {
                    "type": "string",
                    "description": "The Individual's forename and any middle names.",
                    "example": "Rich"
                  },
                  "name": {
                    "type": "string",
                    "description": "The Individual's surname.",
                    "example": "Monohan"
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "The Individual's short name.",
                    "example": "Mono"
                  },
                  "salutation": {
                    "type": "string",
                    "description": "The Individual's salutation.",
                    "example": "Captain Monohan"
                  },
                  "gender": {
                    "description": "The Individual's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                    "example": "Male",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/gender"
                      }
                    ]
                  },
                  "addresses": {
                    "type": "array",
                    "description": "The addresses associated to the Individual. The ability exists for the Entity to hold addresses for each differing type - Actual, Postal, Forwarding.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "addressType": {
                          "description": "The type of address. Possible values are: Actual, Postal, Forwarding.",
                          "example": "Postal",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/addressType"
                            }
                          ]
                        },
                        "careOfName": {
                          "type": "string",
                          "description": "The care of name of address.",
                          "example": "The Manager"
                        },
                        "propertyName": {
                          "type": "string",
                          "description": "The name of the property of the address.",
                          "example": "The Cottage"
                        },
                        "prefixType": {
                          "type": "string",
                          "description": "The address prefix type. The value provided will match a prefix type as configured within Composer.",
                          "example": "BLDNG"
                        },
                        "prefix": {
                          "type": "string",
                          "description": "The actual value related to the address prefix.",
                          "example": "7"
                        },
                        "suffixType": {
                          "type": "string",
                          "description": "The address suffix type. The value provided will match a prefix type as configured within Composer.",
                          "example": "APT"
                        },
                        "suffix": {
                          "type": "string",
                          "description": "The actual value related to the address suffix.",
                          "example": "2"
                        },
                        "streetNumber": {
                          "type": "string",
                          "description": "The street number of the address.",
                          "example": "74"
                        },
                        "street": {
                          "type": "string",
                          "description": "The street name of the address.",
                          "example": "High Street"
                        },
                        "street2": {
                          "type": "string",
                          "description": "The second part of the street name of the address.",
                          "example": "Garners Lane"
                        },
                        "town": {
                          "type": "string",
                          "description": "The town/city name of the address.",
                          "example": "Basildon"
                        },
                        "district": {
                          "type": "string",
                          "description": "The district name of the address.",
                          "example": "Essex District"
                        },
                        "county": {
                          "type": "string",
                          "description": "The county name of the address.",
                          "example": "ESSEX"
                        },
                        "postcode": {
                          "type": "string",
                          "description": "The postcode of the address.",
                          "example": "AH0 ER1"
                        },
                        "countryCode": {
                          "type": "string",
                          "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer.",
                          "example": "GBR"
                        }
                      }
                    },
                    "example": [
                      {
                        "addressType": "Postal",
                        "careOfName": "The Manager",
                        "propertyName": "The Cottage",
                        "prefixType": "BLDNG",
                        "prefix": "7",
                        "suffixType": "APT",
                        "suffix": "2",
                        "streetNumber": "74",
                        "street": "High Street",
                        "street2": "Garners Lane",
                        "town": "Basildon",
                        "district": "Essex District",
                        "county": "ESSEX",
                        "postcode": "AH0 ER1",
                        "countryCode": "GBR"
                      }
                    ]
                  },
                  "dateOfBirth": {
                    "description": "The Individual's date of birth.",
                    "example": "1990-01-01",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "birthCountry": {
                    "type": "string",
                    "description": "The Individual’s birth country in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer and is used in FATCA reporting.",
                    "example": "AUS"
                  },
                  "birthplace": {
                    "type": "string",
                    "description": "The Individual's place of birth.",
                    "example": "Melbourne"
                  },
                  "nino": {
                    "type": "string",
                    "description": "The Individual’s National Insurance Number.",
                    "example": "NN222222A"
                  },
                  "email": {
                    "type": "string",
                    "description": "The Individual's e-mail address.",
                    "example": "test@gbst.com"
                  },
                  "homePhone": {
                    "type": "string",
                    "description": "The Individual's home phone number.",
                    "example": "0115698574"
                  },
                  "mobile": {
                    "type": "string",
                    "description": "The Individual's mobile phone number.",
                    "example": "0115698574"
                  },
                  "workPhone": {
                    "type": "string",
                    "description": "The Individual's work phone number.",
                    "example": "0115698574"
                  },
                  "preferredCorrespondenceMethod": {
                    "description": "The Individual's preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                    "example": "Email",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                      }
                    ]
                  },
                  "nextBestPreferredCorrespondenceMethod": {
                    "type": "string",
                    "description": "The Individual's next preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                    "example": "Telephone",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                      }
                    ]
                  },
                  "retirementDate": {
                    "description": "The Individual's selected retirement date.",
                    "example": "2023-10-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "deceasedDate": {
                    "description": "The Individual's date of death.",
                    "example": "2023-10-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "deceasedDateStatus": {
                    "type": "string",
                    "description": "The Individual's deceased date status. The value provided will match a deceased date status as configured within Composer.",
                    "example": "DNOT"
                  },
                  "deceasedNotificationDate": {
                    "description": "The date notification received of the Individual's death.",
                    "example": "2023-10-11",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "amlStatus": {
                    "type": "string",
                    "description": "The Individual’s AML Status. The value provided will match a value configured in the AML_STATUS_LIST reference code in Composer.",
                    "example": "P"
                  },
                  "fcdsStatus": {
                    "type": "string",
                    "description": "Any Financial Crime and Data Security restrictions that may be applicable to the Individual. Possible values for this field are stored in reference code FCDS_WARN_TYPE.",
                    "example": "FCDS 01"
                  },
                  "directPayTypeCode": {
                    "type": "string",
                    "description": "The type of direct credit payment to be used for any electronic payment. The value provided must match a value configured in the DIRECT_PAY_TYPE_LIST reference code in Composer.",
                    "example": "BACS"
                  },
                  "externalEntity": {
                    "type": "boolean",
                    "description": "Indicator if this record is for an External Entity.",
                    "example": true
                  },
                  "groupingCode": {
                    "type": "string",
                    "description": "The grouping code associated to the Individual.",
                    "example": "FEE"
                  },
                  "preferredPaymentType": {
                    "type": "string",
                    "description": "The Preferred Payment Type for payments to be made to the Individual. This will match a Preferred Payment Type as configured in Composer.",
                    "example": "Q"
                  },
                  "reportingFrequency": {
                    "description": "The frequency of which reporting is to occur.",
                    "example": "Annual",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/reportingFrequency"
                      }
                    ]
                  },
                  "servicePriority": {
                    "type": "boolean",
                    "description": "Indicates if the Individual is to receive a higher level of service.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/investor-accounts/{investorAccountId}/details": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Investor Account details",
        "description": "An investor may have one or multiple Investor Accounts defined in Composer.\n\nThis will retrieve, for an individual investor account, details about the Investor Account including the type of product, start date, adviser details and pension details.",
        "operationId": "GET-investor-accounts-{investoraccountid}-details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investorId": {
                          "description": "The unique Composer identifier for the Investor holding the Investor Account.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "adviserAccountId": {
                          "description": "The unique Composer identifier for the primary Adviser associated to the Investor Account.",
                          "example": 13,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "adviserEffectiveDate": {
                          "description": "The date the primary Adviser became associated to the Investor Account.",
                          "example": "2022-01-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "productId": {
                          "description": "The unique Composer identifier for the Product associated to the Investor Account.",
                          "example": 19,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "status": {
                          "description": "The status of the Investor Account. Possible values are: Active, Inactive.",
                          "example": "Active",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/activeInactiveStatus"
                            }
                          ]
                        },
                        "accountStopped": {
                          "type": "boolean",
                          "description": "Indicator  as to whether the Investor Account has been stopped.",
                          "example": false
                        },
                        "primarySippAccountId": {
                          "description": "The unique Composer identifier for the Primary SIPP Account associated to the Investor Account.",
                          "example": 975,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "accountCreationDate": {
                          "description": "The date the Investor Account was created in Composer.",
                          "example": "2022-12-12",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "fundStartDate": {
                          "description": "The date at which the investment into this product was made.",
                          "example": "2021-12-31",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "earliestFundStartDate": {
                          "description": "The date at which the earliest investment into this product (including earlier existence within another fund) was made.",
                          "example": "2021-12-31",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "retirementDate": {
                          "description": "The Investor's selected retirement date for the Investor Account.",
                          "example": "2019-07-04",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "retirementAge": {
                          "type": "integer",
                          "description": "The Investor's selected retirement age for the Investor Account.",
                          "example": 65
                        },
                        "taxCategory": {
                          "type": "string",
                          "description": "The Tax Category to be applied to payments made from the Income Drawdown Account. This will match a Tax Category as configured in Composer.",
                          "example": "G"
                        },
                        "taxWrapperTypeId": {
                          "type": "string",
                          "description": "The Tax Wrapper Type Id of the Investor Account. This will match a Tax Wrapper Type Id as configured in Composer.",
                          "example": "JC"
                        },
                        "preferredPaymentType": {
                          "type": "string",
                          "description": "The Preferred Payment Type of payments to be made from the Investor Account. This will match a Preferred Payment Type as configured in Composer.",
                          "example": "Q"
                        },
                        "pensionPaymentType": {
                          "type": "string",
                          "description": "The Preferred Payment Type for pension income payments to be made from the Investor Account. This will match a Preferred Payment Type as configured in Composer.",
                          "example": "Q"
                        },
                        "pensionStatus": {
                          "type": "string",
                          "description": "The Status of the Income Drawdown Account. Possible values are: Not Established, Rejected, Waiting Approval, Completed.",
                          "example": "Completed"
                        },
                        "pensionTermMonths": {
                          "type": "integer",
                          "description": "The Term of the Income Drawdown Account (Months Portion).",
                          "example": 36
                        },
                        "pensionTermYears": {
                          "type": "integer",
                          "description": "The Term of the Income Drawdown Account (Years Portion).",
                          "example": 3
                        },
                        "pensionAmount": {
                          "description": "The Pension Amount to be paid for the selected payment frequency.",
                          "example": "2000.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "pensionAmountIncFees": {
                          "description": "The Pension Amount inclusive of any fees.",
                          "example": "0.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "nextyearPensionAmount": {
                          "description": "The Pension Amount to be paid for the forthcoming year.",
                          "example": "1660.66",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "paymentFrequency": {
                          "type": "string",
                          "description": "The frequency of income payments from the Investor Account.",
                          "example": "Annual"
                        },
                        "firstPaymentDate": {
                          "description": "The date of the first payment from the Investor Account.",
                          "example": "2016-02-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "pensionNextrunDate": {
                          "description": "The date that the pension income is next due to be run.",
                          "example": "2016-02-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "pensionNextdueDate": {
                          "description": "The date that the pension income is next due to be paid.",
                          "example": "2016-02-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "flexibleIncomeOptDate": {
                          "description": "The date at which an Income Drawdown Account is flagged as being available to be accessed as Flexible Drawdown from.",
                          "example": "2015-11-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "iddCrystallisedValue": {
                          "description": "The value of crystallised funds received into the Income Drawdown Account.",
                          "example": "262500.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "iddPercOfTotCrystallised": {
                          "description": "The balance of the Income Drawdown Account expressed as a percentage of the total of all the Income Drawdown Account balances under the same Master SIPP Account.",
                          "example": "100.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "iddCeaseDate": {
                          "description": "The date the Income Drawdown Account ended.",
                          "example": "2074-12-31",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "pensionEscalationType": {
                          "type": "string",
                          "description": "The type of Pension Escalation to be applied to pension income.",
                          "example": "None"
                        },
                        "pensionEscalationPercent": {
                          "description": "The percentage of Pension Escalation to be applied to pension income.",
                          "example": "0.15",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "nextyearEscalationPercent": {
                          "description": "The percentage of Pension Escalation to be applied to pension income in the forthcoming year.",
                          "example": "0.18",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "amountClaimedAsTaxDeduct": {
                          "description": "The amount being claimed by the Investor as a tax deduction in relation to the Income Drawdown Account.",
                          "example": "150.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "pensionRetain100percAte": {
                          "type": "boolean",
                          "description": "Indicator as to whether the income stream (purchased after 20/9/2004) retains the 100% asset test exemption or not.",
                          "example": false
                        },
                        "pensionAnnualAmount": {
                          "description": "The Annual Pension Amount to be paid.",
                          "example": "24000.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "pensionGuidanceSought": {
                          "type": "boolean",
                          "description": "Indicator as to whether Pension Guidance has been sought.",
                          "example": false
                        },
                        "useAge75Valuation": {
                          "type": "boolean",
                          "description": "Indicator as to whether the first income limit review following the Investor’s 75th birthday should be performed using the valuation at the Investor’s 75th birthday.",
                          "example": false
                        },
                        "survivorIdd": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Income Drawdown Account has been created for a deceased Investor.",
                          "example": false
                        },
                        "pre06": {
                          "type": "boolean",
                          "description": "Indicator as to whether pre 6 April 2006 scheme rules apply, this indicates whether a lump sum of more than 25% is payable.",
                          "example": false
                        },
                        "occPenSchemeOptOut": {
                          "type": "string",
                          "description": "Indicator as to whether the Investor has opted out of their Occupational Pension Scheme.",
                          "example": "NotOptOut"
                        },
                        "contractOutAcknowledge": {
                          "type": "boolean",
                          "description": "Indicator to advise if an acknowledgement has been received from the Inland Revenue for the 'contracting out'.",
                          "example": false
                        },
                        "mailExclusion": {
                          "type": "boolean",
                          "description": "Indicator to advise if the Investor Account has been flagged as being excluded from being sent correspondence XXXXXXXXXXXXXXXXXXXXX.",
                          "example": false
                        },
                        "correspondenceSentTo": {
                          "type": "string",
                          "description": "Indicator as to whom correspondence related to this investor account is to be sent.",
                          "enum": [
                            "ToAdviserOnly",
                            "ToMemberOnly",
                            "BothMemberAndAdviser",
                            "NoCorrespondence"
                          ],
                          "example": "ToAdviserOnly"
                        },
                        "discretionaryMandateYn": {
                          "type": "boolean",
                          "description": "Indicator as to whether there is a discretionary mandate which allows the adviser to place trades on the Investor Account.",
                          "example": false
                        },
                        "accountOperationIdentifier": {
                          "type": "string",
                          "description": "Indicator as provided by the client as to who can operate on that clients investor account.",
                          "enum": [
                            "AdviserOnly",
                            "InvestorOnly",
                            "InvestorAndAdviser",
                            "None"
                          ],
                          "example": "InvestorOnly"
                        },
                        "preferredCashDistChoice": {
                          "type": "string",
                          "description": "The preferred option for distributions received.",
                          "example": "ReInvestIntoDefaultCash",
                          "enum": [
                            "ReinvestIntoDefaultCash",
                            "RepurchaseDistributingAsset",
                            "DistributionToBePaidOut"
                          ]
                        },
                        "statementNumberCopies": {
                          "type": "integer",
                          "description": "The number of statement copies to be sent.",
                          "example": 1
                        },
                        "defaultStatementFormat": {
                          "type": "string",
                          "description": "The nomination as to whether the statement received is to be Detailed or a Summary.",
                          "example": "Summary",
                          "enum": [
                            "Detailed",
                            "Summary"
                          ]
                        },
                        "reportingFrequency": {
                          "type": "string",
                          "description": "The frequency of which reporting is to occur.",
                          "example": "Annual",
                          "enum": [
                            "Weekly",
                            "Fortnightly",
                            "Monthly",
                            "Quarterly",
                            "HalfYearly",
                            "Annual"
                          ]
                        },
                        "excludeFromTopupSweep": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Investor Account is to be excluded from the Cash Topup and Sweep processing.",
                          "example": false
                        },
                        "divorceProceedings": {
                          "type": "boolean",
                          "description": "Indicator as to whether divorce proceedings have taken place.",
                          "example": false
                        },
                        "reversionary": {
                          "type": "string",
                          "description": "Indicator as to whether the Investor Account is a reversionary i.e. a beneficiary of a client who has passed reverting their account to the current client.",
                          "example": "N"
                        }
                      },
                      "description": "Details of an investor account."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/beneficiaries": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Investor Account Beneficiaries",
        "description": "An investor may nominate a beneficiary for a specific Investor Account within Composer. The beneficiary is the entity that benefits may be payable to upon the investor's death.\n\nThis will retrieve, for an individual investor account, details of the beneficiary recorded, the nominated percentage and applicable nomination dates.",
        "operationId": "GET-investor-accounts-{investoraccountid}-beneficiaries",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "beneficiaries": {
                          "type": "array",
                          "description": "Beneficiary details for an investor account.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Beneficiary record.",
                                "example": 249,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The Beneficiary's full name.",
                                "example": "Tom Jones"
                              },
                              "percent": {
                                "description": "The nominated percentage of benefits payable to the Beneficiary.",
                                "example": "50.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "relationship": {
                                "type": "string",
                                "description": "The relationship type to the Investor.  This will match a relationship type as configured in Composer.",
                                "example": "BENEFICIARY"
                              },
                              "bindingNominationDate": {
                                "description": "The date the binding nomination is effective from.",
                                "example": "2022-12-01",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "bindingNominationExpiryDate": {
                                "description": "The date the binding nomination will expire.",
                                "example": "2023-12-01",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "bindingNominationRevokeDate": {
                                "description": "The date the binding nomination was revoked.",
                                "example": "2023-10-11",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "dateOfBirth": {
                                "description": "The Beneficiary's date of birth.",
                                "example": "1955-01-01",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "relatedEntity": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The unique Composer identifier for the beneficiary entity.",
                                    "example": 3070,
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/identifier"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The Beneficiary's surname.",
                                    "example": "Jones"
                                  },
                                  "givenNames": {
                                    "type": "string",
                                    "description": "The Beneficiary's forename and any middle names.",
                                    "example": "Tom"
                                  },
                                  "gender": {
                                    "type": "string",
                                    "description": "The Investor's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                                    "example": "M"
                                  },
                                  "entityType": {
                                    "type": "string",
                                    "description": "The entity type of the Beneficiary. This will match an entity type as configured in Composer.",
                                    "example": "I"
                                  }
                                },
                                "description": "Beneficiary entity details"
                              },
                              "child": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Beneficiary is a child.",
                                "example": false
                              },
                              "receiveCorrespondence": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Beneficiary is to receive correspondence in respect to the associated Investor Account.",
                                "example": false
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 1278,
                              "name": "Tom Jones",
                              "percent": "65.00",
                              "relationship": "BENEFICIARY",
                              "bindingNominationDate": "2022-12-01",
                              "bindingNominationExpiryDate": "2023-12-01",
                              "bindingNominationRevokeDate": "2023-10-11",
                              "dateOfBirth": "1955-01-01",
                              "relatedEntity": {
                                "id": 3070,
                                "name": "Jones",
                                "givenNames": "Tom",
                                "gender": "M",
                                "entityType": "I"
                              },
                              "child": false,
                              "receiveCorrespondence": false
                            },
                            {
                              "id": 8974,
                              "name": "Sally Smith",
                              "percent": "35.00",
                              "relationship": "BENEFICIARY",
                              "bindingNominationDate": "2023-05-12",
                              "bindingNominationExpiryDate": "2025-01-01",
                              "bindingNominationRevokeDate": "2023-01-11",
                              "dateOfBirth": "1964-05-21",
                              "relatedEntity": {
                                "id": 2589,
                                "name": "Smith",
                                "givenNames": "Sally",
                                "gender": "F",
                                "entityType": "I"
                              },
                              "child": true,
                              "receiveCorrespondence": true
                            }
                          ]
                        }
                      },
                      "description": "Beneficiary details for an investor account."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Update Investor Account Beneficiaries",
        "description": "An investor may nominate a beneficiary for a specific Investor Account within Composer. The beneficiary is the entity that benefits may be payable to upon the investor's death.\n\nThis will update, for an individual investor account, the nominated beneficiary, the nominated percentage or the applicable nomination dates. A successful response for the update will be a '204 Operation succeeded'.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same update of an Investor Accounts Beneficiaries details but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be the standard PATCH request for the Beneficiaries.\n    - `PATCH /investor-accounts/{investorAccountId}/beneficiaries`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `PATCH /work-item-managed-tasks/investor-accounts/{investorAccountId}/beneficiaries`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPOST /work-item-managed-tasks/investor-accounts/{investorAccountId}/beneficiaries\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId": "PATCH-investor-accounts-{investoraccountid}-beneficiaries",
        "requestBody": {
          "description": "Updates beneficiary details for an investor account.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "beneficiaries": {
                    "type": "array",
                    "description": "Updates beneficiary details for an investor account.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier for the beneficiary record.",
                          "example": 249,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "entityId": {
                          "description": "The unique Composer identifier for the beneficiary entity.",
                          "example": 3070,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "relationshipTypeId": {
                          "description": "The unique Composer identifier for the relation type of the associated entity.",
                          "example": 128,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "relationshipTypeName": {
                          "type": "string",
                          "description": "The name of the relationship type.",
                          "example": "Beneficiary"
                        },
                        "percent": {
                          "description": "The nominated percentage of benefits payable to the Beneficiary.",
                          "example": "25.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "bindingNominationDate": {
                          "description": "The date the binding nomination is effective from.",
                          "example": "2022-12-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "bindingNominationExpiryDate": {
                          "description": "The date the binding nomination will expire.",
                          "example": "2024-12-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "bindingNominationRevokeDate": {
                          "description": "The date the binding nomination was revoked.",
                          "example": "2023-02-01",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "child": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Beneficiary is a child.",
                          "example": false
                        },
                        "receiveCorrespondence": {
                          "type": "boolean",
                          "description": "Indicator as to whether the Beneficiary is to receive correspondence in respect to the associated Investor Account.",
                          "example": true
                        }
                      }
                    },
                    "example": [
                      {
                        "id": 1278,
                        "entityId": 3070,
                        "relationshipTypeId": 128,
                        "relationshipTypeName": "BENEFICIARY",
                        "percent": "25.00",
                        "bindingNominationDate": "2022-12-01",
                        "bindingNominationExpiryDate": "2024-12-01",
                        "bindingNominationRevokeDate": "2023-02-01",
                        "child": false,
                        "receiveCorrespondence": true
                      },
                      {
                        "id": 8974,
                        "entityId": 2589,
                        "relationshipTypeId": 128,
                        "relationshipTypeName": "BENEFICIARY",
                        "percent": "75.00",
                        "bindingNominationDate": "2023-05-01",
                        "bindingNominationExpiryDate": "2025-06-01",
                        "bindingNominationRevokeDate": "2024-02-01",
                        "child": false,
                        "receiveCorrespondence": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/employment-details" : {
      "get" : {
        "tags" : [ "Investor Account" ],
        "description" : "This will retrieve employment details for an Investor Account, including the Start and End Dates of Employment and Starting Date of Regular Contributions.",
        "summary": "Retrieve Employee details",
        "operationId" : "GET-investor-accounts-{investoraccountid}-employment-details",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "investorAccountEmploymentDetails" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "employmentDetailsId" : {
                                "description" : "The unique Composer identifier for the Employment Details.",
                                "example" : 695567,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "regularContributionStartDate" : {
                                "description" : "The regular contribution start date.",
                                "example" : "2023-11-09",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/date"
                                } ]
                              },
                              "employmentStatus": {
                                "type": "string",
                                "description": "The status of the Investor Accounts employment with this employer.",
                                "example": "Active"
                              },
                              "salary": {
                                "description": "The employee’s salary.",
                                "example": "50000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "startDateOfEmployment": {
                                "description": "The start date of the Investor Accounts employment with this employer.",
                                "example": "2020-11-09",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "employerGroupId" : {
                                "description" : "The unique Composer identifier for the Employer Group to which the employment details are associated.",
                                "example" : 4652,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "employerSiteCodeId" : {
                                "description" : "The unique Composer identifier for the Employer Site to which the employment details are associated.",
                                "example" : 462,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "autoEnrolmentClassification" : {
                                "type" : "string",
                                "description" : "The employee’s classification under Auto Enrolment.",
                                "example" : "EligibleJobholder",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/autoEnrolmentClassification"
                                } ]
                              },
                              "endDateOfEmployment": {
                                "description": "The end date of the Investor Accounts employment with this employer.",
                                "example": "2023-07-11",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "employmentDetailsId": 4598,
                              "regularContributionStartDate": "2022-02-02",
                              "employmentStatus": "InActive",
                              "salary": "50000.00",
                              "startDateOfEmployment": "2020-01-09",
                              "employerGroupId": 6578,
                              "employerSiteCodeId": 12,
                              "autoEnrolmentClassification": "EntitledWorker",
                              "endDateOfEmployment": "2021-07-11"
                            },
                            {
                              "employmentDetailsId": 6589,
                              "regularContributionStartDate": "2023-11-09",
                              "employmentStatus": "Active",
                              "salary": "67000.00",
                              "startDateOfEmployment": "2023-07-19",
                              "employerGroupId": 4652,
                              "employerSiteCodeId": 15,
                              "autoEnrolmentClassification": "EligibleJobholder"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "investorAccountId",
        "in" : "path",
        "description" : "The unique Composer identifier for the Investor Account.",
        "required" : true,
        "schema" : {
          "$ref": "#/components/schemas/identifier"
        }
      } ]
    },
    "/investor-accounts/{investorAccountId}/investments": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Investor Account Investment details",
        "description": "An investor may have one or multiple Investor Accounts defined in Composer with each Investor Account being able to hold multiple investments.\n\nThis will retrieve, for an individual investor account, details of the underlying investments held.",
        "operationId": "GET-investor-account-investor-accounts-{investoraccountid}-investments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investments": {
                          "type": "array",
                          "description": "Investment details of those associated to the Investor Account.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 100,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investmentName": {
                                "type": "string",
                                "description": "The name of the Investment.",
                                "example": "Cash"
                              },
                              "investmentStatus": {
                                "description": "The status of the Investment. Possible values are: Active, Inactive. ",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "accountType": {
                                "type": "string",
                                "description": "Nominee Account Type of the nominee linked to the Product of the Investment. Possible values are: F - ForeignCurrency, I - Internal, C - CustodianBroker, P - Property, U - Guarantee, T - TIP, N - NomineeBroker, D - DFM.",
                                "example": "F"
                              },
                              "productFlag": {
                                "type": "string",
                                "description": "The type of Product in which the Investment is offered.",
                                "example": "Accumulation",
                                "enum": [
                                  "Accumulation",
                                  "InvestmentTrust",
                                  "LifeAnnuity",
                                  "PensionAnnuity",
                                  "OnshoreBond",
                                  "OffshoreBond",
                                  "InvestmentPension"
                                ]
                              },
                              "productTypeId": {
                                "description": "The unique Composer identifier for the Product in which the Investment is offered.",
                                "example": 200,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "assetId": {
                                "description": "The unique Composer identifier for the Asset Holding linked to the Investment.",
                                "example": 300,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "assetStatus": {
                                "type": "string",
                                "description": "The status of the Asset Holding linked to the Investment.",
                                "example": "Active",
                                "enum": [
                                  "Active",
                                  "AwaitingPurchaseOrRedemption",
                                  "Inactive"
                                ]
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The currency of the Investment. The value will match a currency code as configured in Composer.",
                                "example": "AUD"
                              },
                              "defaultInvestment": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Investment is the default for the Product in which it is offered.",
                                "example": true
                              },
                              "liquidInvestment": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Investment is liquid.",
                                "example": true
                              },
                              "investmentPercent": {
                                "description": "Percentage to which the Investment is to be aligned in regards to the proportion of total account holdings.",
                                "example": "100.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "balancePercent": {
                                "description": "Percentage of the accounts total holdings held within this investment.",
                                "example": "100.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "balanceValue": {
                                "description": "The amount value of the investment holdings for this account.",
                                "example": "5000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "sellUnitPrice": {
                                "description": "The last known sell unit price used for the balance calculation.",
                                "example": "1.000000",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "units": {
                                "description": "The unit value of the Investment holdings for this account.",
                                "example": "5000.000000",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "extOrderAggregate": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Asset Holding associated to this Investment allows for order trading aggregation.",
                                "example": true
                              },
                              "externalOrderAccountReference": {
                                "type": "string",
                                "description": "Investment Managers Account Reference for the investor where the investment held as an aggregated holding externally.",
                                "example": "ACC001"
                              },
                              "externalOrderClientReference": {
                                "type": "string",
                                "description": "Investment Managers Client Reference for the investor where the investment held as an aggregated holding externally.",
                                "example": "CLT001"
                              },
                              "externalOrderDesignation": {
                                "type": "string",
                                "description": "Name of the owner of the asset where the investment is held as an aggregated holding externally.",
                                "example": "ACCT1"
                              },
                              "accrualAmount": {
                                "description": "The amount value of any uncapitalised distribution accruals due for this Investment.",
                                "example": "10.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualUnits": {
                                "description": "The unit value of any uncapitalised distribution accruals due for this Investment.",
                                "example": "1.987654",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualWtaxAmount": {
                                "description": "The amount value of any Withholding Tax applicable to uncapitalised distribution accruals due for this Investment.",
                                "example": "2.50",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualWtaxUnits": {
                                "description": "The unit value of any Withholding Tax applicable to uncapitalised distribution accruals due for this Investment.",
                                "example": "0.762541",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "cashTopUp": {
                                "type": "boolean",
                                "description": "Nomination of the default investment to be that from which the Cash Topup process is to sell down to realise cash where required.",
                                "example": true
                              },
                              "defaultCashDistributionOption": {
                                "type": "string",
                                "description": "Income generated by investments may be paid out to investors by way of dividend or distribution or reinvested into an investment. This nomination is to indicate how Natural Income, distribution income in the form of cash which is credited to an account for payment to the investor, dividends are to be handled.",
                                "enum": [
                                  "RepurchaseSameAsset",
                                  "DistributionPaidOut",
                                  "ReinvestDefaultCash"
                                ],
                                "example": "NaturalIncome"
                              },
                              "distPayAsCashAllowed": {
                                "type": "boolean",
                                "description": "Configuration at the Product an Asset associated to the Investment defining whether the Cash Distribution Option of Natural Income is a permitted choice.",
                                "example": true
                              },
                              "reinvestmentIntoCashAllowed": {
                                "type": "boolean",
                                "description": "Configuration at the Product an Asset associated to the Investment defining whether the Cash Distribution Option of Remain In Cash is a permitted choice.",
                                "example": true
                              },
                              "repurchaseAssetAllowed": {
                                "type": "boolean",
                                "description": "Configuration at the Product an Asset associated to the Investment defining whether the Cash Distribution Option of Repurchase Asset is a permitted choice.",
                                "example": true
                              },
                              "distributionTypeCode": {
                                "type": "string",
                                "description": "The distribution configuration as defined for the Investment.",
                                "enum": [
                                  "Accrual",
                                  "PPU",
                                  "NonDistributing",
                                  "Accumulation",
                                  "UnitDays"
                                ],
                                "example": "PPU"
                              },
                              "preferredDistributionMethod": {
                                "type": "string",
                                "description": "The Investors chosen method of receiving any distribution payments for those paid from this investment.",
                                "example": "ReInvestSame",
                                "enum": [
                                  "Cheque",
                                  "ConsolidatedGroupCheque",
                                  "ConsolidatedGroupDirect",
                                  "DirectCredit",
                                  "FixedDistributions",
                                  "PercentDistributions",
                                  "ReinvestOther",
                                  "ReinvestSame",
                                  "Accumulation"
                                ]
                              },
                              "distReinvestInvestorAccount": {
                                "type": "integer",
                                "description": "Where the Preferred Distribution Method is Reinvest Other or Same then this is the Investor Account to which the distribution payment is to be directed.",
                                "example": 172540
                              },
                              "distReinvestInvestment": {
                                "type": "integer",
                                "description": "Where the Preferred Distribution Method is Reinvest Other or Same then this is the Investment of the distReinvestInvestorAccount to which the distribution payment is to be directed.",
                                "example": 100
                              },
                              "distReinvestInvestmentName": {
                                "type": "string",
                                "description": "The Investment name of the chosen distReinvestInvestment.",
                                "example": "Cash"
                              },
                              "distributionProceeds": {
                                "type": "string",
                                "description": "Indicator for how distribution income will be processed.",
                                "example": "NaturalIncome"
                              },
                              "reinvestmentAllowed": {
                                "type": "boolean",
                                "description": "Configuration at the Investment defining whether Reinvestment is a permitted distribution option.",
                                "example": true
                              },
                              "residualCash": {
                                "type": "string",
                                "description": "Scrip Dividends is the term applied to exchange traded equities where the option exists to have the dividend reinvested via the purchase of additional shares in the underlying asset. As shares may only be whole units, a difference could exist between the net dividend and the reinvestment value, this is known as ‘residual cash’.\nThere are two payment options in respect of residual cash, the first is that it is paid to the investor, the second is that it will be retained by the provider and used to supplement the reinvestment value for the next distribution.",
                                "enum": [
                                  "PaidToInvestor",
                                  "RetainedInFund"
                                ],
                                "example": "PaidToInvestor"
                              },
                              "feederMasterInvestment": {
                                "type": "boolean",
                                "description": "Feeder/Interfunding functionality is where an investor account (or many investor accounts) can be linked to a type of ‘pooled’ investment holding (known as a ‘feeder’ investment). This ‘feeder’ investment is linked to a pseudo investor account that has been classified as a ‘feeder’ type. The different investment options available under the pseudo ‘feeder’ investor account make up the total value of the ‘pooled’ investment holding being held by the investor accounts.\nThis attribute indicates as to whether the Investor Account associated to this Investment is that psuedo account representing the 'Pooled Investment Holding'.",
                                "example": false
                              },
                              "feederMasterPortfolio": {
                                "type": "boolean",
                                "description": "Feeder/Interfunding functionality is where an investor account (or many investor accounts) can be linked to a type of ‘pooled’ investment holding (known as a ‘feeder’ investment). This ‘feeder’ investment is linked to a pseudo investor account that has been classified as a ‘feeder’ type. The different investment options available under the pseudo ‘feeder’ investor account make up the total value of the ‘pooled’ investment holding being held by the investor accounts.\nThis attribute indicates as to whether this Investment is that representing the 'Pooled Investment' as shown for the Investor Account along side their other investment holdings .",
                                "example": true
                              },
                              "lastInvestmentPartnerValuationUpload": {
                                "description": "Where the Investment represents holdings with an external Investment Partner this states the date which the last valuation upload was processed.",
                                "example": "2023-02-04",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "lastReconciledDate": {
                                "description": "The date at which the Asset associated to the Investment was last reconciled.",
                                "example": "2023-02-04",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "partyExternalReferences": {
                                "type": "array",
                                "description": "Party External References defined against the Investments of the Investor Account.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The unique Composer identifier for the Party External Reference.",
                                      "example": 120,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "externalReference": {
                                      "type": "string",
                                      "description": "The external reference.",
                                      "example": "ABCO001"
                                    },
                                    "externalSystem": {
                                      "type": "string",
                                      "description": "The external system reference.",
                                      "example": "ABCO"
                                    },
                                    "partyId": {
                                      "description": "The unique Composer identifier for the Party against which the External Reference is associated.",
                                      "example": 10,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "partyType": {
                                      "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the Investment.",
                                      "example": "Adviser",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/partyType"
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              "investmentApplicationStatus": {
                                "type": "string",
                                "description": "Status indicating whether the Investment is considered as Open for accepting Applications/Contributions.",
                                "enum": [
                                  "Open",
                                  "Closed"
                                ],
                                "example": "Closed"
                              },
                              "investmentRedemptionStatus": {
                                "type": "string",
                                "description": "Status indicating whether the Investment is considered as Open for the nomination as part of a Redemption/Withdrawal.",
                                "enum": [
                                  "Open",
                                  "Closed"
                                ],
                                "example": "Closed"
                              },
                              "preferredPaymentType": {
                                "type": "string",
                                "description": "The nominated preferred payment type default for withdrawal processing. Can be overridden at the point of processing.",
                                "example": "D"
                              },
                              "prioritySequence": {
                                "description": "Where an Investor Account is deemed to not have enough funds within their cash investment to be able to cover upcoming payments or charges the system will look to liquidise funds by disinvest from those that do. The prioritySequence is the nominated ranking associated to the Investment in regards to the order, starting at 1, 2, 3, etc, in which they are to be assessed for disinvestment to liquidise the required fund value.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "propertyId": {
                                "description": "Properties Composer Identifier where the Investment represents a Property Investment.",
                                "example": 230,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "rebalanceTolerance": {
                                "description": "The percentage tolerance to be considered in the determination as to whether a switch rebalance is required.",
                                "example": "5.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "redemptionDirectPayTypeCode": {
                                "type": "string",
                                "description": "Where the preferred payment type is electronic payment then this is the Direct Pay Type Code to be used.",
                                "example": "BACS"
                              },
                              "redemptionBankAccountId": {
                                "description": "Where the preferred payment type is electronic payment then this is the bank account to which payments will be directed.",
                                "example": 1097,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "redemptionPayToAdviser": {
                                "type": "boolean",
                                "description": "Indicator as to whether part of the redemption value is to be paid to the adviser.",
                                "example": true
                              },
                              "redemptionPayeeName": {
                                "type": "string",
                                "description": "Where the preferred payment type is cheque then this is the Payee Name to which payments will be directed.",
                                "example": "Jack Smith"
                              },
                              "state": {
                                "type": "string",
                                "description": "Controlled through system configuration via the Reference Code INV_ACC_PORT_STATUS is the ability to be able to flag against a non cash investment for an Investor Account to be 'Active' or 'Inactive'. Where set as 'Inactive' then system processes such as Correspondence Entry, External Order Request entry, Recurring Switching, Expectation Maintenance, Transaction Entry, Investment and Bulk Investment Switching will validate that the inactive investment is not included with the processing.",
                                "example": "Open",
                                "enum": [
                                  "Open",
                                  "Closed"
                                ]
                              },
                              "subaccount": {
                                "type": "boolean",
                                "description": "Indicator as to whether the portfolio is held within a sub account of another investor account.",
                                "example": true
                              },
                              "subaccountId": {
                                "description": "The unique Composer identifier of the investor account acting as the sub account.",
                                "example": 10000,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "taxWrapperComponentCode": {
                                "type": "string",
                                "description": "The component type that applies to the tax wrapper. Possible values are: C - Cash, L - Lifetime ISA, s - Stocks and Shares.",
                                "example": "C"
                              },
                              "taxWrapperInclude": {
                                "type": "boolean",
                                "description": "Indicator as to whether the portfolio is being included in tax wrapper.",
                                "example": true
                              },
                              "taxWrapperStatus": {
                                "type": "string",
                                "description": "The portfolio tax wrapper status.",
                                "enum": [
                                  "MayBeWrapper",
                                  "CannotBeWrapper",
                                  "MustBeWrapper"
                                ],
                                "example": "CannotBeWrapper"
                              },
                              "termInvestmentTypeId": {
                                "description": "The unique Composer identifier for the type of Term Investment.",
                                "example": 90,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "trustSetupComplete": {
                                "type": "boolean",
                                "description": "Where the investment is linked to a product of the type General Investment or ISA then there is a flag that is used to indicate whether the investment configuration for the investor has been completed to the point where it is setup and ready for inclusion in processing.\nWithin certain system processes such as Application Processing, Investment, Inter Account and Recurring Switch, External Order Request, ISA Death / Void & Repair against accounts in those Investment products there will be validations to ensure that the investments included have been flagged as Setup or otherwise excluded from processing.",
                                "example": true
                              },
                              "capitalGuaranteeAmount": {
                                "type": "string",
                                "description": "The amount of the Capital Guarantee.",
                                "example": "124950.2"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 100,
                              "investmentName": "Cash",
                              "investmentStatus": "Active",
                              "accountType": "F",
                              "productFlag": "Accumulation",
                              "productTypeId": 200,
                              "assetId": 300,
                              "assetStatus": "Active",
                              "currencyCode": "AUD",
                              "defaultInvestment": true,
                              "liquidInvestment": true,
                              "investmentPercent": "100.00",
                              "balancePercent": "100.00",
                              "balanceValue": "5000.00",
                              "sellUnitPrice": "1.000000",
                              "units": "5000.000000",
                              "extOrderAggregate": true,
                              "externalOrderAccountReference": "ACC001",
                              "externalOrderClientReference": "CLT001",
                              "externalOrderDesignation": "ACCT1",
                              "accrualAmount": "10.00",
                              "accrualUnits": "1.987654",
                              "accrualWtaxAmount": "2.50",
                              "accrualWtaxUnits": "0.762541",
                              "cashTopUp": true,
                              "defaultCashDistributionOption": "DistributionPaidOut",
                              "distPayAsCashAllowed": true,
                              "reinvestmentIntoCashAllowed": true,
                              "repurchaseAssetAllowed": true,
                              "distributionTypeCode": "PPU",
                              "preferredDistributionMethod": "PercentDistributions",
                              "distReinvestInvestorAccount": 172540,
                              "distReinvestInvestment": 100,
                              "distReinvestInvestmentName": "Cash",
                              "distributionProceeds": "NaturalIncome",
                              "reinvestmentAllowed": true,
                              "residualCash": "PaidToInvestor",
                              "feederMasterInvestment": false,
                              "feederMasterPortfolio": true,
                              "lastInvestmentPartnerValuationUpload": "2023-02-04",
                              "lastReconciledDate": "2023-02-04",
                              "partyExternalReferences": [
                                {
                                  "id": 120,
                                  "externalReference": "0001AD",
                                  "externalSystem": "EXTSYSREF",
                                  "partyId": 15,
                                  "partyType": "Investment"
                                },
                                {
                                  "id": 180,
                                  "externalReference": "QW345",
                                  "externalSystem": "INVCODE",
                                  "partyId": 15,
                                  "partyType": "Investment"
                                }
                              ],
                              "investmentApplicationStatus": "Closed",
                              "investmentRedemptionStatus": "Closed",
                              "preferredPaymentType": "D",
                              "prioritySequence": 1,
                              "propertyId": 230,
                              "rebalanceTolerance": "5.00",
                              "redemptionDirectPayTypeCode": "BACS",
                              "redemptionBankAccountId": 1097,
                              "redemptionPayToAdviser": true,
                              "redemptionPayeeName": "Jack Smith",
                              "state": "Open",
                              "subaccount": true,
                              "subaccountId": 10000,
                              "taxWrapperComponentCode": "C",
                              "taxWrapperInclude": true,
                              "taxWrapperStatus": "CannotBeWrapper",
                              "termInvestmentTypeId": 90,
                              "trustSetupComplete": true,
                              "capitalGuaranteeAmount": "124950.2"

                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "investmentName",
          "in": "query",
          "description": "The Investment name or part thereof on which Investments to include in those returned.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Cash"
        },
        {
          "name": "investmentStatus",
          "in": "query",
          "description": "The Investment status of which Investments to include in those returned.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/activeInactiveStatus"
          },
          "example": "Active"
        }
      ]
    },
    "/investor-accounts/investment-strategies" : {
      "patch" : {
        "tags" : [ "Investor Account" ],
        "description" : "This will maintain an investment strategy defined for an investor account.",
        "summary" : "Maintain Investor Account Investment Strategies",
        "operationId" : "PATCH-investors-accounts-investment-strategies",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "data" : {
                    "type" : "object",
                    "properties" : {
                      "investorId" : {
                        "description" : "The unique Composer identifier for the Investor associated to the request.",
                        "example" : 5792,
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/identifier"
                        } ]
                      },
                      "investmentAccount" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "investorAccountId" : {
                              "description" : "The unique Composer identifier for the Investor Account associated to the request.",
                              "example" : 6322,
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/identifier"
                              } ]
                            },
                            "assetAllocation" : {
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "investmentId" : {
                                    "description" : "The unique Composer identifier for an Investment.",
                                    "example" : 1,
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/identifier"
                                    } ]
                                  },
                                  "investmentPercentage" : {
                                    "description" : "The investment percentage allocated to an investment within the investment strategy.",
                                    "example" : "50",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/percentage"
                                    } ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "example": [
                          {
                            "investorAccountId": 98564710,
                            "assetAllocation": [
                              {
                                "investmentId": 458,
                                "investmentPercentage": "75.00"
                              },
                              {
                                "investmentId": 6598,
                                "investmentPercentage": "25.00"
                              }
                            ]
                          },
                          {
                            "investorAccountId": 45698723,
                            "assetAllocation": [
                              {
                                "investmentId": 9587,
                                "investmentPercentage": "15.75"
                              },
                              {
                                "investmentId": 3587,
                                "investmentPercentage": "84.25"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "meta" : {
                    "type" : "object",
                    "required" : ["payloadId"],
                    "properties" : {
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "load_1648432050538",
                        "maxLength": 50
                      },
                      "sender" : {
                        "required" : ["senderId"],
                        "type" : "object",
                        "properties" : {
                          "senderId" : {
                            "type" : "string",
                            "description" : "The unique Composer identifier used to represent the calling application.",
                            "example" : "MEMBERPORTAL",
                            "maxLength" : 30
                          },
                          "role" : {
                            "type" : "string",
                            "description" : "The role of the user who logged the request.",
                            "example" : "Adviser"
                          },
                          "partyType" : {
                            "description" : "The unique identifier for party type of the acting party who submitted the request.",
                            "example" : "InvestorAccount",
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/partyTypeForWIMT"
                            } ]
                          },
                          "partyId" : {
                            "description" : "The unique identifier for the acting party who submitted the request.",
                            "example" : 10,
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/identifier"
                            } ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Operation was successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "workItemId" : {
                          "example" : 5792,
                          "allOf" : [ {
                            "$ref" : "#/components/schemas/identifier"
                          } ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Operation is bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/investor-accounts/{investorAccountId}/valuation": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Investor Account Valuation",
        "description": "An investor may have one or multiple Investor Accounts defined in Composer with each Investor Account holding multiple investments.\n\nThis will retrieve, for an individual investor account, the value of each underlying investment.",
        "operationId": "GET-investor-accounts-{investoraccountid}-valuation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investments": {
                          "type": "array",
                          "description": "Investment Valuations.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Investment.",
                                "example": 100,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investmentName": {
                                "type": "string",
                                "description": "The Investment name.",
                                "example": "Cash"
                              },
                              "investmentStatus": {
                                "description": "The Investment status.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The currency of the Investment valuation.",
                                "example": "AUD"
                              },
                              "balancePercent": {
                                "description": "The percentage of the accounts total holdings as held within this Investment.",
                                "example": "100.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/percentage"
                                  }
                                ]
                              },
                              "balanceValue": {
                                "description": "The amount value as held within this Investment.",
                                "example": "5000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "sellUnitPrice": {
                                "description": "The last known Sell Unit Price used in the calculation of the Investment valuation.",
                                "example": "1.000000",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "units": {
                                "description": "The unit value as held within this Investment.",
                                "example": "5000.000000",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualAmount": {
                                "description": "The amount value of any uncapitalised distribution accruals due for this Investment.",
                                "example": "100.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualUnits": {
                                "description": "The unit value of any uncapitalised distribution accruals due for this Investment.",
                                "example": "100.000000",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualWtaxAmount": {
                                "description": "The amount value of any Withholding Tax applicable to uncapitalised distribution accruals due for this Investment.",
                                "example": "10.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "accrualWtaxUnits": {
                                "description": "The unit value of any Withholding Tax applicable to uncapitalised distribution accruals due for this Investment.",
                                "example": "1.258900",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 100,
                              "investmentName": "Cash",
                              "investmentStatus": "Active",
                              "currencyCode": "AUD",
                              "balancePercent": "100.00",
                              "balanceValue": "5000.00",
                              "sellUnitPrice": "1.000000",
                              "units": "5000.000000",
                              "accrualAmount": "100.00",
                              "accrualUnits": "100.000000",
                              "accrualWtaxAmount": "10.00",
                              "accrualWtaxUnits": "1.258900"
                            }
                          ]
                        }
                      },
                      "description": "The valuation relating to an investor account."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "investmentName",
          "in": "query",
          "description": "The Investment name or part thereof on which Investments to include in those returned.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Cash"
        },
        {
          "name": "investmentStatus",
          "in": "query",
          "description": "The Investment status of which Investments to include in those returned.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/activeInactiveStatus"
          },
          "example": "Active"
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/recurring-investment-rebalance-request": {
      "post": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Create a Recurring Investment Rebalance",
        "description": "An Investor has the ability to be able to setup an investment rebalance against a defined strategy allocation on a one off or periodic basis. The rebalance where required will see movement between investments via the movement of cash and raising of Sale or Purchase trading requests.",
        "operationId": "POST-investor-accounts-{investoraccountid}-recurring-investment-rebalance-request",
        "requestBody": {
          "description": "Creates a recurring investment rebalance for an investor account.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "adhocRebalanceSwitch": {
                    "type": "boolean",
                    "description": "Indicator this rebalance switch definition is a one off rebalance request. Will be made inactive after being run.",
                    "example": true
                  },
                  "endDate": {
                    "description": "The date after which the rebalance becomes inactive.",
                    "example": "2019-09-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The frequency at which the rebalance is to be performed.",
                    "example": "Monthly"
                  },
                  "nextDueDate": {
                    "description": "The date that the rebalance is next due.",
                    "example": "2019-09-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "rebalanceStrategies": {
                    "type": "array",
                    "description": "Investment switch allocation nominations.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "investmentId": {
                          "description": "The unique Composer identifier for the Investment.",
                          "example": 10,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "investmentStrategyPercent": {
                          "description": "The percentage of the total account balance that this Investment is targeted to hold.",
                          "example": "25.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "rebalanceTolerancePercent": {
                          "description": "The percentage tolerance to be considered in the determination as to whether a switch rebalance is required.",
                          "example": "25.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "investmentId": 74,
                        "investmentStrategyPercent": "25.00",
                        "rebalanceTolerancePercent": "5.00"
                      },
                      {
                        "investmentId": 1546,
                        "investmentStrategyPercent": "75.00",
                        "rebalanceTolerancePercent": "10.00"
                      }
                    ]
                  },
                  "recurringSwitchType": {
                    "type": "string",
                    "description": "Type of Recurring Switch",
                    "enum": [
                      "Rebalance",
                      "RebalanceTolerance"
                    ],
                    "example": "Rebalance"
                  },
                  "startDate": {
                    "description": "The date from which the Rebalance Switch definition is to start.",
                    "example": "2019-02-28",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "status": {
                    "description": "The status of the Rebalance Switch definition.",
                    "example": "Active",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/activeInactiveStatus"
                      }
                    ]
                  },
                  "workItemId": {
                    "description": "The unique Composer identifier of the work item held in Composer to be linked to this switch definition. Applicable only where its been nominated as an Adhoc Rebalance Switch.",
                    "example": 29,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/rate-of-returns": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Rate of Returns",
        "description": "This will retrieve the calculated rate of return over a specified period for an investor account.",
        "operationId": "GET-investor-accounts-rate-of-returns",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "rateOfReturns": {
                          "type": "array",
                          "description": "The calculated rate of return for the account.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investorAccountId": {
                                "description": "The unique Composer identifier for the Investor Account.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "endDate": {
                                "description": "The end date of the required period for the return.",
                                "example": "2023-07-11",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "endBalance": {
                                "description": "The account balance as at the end date.",
                                "example": "39.30",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "rateOfReturn": {
                                "description": "The calculated rate of return for the account.",
                                "example": "36.74",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "calculationStatus": {
                                "type": "string",
                                "description": "Indicator as to whether the calculation has been successfully completed.",
                                "example": "Successful"
                              },
                              "startDate": {
                                "description": "The start date of the required period for the return.",
                                "example": "2022-07-12",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "startBalance": {
                                "description": "The account balance as at the start date.",
                                "example": "28.74",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "investorAccountId": 12365487,
                              "startDate": "2022-01-01",
                              "startBalance": "2800.74",
                              "endDate": "2022-12-31",
                              "endBalance": "5632.85",
                              "rateOfReturn": "36.74",
                              "calculationStatus": "Successful"
                            },
                            {
                              "investorAccountId": 98745632,
                              "startDate": "2022-01-01",
                              "startBalance": "50250.00",
                              "endDate": "2022-12-31",
                              "endBalance": "65755.00",
                              "rateOfReturn": "27.65",
                              "calculationStatus": "Successful"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "query",
          "description": "The unique Composer identifier for the Investor holding the Investor Account.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "investorAccountId",
          "in": "query",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "startDate",
          "in": "query",
          "description": "The start date of the required period for the return.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "2023-01-01"
        },
        {
          "name": "endDate",
          "in": "query",
          "description": "The end date of the required period for the return.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "2023-06-30"
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/pension-contribution": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Employer Pension Contributions",
        "description": "The retrieval of Contributions made by an Employer for an Investor Account.",
        "operationId": "GET-investor-accounts-{investoraccountid}-pension-contribution",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "pensionContributions": {
                          "type": "array",
                          "description": "Contributions made by an Employer for an Investor Account.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "effectiveDate": {
                                "description": "The date contribution was received.",
                                "example": "2023-10-01",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "employerAmount": {
                                "description": "The employer contribution amount.",
                                "example": "333.33",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "employeeAmount": {
                                "description": "The employee contribution amount.",
                                "example": "333.33",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "salSacrificeAmount": {
                                "description": "The salary sacrifice contribution amount.",
                                "example": "20.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "employerAvcAmount": {
                                "description": "The employer AVC contribution amount.",
                                "example": "50.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "employeeAvcAmount": {
                                "description": "The employee AVC contribution amount.",
                                "example": "50.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "effectiveDate": "2023-10-01",
                              "employerAmount": "500.25",
                              "employeeAmount": "300.30",
                              "salSacrificeAmount": "45.00",
                              "employerAvcAmount": "20.00",
                              "employeeAvcAmount": "50.00"
                            },
                            {
                              "effectiveDate": "2023-11-02",
                              "employerAmount": "500.00",
                              "employeeAmount": "250.50",
                              "salSacrificeAmount": "40.00",
                              "employerAvcAmount": "15.00",
                              "employeeAvcAmount": "45.00"
                            }
                          ]
                        }
                      },
                      "description": "Pension Contribution details"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "effectiveDateFrom",
          "in": "query",
          "description": "The Effective Date from which the Pension contributions are to be retrieved from.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "2023-01-01"
        },
        {
          "name": "effectiveDateTo",
          "in": "query",
          "description": "The Effective Date up until which the Pension contributions are to be retrieved to.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/date"
          },
          "example": "2023-06-30"
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/investor-account-transactions" : {
      "get" : {
        "tags" : [ "Investor Account" ],
        "description" : "This will search for and retrieve transactions for an Investor Account matching the provided parameters.",
        "summary" : "Retrieve Investor Account Transactions including investment details",
        "operationId" : "GET-investor-accounts-{investorAccountId}-investor-account-transactions",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "investorAccountTransactions" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "id" : {
                                "description" : "The unique Composer identifier for the transaction.",
                                "example" : 30,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "investorAccountId" : {
                                "description" : "The unique Composer identifier for the Investor Account.",
                                "example" : 70823868,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "transactionDatetime" : {
                                "description" : "The date and time of the transaction.",
                                "example" : "2023-10-25T21:29:58",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/dateTime"
                                } ]
                              },
                              "transactionTypeId" : {
                                "description" : "The unique Composer identifier for the transaction type.",
                                "example" : 2945,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "investmentSplits" : {
                                "type" : "array",
                                "description" : "The details of the investments associated to the transaction.",
                                "items" : {
                                  "type" : "object",
                                  "properties" : {
                                    "investmentSplitId" : {
                                      "description" : "The unique Composer identifier for the investments associated to the transaction.",
                                      "example" : 42,
                                      "allOf" : [ {
                                        "$ref" : "#/components/schemas/identifier"
                                      } ]
                                    },
                                    "investmentId" : {
                                      "description" : "The unique Composer identifier for the investment.",
                                      "example" : 1646,
                                      "allOf" : [ {
                                        "$ref" : "#/components/schemas/identifier"
                                      } ]
                                    },
                                    "investmentName" : {
                                      "type" : "string",
                                      "description" : "The name of the investment.",
                                      "example" : "SUN JPM UK Equity Core E Acc"
                                    },
                                    "numberOfUnits" : {
                                      "description" : "The number of units.",
                                      "example" : "50.000000",
                                      "allOf" : [ {
                                        "$ref" : "#/components/schemas/decimal"
                                      } ]
                                    },
                                    "investmentDisplayName" : {
                                      "type" : "string",
                                      "description" : "The display name for the Investment.",
                                      "example" : "JPM UK Equity Core E Acc"
                                    },
                                    "transactionNarrative" : {
                                      "type" : "string",
                                      "description" : "The narrative for the transaction.",
                                      "example" : "Capital Guarantee Adjustment"
                                    }
                                  }
                                }
                              },
                              "transactionStatus" : {
                                "type" : "string",
                                "description" : "The status of the transaction.",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/MemberAccountTransaction"
                                  }
                                ],
                                "example" : "Active"
                              },
                              "effectiveDatetime" : {
                                "description" : "The effective date and time of the transaction.",
                                "example" : "2023-10-25T00:00:00",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/dateTime"
                                } ]
                              },
                              "transactionAmount" : {
                                "description" : "The amount of the transaction.",
                                "example" : "50.00",
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/decimal"
                                } ]
                              },
                              "transactionName" : {
                                "type" : "string",
                                "description" : "The name of the transaction.",
                                "example" : "Capital Guarantee Adjustment"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 65433,
                              "investorAccountId": 70823868,
                              "transactionDatetime": "2023-10-25T21:29:58",
                              "transactionTypeId": 2945,
                              "investmentSplits": [
                                {
                                  "investmentSplitId": 426545,
                                  "investmentId": 1646,
                                  "investmentName": "UK Equity Core E Acc",
                                  "numberOfUnits": "50.000000",
                                  "investmentDisplayName": "UK Equity Core E Acc",
                                  "transactionNarrative": "Capital Guarantee Adjustment"
                                },
                                {
                                  "investmentSplitId": 426546,
                                  "investmentId": 4587,
                                  "investmentName": "UK Equity Core E Acc",
                                  "numberOfUnits": "25.876783",
                                  "investmentDisplayName": "UK Equity Core E Acc",
                                  "transactionNarrative": "Contribution"
                                }
                              ],
                              "transactionStatus": "Active",
                              "effectiveDatetime": "2023-10-25T00:00:00",
                              "transactionAmount": "50.00",
                              "transactionName": "Capital Guarantee Adjustment"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Operation is bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/400BadRequestRESPONSE"
                  }, {
                    "$ref" : "#/components/schemas/AccessTokenError"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "investorAccountId",
            "in": "path",
            "description": "The unique Composer identifier for the Investor Account.",
            "required": true,
            "schema" : {
              "$ref" : "#/components/schemas/nonNegativeInteger"
            }
          },
          {
            "name": "transactionTypeId",
            "in": "query",
            "description": "The unique Composer identifier for the transaction type.",
            "required": false,
            "schema" : {
              "$ref" : "#/components/schemas/nonNegativeInteger"
            }
          },
          {
            "name": "transactionStatus",
            "in": "query",
            "description": "The status of the transaction.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MemberAccountTransaction"
            },
            "example" : "Active"
          },
          {
            "name": "effectiveFromDate",
            "in": "query",
            "description": "The start date for the search of the required investor account transactions.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/date"
            },
            "example": "2021-01-01"
          },
          {
            "name": "effectiveToDate",
            "in": "query",
            "description": "The end date for the search of the required investor account transactions.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/date"
            },
            "example": "2022-01-01"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records that are offset against the number of transaction records that are retrieved.",
            "required": false,
            "schema" : {
              "$ref" : "#/components/schemas/identifier"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit to the number of transaction records that are retrieved.",
            "required": false,
            "schema" : {
              "$ref" : "#/components/schemas/identifier"
            }
          }
        ]
      }
    },
    "/investor-accounts/{investorAccountId}/work-items": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Processing Work Items",
        "description": "This will retrieve work items associated to an Investor Account.",
        "operationId": "GET-investor-accounts-{investoraccountid}-work-items",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "processingWorkItem": {
                          "type": "array",
                          "description": "The details retrieved for a processing work item.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "loggedDateTime": {
                                "description": "The date and time the work item was logged.",
                                "example": "2015-07-02T08:30:00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/dateTime"
                                  }
                                ]
                              },
                              "workItemType": {
                                "type": "string",
                                "description": "The type of work item.",
                                "example": "Pension Income Master"
                              },
                              "id": {
                                "description": "The unique Composer identifier of the work item.",
                                "example": 2244029,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "entityId": {
                                "description": "The unique Composer identifier for the entity to which the work item relates.",
                                "example": 20412012,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "givenNames": {
                                "type": "string",
                                "description": "The entity's forename and any middle names.",
                                "example": "John Smith"
                              },
                              "partyId": {
                                "description": "The unique Composer identifier for the Party to which the work item is associated.",
                                "example": 70875080,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "partyType": {
                                "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                                "example": "InvestorAccount",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/partyType"
                                  }
                                ]
                              },
                              "productId": {
                                "description": "The unique Composer identifier for the product associated to the work item.",
                                "example": 20,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productGroupId": {
                                "description": "The unique Composer identifier for the product group to which the product is associated.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productName": {
                                "type": "string",
                                "description": "The name of the product type.",
                                "example": "SIPP Drawdown"
                              },
                              "productGrouping": {
                                "type": "string",
                                "description": "Indicator of the product type to which the product is associated.",
                                "example": "SIPP"
                              },
                              "receivedMethod": {
                                "description": "The received method for the work item. Possible values are: Mail, Web, Personal, DataFile, Telephone, Email, Fax.",
                                "example": "Web",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/receivedMethod"
                                  }
                                ]
                              },
                              "workItemState": {
                                "description": "The state of the work item. Possible values are: In Progress, Complete.",
                                "example": "InProgress",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/workItemState"
                                  }
                                ]
                              },
                              "submittingPartyType": {
                                "description": "The party type submitting the work item.",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "example": 3,
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/identifier"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "Adviser Account"
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 2244029,
                              "loggedDateTime": "2015-07-02T08:30:00",
                              "workItemType": "Pension Income Master",
                              "workItemState": "InProgress",
                              "entityId": 20412012,
                              "givenNames": "John Smith",
                              "partyId": 70875080,
                              "partyType": "InvestorAccount",
                              "productId": 20,
                              "productGroupId": 2,
                              "productName": "SIPP Drawdown",
                              "productGrouping": "SIPP",
                              "receivedMethod": "Web",
                              "submittingPartyType": {
                                "id": 3,
                                "name": "Adviser Account"
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account to which the work item is associated.",
          "required": true,
          "example": 780923445,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/contribution-rates": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Employer Contribution Rates",
        "description": "The retrieval of the current Employer Contribution Rates for an Investor Account.",
        "operationId": "GET-investor-accounts-{investoraccountid}-contribution-rates",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "employerFixedPercent": {
                          "description": "The employers fixed contribution value as a percentage of salary.",
                          "example": "10.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "employerFixedAmount": {
                          "description": "The employers fixed contribution amount.",
                          "example": "100.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employeeFixedPercent": {
                          "description": "The employees fixed contribution value as a percentage of salary.",
                          "example": "20.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "employeeFixedAmount": {
                          "description": "The employees fixed contribution amount.",
                          "example": "200.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "salSacrificeFixedPercent": {
                          "description": "The employees fixed salary sacrifice contribution value as a percentage of salary.",
                          "example": "30.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "salSacrificeFixedAmount": {
                          "description": "The employees fixed salary sacrifice contribution amount.",
                          "example": "300.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employerAvcFixedPercent": {
                          "description": "The employers AVC contribution value as a percentage of salary.",
                          "example": "40.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "employerAvcFixedAmount": {
                          "description": "The employers AVC contribution amount.",
                          "example": "400.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employeeAvcFixedPercent": {
                          "description": "The employees AVC contribution as a percentage of salary.",
                          "example": "50.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "employeeAvcFixedAmount": {
                          "description": "The employees AVC contribution amount.",
                          "example": "500.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "isacashFixedPercent": {
                          "description": "The ISA Cash contribution value as a percentage of salary.",
                          "example": "60.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "isassFixedPercent": {
                          "description": "The ISA Stocks & Shares contribution value as a percentage of salary.",
                          "example": "70.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "giaFixedPercent": {
                          "description": "The GIA contribution as a percentage of salary.",
                          "example": "80.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "isacashFixedAmount": {
                          "description": "The ISA Cash contribution amount.",
                          "example": "600.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "isassFixedAmount": {
                          "description": "The ISA Stocks & Shares contribution amount.",
                          "example": "700.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "giaFixedAmount": {
                          "description": "The GIA contribution amount.",
                          "example": "800.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        }
                      },
                      "description": "Employer Contribution Rates Details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for an Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "employerId",
          "in": "query",
          "description": "The unique Composer identifier for the employer linked to the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 145678
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/employer-contribution-schedules": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Employer Contribution Schedules",
        "description": "This will retrieve Employer Contribution Schedules for a nominated Investor Account.",
        "operationId": "GET-investor-accounts-{investoraccountid}-employer-contribution-schedules",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "employerContributionSchedules": {
                          "type": "array",
                          "description": "The employer contribution schedule details.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "employerGroupId": {
                                "description": "The unique Composer identifier for an Employer Group.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "employerGroupName": {
                                "type": "string",
                                "description": "The Employer group name.",
                                "example": "All Employees"
                              },
                              "employerId": {
                                "description": "The unique Composer identifier for an Employer.",
                                "example": 22,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "employerName": {
                                "type": "string",
                                "description": "The name of the Employer.",
                                "example": "Spacely Space Sprockets"
                              },
                              "employerSiteId": {
                                "description": "The unique Composer identifier for an Employer Site.",
                                "example": 20,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "siteEntityName": {
                                "type": "string",
                                "description": "The employer site name.",
                                "example": "Central Districts"
                              },
                              "employerStatus": {
                                "type": "string",
                                "description": "The status of the employer. Allowable values - Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "scheduleId": {
                                "description": "The unique Composer identifier for the contribution schedule.",
                                "example": 23,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "scheduleLevel": {
                                "type": "string",
                                "description": "The level within the employer at which the contribution schedule is defined.",
                                "enum": [
                                  "Site",
                                  "EmployerGroup",
                                  "Employer"
                                ],
                                "example": "Employer"
                              },
                              "status": {
                                "type": "string",
                                "description": "The status of the contribution schedule.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "startDate": {
                                "description": "The start date of the contribution schedule.",
                                "example": "2023-01-20",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "endDate": {
                                "description": "The end date for the contribution schedule.",
                                "example": "2023-09-23",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "payrollStartDate": {
                                "description": "The payroll start date.",
                                "example": "2023-01-01",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "payrollEndDate": {
                                "description": "The payroll end date.",
                                "example": "2023-10-30",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "payrollNextPayDate": {
                                "description": "The next payroll payment date.",
                                "example": "2023-05-20",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "payrollFrequency": {
                                "type": "string",
                                "description": "The payroll frequency.",
                                "enum": [
                                  "Adhoc",
                                  "Monthly",
                                  "FourWeekly",
                                  "Fortnightly",
                                  "Weekly"
                                ],
                                "example": "Monthly"
                              }
                            }
                          },
                          "example": [
                            {
                              "employerGroupId": 2,
                              "employerGroupName": "All Employees",
                              "employerId": 22,
                              "employerName": "Spacely Space Sprockets",
                              "employerSiteId": 20,
                              "siteEntityName": "Central Districts",
                              "employerStatus": "Active",
                              "scheduleId": 23,
                              "scheduleLevel": "Employer",
                              "status": "Active",
                              "startDate": "2023-01-20",
                              "endDate": "2023-09-23",
                              "payrollStartDate": "2023-01-01",
                              "payrollEndDate": "2023-10-30",
                              "payrollNextPayDate": "2023-05-20",
                              "payrollFrequency": "Monthly"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for an Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/employer-contribution-schedule-details": {
      "post": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Override Investor Account Employer Contribution Schedule details",
        "description": "This endpoint provides for the ability to create and maintain Employer Contribution Schedule Details for Investor account with the option to to be able to create work items to assist with the tracking of the payload request processing.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same maintainance of Employer Contribution Schedule Details for an Investor account but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be for the standard POST request for the Employer Contribution Schedule Details.\n    - `POST /investor-accounts/{investorAccountId}/employer-contribution-schedule-details`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `POST /work-item-managed-tasks/investor-accounts/{investorAccountId}/employer-contribution-schedule-details`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPOST /work-item-managed-tasks/investor-accounts/{investorAccountId}/employer-contribution-schedule-details\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId": "POST-investor-account_investor-accounts_{investorAccountId}_employer-contribution-schedule-details",
        "requestBody": {
          "description": "Employer Contribution Schedule Details for an Investor Account.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "overrideStartDate": {
                    "description": "Override start date must be greater than last start date of employee.",
                    "example": "2023-05-05",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "employerContScheduleDtlId": {
                    "description": "The unique identifier for the employer default contribution schedule details which this override will be linked to.",
                    "example": 70824753,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "employeeAvcFixedAmount": {
                    "description": "The employee AVC contribution amount.",
                    "example": "10.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "employeeAvcFixedPercent": {
                    "description": "The employee AVC contribution as a percentage of salary.",
                    "example": "10.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "employeeAvcPredefinedFieldId": {
                    "description": "The unique Composer identifier for the predefined calculation for the employee AVC contribution rate.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "employeeFixedAmount": {
                    "description": "The employee contribution amount.",
                    "example": "20.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "employeeFixedPercent": {
                    "description": "The employee contribution as a percentage of salary.",
                    "example": "20.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "employeePredefinedFieldId": {
                    "description": "The unique Composer identifier for the predefined calculation for the employee contribution rate.",
                    "example": 2,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "employerAvcFixedAmount": {
                    "description": "The employer AVC contribution amount.",
                    "example": "30.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "employerAvcFixedPercent": {
                    "description": "The employer AVC contribution as a percentage of salary.",
                    "example": "30.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "employerAvcPredefinedFieldId": {
                    "description": "The unique Composer identifier for the predefined calculation for the employer AVC contribution rate.",
                    "example": 3,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "employerFixedAmount": {
                    "description": "The employer contribution amount.",
                    "example": "40.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "employerFixedPercent": {
                    "description": "The employer contribution as a percentage of salary.",
                    "example": "40.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "employerPredefinedFieldId": {
                    "description": "The unique Composer identifier for the predefined calculation for the employer contribution rate.",
                    "example": 4,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "giaFixedAmount": {
                    "description": "The GIA contribution amount.",
                    "example": "50.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "giaFixedPercent": {
                    "description": "The GIA contribution as a percentage of salary.",
                    "example": "50.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "giaPredefinedId": {
                    "description": "The unique Composer identifier for the predefined calculation for the GIA contribution rate.",
                    "example": 5,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "isaCashFixedAmount": {
                    "description": "The ISA Cash contribution amount.",
                    "example": "60.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "isaCashFixedPercent": {
                    "description": "The ISA Cash contribution as a percentage of salary.",
                    "example": "60.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "isaCashPredefinedId": {
                    "description": "The unique Composer identifier for the predefined calculation for the ISA Cash contribution rate.",
                    "example": 6,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "isaSharesFixedAmount": {
                    "description": "The ISA Stocks & Shares contribution amount.",
                    "example": "70.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "isaSharesFixedPercent": {
                    "description": "The ISA Stocks & Shares contribution as a percentage of salary.",
                    "example": "70.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "isaSharesPredefinedId": {
                    "description": "The unique Composer identifier for the predefined calculation for the ISA Stocks & Shares contribution rate.",
                    "example": 7,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "salSacrificeFixedAmount": {
                    "description": "The Salary Sacrifice contribution amount.",
                    "example": "80.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "salSacrificeFixedPercent": {
                    "description": "The Salary Sacrifice contribution as a percentage of salary.",
                    "example": "80.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "salSacrificePredefinedId": {
                    "description": "The unique Composer identifier for the predefined calculation for the Salary Sacrifice contribution rate.",
                    "example": 8,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Resource was created successfully"
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the investor account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/investor-accounts/employer-contribution-schedule-details/{employerContScheduleDtlId}" : {
      "patch" : {
        "tags" : [ "Investor Account" ],
        "summary": "Update Contribution Schedule details",
        "description" : "This provides for the ability to maintain Employer Contribution Schedule Details for an Investor Account with the option to create work items to assist with the tracking the payload request processing.\n\n<u><b>Option For Tracking/Orchestration via a Work Item</b></u>\n\nFor this service there exists two API endpoints which will perform the same maintainance of Employer Contribution Schedule Details for an Investor account but with an option to include work item tracking /orchestration.\n\n- The first endpoint will be for the standard PATCH request for the update of Employer Contribution Schedule Details.\n    - `POST /investor-account/employee-contribution-schedule-details/{employerContScheduleDtlId}`\n- The second endpoint will be where the requirement calls for the action to be within Work Item orchestration or tracking. For this we prefix the existing endpoint as per above with `/work-item-managed-tasks` and\n    - include a **`\"data:{ }\"`** object around the actual request payload and\n    - provide a **`\"meta:{ }\"`** object for the work item tracking/orchestration data items.\n    - Endpoint\n        - `POST /work-item-managed-tasks/investor-account/employee-contribution-schedule-details/{employerContScheduleDtlId}`\n    - Meta\n        - As per the example code block shown below.\n\n``` json\nPOST /work-item-managed-tasks/investor-account/employee-contribution-schedule-details/{employerContScheduleDtlId}\n{\n  data: { payload },\n  meta: {\n    payloadId: \"<<unique-payload-id>>\",  // Optional - if not provided it will use the X-REQUEST-ID from the API header\n    sender: \"MemberPortal\",              // Composer defined gateway sender identifier\n    partyType: \"Investor\",               // Party Type Identifier of that who is submitting the request\n    partyId: 87654321,                   // Unique Composer Party Identifier of that who is submitting the request\n    masterWorkItemId: 2323               // Optional - Required where requesting that the creation of the child Work Item be associated to an existing Master Work Item. If omitted a Master and Child Work Item will be created.\n  }\n}\n\n ```",
        "operationId" : "PATCH-Investor Account-employer-contribution-schedule-details_{employerContScheduleDtlId}",
        "requestBody" : {
          "description" : "Update an Investor Accounts Employer Contribution Schedule details",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "overrideStartDate" : {
                    "description" : "Override start date must be greater than last start date of employee.",
                    "example" : "2023-05-05",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/date"
                    } ]
                  },
                  "employeeAvcFixedAmount" : {
                    "description" : "The employee AVC contribution amount.",
                    "example" : "10.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "employeeAvcFixedPercent" : {
                    "description" : "The employee AVC contribution as a percentage of salary.",
                    "example" : "10.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "employeeAvcPredefinedFieldId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the employee AVC contribution rate.",
                    "example" : 1,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "employeeFixedAmount" : {
                    "description" : "The employee contribution amount.",
                    "example" : "20.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "employeeFixedPercent" : {
                    "description" : "The employee contribution as a percentage of salary.",
                    "example" : "20.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "employeePredefinedFieldId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the employee contribution rate.",
                    "example" : 2,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "employerAvcFixedAmount" : {
                    "description" : "The employer AVC contribution amount.",
                    "example" : "30.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "employerAvcFixedPercent" : {
                    "description" : "The employer AVC contribution as a percentage of salary.",
                    "example" : "30.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "employerAvcPredefinedFieldId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the employer AVC contribution rate.",
                    "example" : 3,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "employerFixedAmount" : {
                    "description" : "The employer contribution amount.",
                    "example" : "40.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "employerFixedPercent" : {
                    "description" : "The employer contribution as a percentage of salary.",
                    "example" : "40.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "employerPredefinedFieldId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the employer contribution rate.",
                    "example" : 4,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "giaFixedAmount" : {
                    "description" : "The GIA contribution amount.",
                    "example" : "50.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "giaFixedPercent" : {
                    "description" : "The GIA contribution as a percentage of salary.",
                    "example" : "50.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "giaPredefinedId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the GIA contribution rate.",
                    "example" : 5,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "isaCashFixedAmount" : {
                    "description" : "The ISA Cash contribution amount.",
                    "example" : "60.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "isaCashFixedPercent" : {
                    "description" : "The ISA Cash contribution as a percentage of salary.",
                    "example" : "60.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "isaCashPredefinedId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the ISA Cash contribution rate.",
                    "example" : 6,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "isaSharesFixedAmount" : {
                    "description" : "The ISA Stocks & Shares contribution amount.",
                    "example" : "70.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "isaSharesFixedPercent" : {
                    "description" : "The ISA Stocks & Shares contribution as a percentage of salary.",
                    "example" : "70.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "isaSharesPredefinedId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the ISA Stocks & Shares contribution rate.",
                    "example" : 7,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  },
                  "salSacrificeFixedAmount" : {
                    "description" : "The Salary Sacrifice contribution amount.",
                    "example" : "80.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/decimal"
                    } ]
                  },
                  "salSacrificeFixedPercent" : {
                    "description" : "The Salary Sacrifice contribution as a percentage of salary.",
                    "example" : "80.00",
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/percentage"
                    } ]
                  },
                  "salSacrificePredefinedId" : {
                    "description" : "The unique Composer identifier for the predefined calculation for the Salary Sacrifice contribution rate.",
                    "example" : 8,
                    "allOf" : [ {
                      "$ref" : "#/components/schemas/identifier"
                    } ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Operation was successful.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "employerContScheduleDtlId",
        "in" : "path",
        "description" : "The unique Composer identifier for the employer contribution schedule details.",
        "required" : true,
        "schema" : {
          "$ref": "#/components/schemas/identifier"
        }
      } ]
    },
    "/investor-accounts/{investorAccountId}/contribution-amount-per-frequency": {
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Employer Contribution Amounts per Payment",
        "description": "This will retrieve the employer contribution amounts that will be paid per contribution type for an Investor Account.",
        "operationId": "GET-investor-accounts-{investoraccountid}-contribution-amount-per-frequency",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "paymentFrequency": {
                          "type": "string",
                          "description": "The frequency of which contributions will be made.",
                          "example": "Monthly",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/paymentFrequency"
                            }
                          ]
                        },
                        "totalContAmountPerFreq": {
                          "description": "The total contribution amount per payment frequency.",
                          "example": "900.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employerContAmountPerFreq": {
                          "description": "The employer contribution amount per payment frequency.",
                          "example": "400.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employeeContAmountPerFreq": {
                          "description": "The employee contribution amount per payment frequency.",
                          "example": "400.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employerAvcContAmountPerFreq": {
                          "description": "The employer AVC contribution amount per payment frequency.",
                          "example": "200.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "employeeAvcContAmountPerFreq": {
                          "description": "The employee AVC contribution amount per payment frequency.",
                          "example": "100.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "salSacrificeContAmountPerFreq": {
                          "description": "The salary sacrifice contribution amount per payment frequency.",
                          "example": "500.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        }
                      },
                      "description": "Retrieve the employer contribution amounts"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for an Investor Account",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 1209886
        },
        {
          "name": "employerId",
          "in": "query",
          "description": "The unique Composer identifier for an Employer linked to an Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 13444
        }
      ]
    },
    "/investor-accounts/{investorAccountId}/pension-income-details": {
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the investor’s income drawdown account. The id provided must be for a valid income drawdown account only.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ],
      "get": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Retrieve Regular Pension Income details",
        "description": "This endpoint will provide the ability to retrieve details of the regular pension income for an investor’s income drawdown account.",
        "operationId": "GET-investor-accounts-{investorAccountId}-pension-income-details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The details held for the income being paid from an investor’s income drawdown account.",
                          "example": "pension-income-details"
                        },
                        "investorAccountId": {
                          "description": "The unique Composer identifier for the investor’s income drawdown account.",
                          "example": 80002279,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {
                            "bankAccounts": {
                              "type": "array",
                              "description": "Details of the Bank Account held for the payment of Regular Pension Income. Where regular income is being paid by cheque, no bank account details will be returned.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "bankAccountId": {
                                    "description": "The unique Composer identifier for the bank account.",
                                    "example": 18688,
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/identifier"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the bank account holder.",
                                    "example": "Bank Acc # 18688"
                                  },
                                  "accountNumber": {
                                    "type": "string",
                                    "description": "The account number for the bank account.",
                                    "example": "99999999"
                                  },
                                  "sortCode": {
                                    "type": "string",
                                    "description": "The sort code for the bank account.",
                                    "example": "050882"
                                  },
                                  "defaultBankAccount": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether this is a default bank account.",
                                    "example": true
                                  }
                                }
                              },
                              "example": [
                                {
                                  "bankAccountId": 18688,
                                  "name": "Bank Acc # 18688",
                                  "accountNumber": "99999999",
                                  "sortCode": "050882",
                                  "defaultBankAccount": true
                                },
                                {
                                  "bankAccountId": 97234,
                                  "name": "Bank Acc # 9087522",
                                  "accountNumber": "67234211",
                                  "sortCode": "013587",
                                  "defaultBankAccount": false
                                }
                              ]
                            },
                            "manageIncome": {
                              "type": "object",
                              "description": "Details of the Regular Pension Income.",
                              "properties": {
                                "paymentDay": {
                                  "description": "The payment day for the regular pension income.",
                                  "example": 13,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/identifier"
                                    }
                                  ]
                                },
                                "incomeInPayment": {
                                  "type": "string",
                                  "description": "The amount of the regular pension income in payment.",
                                  "example": "1000.00",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                },
                                "paymentFrequency": {
                                  "type": "string",
                                  "description": "The payment frequency for the regular pension income.",
                                  "example": "Monthly"
                                },
                                "iddBalance": {
                                  "type": "string",
                                  "description": "The balance held for the investor income drawdown account.",
                                  "example": "76334.28",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/investor-accounts/{investorAccountId}/regular-pension-incomes" : {
      "post" : {
        "tags" : [ "Investor Account" ],
        "summary": "Create/Maintain Regular Pension Income details",
        "description" : "This endpoint will provide the ability to set up or amend regular pension income for an investor’s income drawdown account. The caller is responsible for ensuring that the data provided in this service has been validated prior to submission.",
        "operationId" : "POST-investor-accounts-{investoraccountid}-regular-pension-incomes",
        "requestBody" : {
          "description" : "The regular pension income request.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required": [
                  "data",
                  "meta"
                ],
                "properties" : {
                  "data" : {
                    "type" : "object",
                    "required": [
                      "drawdownIncomeAmount"
                    ],
                    "properties" : {
                      "pensionPaymentFrequency" : {
                        "description" : "The frequency that the regular income payment will be paid. This must match a Payment Frequency as configured in Composer.",
                        "example" : "Monthly",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/pensionPaymentFrequency"
                          }
                        ]
                      },
                      "paymentDay": {
                        "type": "integer",
                        "description": "The day the regular income payment will be made. Payment day should be between 1 and 31 unless specific values have been configured in reference code DEF_IDD_PAYMENT_DAY.",
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "maximum":  31
                      },
                      "drawdownIncomeAmount": {
                        "description": "The regular pension income amount. This value should not exceed the value of the Income Drawdown Account.",
                        "example": "25000.00",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "flexibleIncomeAllowed" : {
                        "type" : "boolean",
                        "description" : "Indicator if flexible income is allowed. Where flexible income is not allowed, income amount must not exceed maximum allowed.",
                        "example" : true
                      },
                      "bankAccount" : {
                        "type" : "object",
                        "description" : "Details of the bank account to which the regular pension income will be paid.",
                        "properties" : {
                          "sortCode" : {
                            "type" : "string",
                            "description" : "The sort code for the bank account.",
                            "example" : "001001"
                          },
                          "accountNumber" : {
                            "type" : "string",
                            "description" : "The account number for the bank account.",
                            "example" : "12345678"
                          },
                          "name" : {
                            "type" : "string",
                            "description" : "The name of the bank account holder.",
                            "example" : "AISL ISA Tax Reclaim Client Account"
                          },
                          "defaultBankAccount" : {
                            "type": "boolean",
                            "description" : "Indicator if this is the default bank account for the investor.",
                            "example" : false
                          }
                        }
                      },
                      "bankAccountId" : {
                        "description" : "The unique Composer identifier for the bank account.",
                        "example" : 1,
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "description" : "Details of the regular pension incomes request."
                  },
                  "meta" : {
                    "type" : "object",
                    "required": [
                      "sender",
                      "processName",
                      "partyId",
                      "partyTypeId",
                      "payloadId"
                    ],
                    "properties" : {
                      "processName" : {
                        "type" : "string",
                        "description" : "The name of the process associated to this event.",
                        "example" : "PENSION_INCOME"
                      },
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "100000000000001"
                      },
                      "sender" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier used to represent the calling application.",
                        "example" : "MEMBERPORTAL"
                      },
                      "role" : {
                        "type" : "string",
                        "description" : "The role of the user who logged the request.",
                        "example" : "Adviser"
                      },
                      "partyTypeId" : {
                        "description" : "The unique identifier for party type of the acting party who submitted the request.",
                        "example" : 1,
                        "type": "integer",
                        "format": "int32"
                      },
                      "partyId" : {
                        "description" : "The unique identifier for the acting party who submitted the request.",
                        "example" : 1,
                        "type": "integer",
                        "format": "int32"
                      },
                      "adviceGiven" : {
                        "type": "boolean",
                        "description" : "The advise given.",
                        "example" : true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource was created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Response on successful creation of the resource.",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/201CreatedRESPONSEWithWorkItemId"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "investorAccountId",
        "in" : "path",
        "description" : "The unique Composer identifier of the investor account for this request.",
        "required" : true,
        "schema" : {
          "allOf" : [ {
            "$ref" : "#/components/schemas/identifier"
          } ]
        }
      } ]
    },
    "/incomedrawdown-accounts/{investorAccountId}/adhoc-income-requests": {
      "post": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Set Up An Adhoc Income Request",
        "description": "Where an Investor Account is within a Income Drawdown product for which they have been setup to be able to receive income payments, the ability exists for the Investor to be able to request an ad hoc income payment to be made in addition to that already happening as part of the standard income drawdown payment scheduling.\n\nThe ad hoc income payment request must be associated to an Open work item logged for that Investor Account.",
        "operationId": "POST-incomedrawdown-accounts-{investoraccountid}-adhoc-income-requests",
        "requestBody": {
          "description": "Creates an ad hoc income request from an income drawdown account.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "amount",
                  "paymentCurrency",
                  "workItemId"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of ad hoc income to be paid.",
                    "example": "1500.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "dueDate": {
                    "description": "The date the ad hoc income payment is due to be paid.",
                    "example": "2023-03-15",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "workItemId": {
                    "description": "The unique Composer identifier of the work item held in Composer.",
                    "example": 2167187,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "paymentCurrency": {
                    "type": "string",
                    "description": "The currency of the payment associated to the work item. The value provided must match a currency as configured in Composer.",
                    "example": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/general-investment-accounts/{investorAccountId}/regular-drawdowns": {
      "post": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Create a Regular Drawdown",
        "description": "Where an Investor Account is within an General Investment type product the facility exists to be able to setup a regular drawdown arrangement (regular withdrawal) to be able to receive regular payments from the account.\n\nThis will provides the ability to set up an arrangement defining the terms of when it starts, the frequency and for how long it is to run, withdrawal value, payment method, funding investments and any annual escalation to the withdrawal amount which is to apply.",
        "operationId": "POST-general-investment-accounts-{investoraccountid}-regular-drawdowns",
        "requestBody": {
          "description": "Creates a regular drawdown arrangement (regular withdrawal) from a non-pension account.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "startDate": {
                    "description": "The start date of regular withdrawal.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "endDate": {
                    "description": "The date the regular withdrawal arrangement is to end.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "nextDueDate": {
                    "description": "The date that the next regular withdrawal is due to be paid.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The payment frequency of the regular withdrawal.",
                    "enum": [
                      "Monthly",
                      "Quarterly",
                      "HalfYearly",
                      "Yearly"
                    ],
                    "example": "Annually"
                  },
                  "status": {
                    "description": "The status of the regular withdrawal.",
                    "example": "Active",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/activeInactiveStatus"
                      }
                    ]
                  },
                  "amount": {
                    "description": "The withdrawal amount per payment.",
                    "example": "1525.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "cashReservePurpose": {
                    "type": "string",
                    "description": "The Cash Reserve Purpose that applies to the regular withdrawal. This must match a Cash Reserve Purpose as configured in Composer.",
                    "example": "I"
                  },
                  "fundingBasis": {
                    "type": "string",
                    "description": "Indicator as to whether the funding basis for the withdrawal is either to be from available cash or sourced from a regular disinvestment. Possible values are: Cash, Recurring.",
                    "enum": [
                      "Cash",
                      "Recurring"
                    ],
                    "example": "Recurring"
                  },
                  "payToBankAccountId": {
                    "description": "The unique Composer identifier of the bank account held in Composer that the regular withdrawal is to be paid to.",
                    "example": 4490,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "directPayTypeCode": {
                    "type": "string",
                    "description": "The type of direct credit payment to be used for the regular withdrawal. The value provided must match a value configured in the DIRECT_PAY_TYPE_LIST reference code in Composer.",
                    "example": "BACS"
                  },
                  "payToInvestorAccountId": {
                    "description": "The unique Composer identifier of the investor account held in Composer that the regular withdrawal is to be paid to.",
                    "example": 12365980,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "recurringSwitchId": {
                    "description": "The unique Composer identifier of the recurring switch record where associated to the regular withdrawal.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "withdrawalMethod": {
                    "type": "string",
                    "description": "The withdrawal method where an a regular withdrawal portfolio exists with equalisation set to Y.  Possible values are: FIFO, LIFO.",
                    "enum": [
                      "LIFO",
                      "FIFO"
                    ],
                    "example": "FIFO"
                  },
                  "investmentNominations": {
                    "type": "array",
                    "description": "Regular Drawdown investment nominations.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "drawdownPercentSplit": {
                          "description": "The percentage split for the drawdown investment nomination.",
                          "example": "100.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "investmentId": {
                          "description": "The unique Composer identifier for the Investment.",
                          "example": 123540,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "investmentId": 123540,
                        "drawdownPercentSplit": "100.00"
                      }
                    ]
                  },
                  "investmentPriority": {
                    "type": "string",
                    "description": "The definition of how the regular withdrawal amount will be allocated across the applicable Investor Account investment portfolios. Possible values are: User Defined, Proportional, Highest Balance, Disbursement Priority.",
                    "enum": [
                      "UserDefined",
                      "Proportional",
                      "HighestBalance",
                      "DisbursementPriority"
                    ],
                    "example": "DisbursementPriority"
                  },
                  "investorAccountId": {
                    "description": "The unique Composer identifier for the Investor Account.",
                    "example": 12365980,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "indexationNextDueDate": {
                    "description": "The date that indexation is next due on the regular withdrawal.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "indexationPercent": {
                    "description": "The indexation percentage to be used in relation to the regular withdrawal.",
                    "example": "5.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "isIndexAsPerPercentBalance": {
                    "type": "boolean",
                    "description": "Indicator as to whether or not the regular withdrawal should be indexed as per 'percent of balance'.",
                    "example": true
                  },
                  "isNationalAverageEarnings": {
                    "type": "boolean",
                    "description": "Indicator as to whether or not the regular withdrawal should be indexed as per NAE (National Average Earnings).",
                    "example": true
                  },
                  "ignoreRDDPaymentRunDate": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the RDD Payment Run Date validation warnings where when looking at the Direct Payment Type lead days will result in the payment not being received by the next due date.",
                    "example": true
                  },
                  "ignoreRECWFromAmountRounding": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the Amount validation warnings where the recalculated Switch From Amount values for the Recurring Switch do not equal the Switch Target (due to rounding).",
                    "example": true
                  },
                  "ignoreRECWPaymentRunDate": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the Amount validation warnings where when looking at the Direct Payment Type lead days and expected trade settlements will result in the payment not being received by the next due date.",
                    "example": true
                  },
                  "ignoreRemainingRDDAmount": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the Amount validation warnings where the total amount of regular withdrawals for the Bond policy group which are expected to be payable within the policy year will result in the available Cumulative Annual Allowance being exceeded",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/regular-drawdowns/{regularDrawdownId}": {
      "patch": {
        "tags": [
          "Investor Account"
        ],
        "summary": "Update a Regular Drawdown",
        "description": "Where an Investor Account is within an General Investment type product the facility exists to be able to setup a regular drawdown arrangement (regular withdrawal) to be able to receive regular payments from the account.\n\nThis will make changes to a regular drawdown arrangement (regular withdrawal) that has already been defined including the terms of when it starts, the frequency and for how long it is to run, withdrawal value, payment method and funding investments.",
        "operationId": "PATCH-regular-drawdowns-{regulardrawdownid}",
        "requestBody": {
          "description": "Updates a regular drawdown arrangement (regular withdrawal) from a non-pension account.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endDate": {
                    "description": "The date the regular withdrawal is to end.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "nextDueDate": {
                    "description": "The date that the next regular withdrawal is due to be paid.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "description": "The payment frequency of the regular withdrawal.",
                    "enum": [
                      "Monthly",
                      "Quarterly",
                      "HalfYearly",
                      "Yearly",
                      "Annually"
                    ],
                    "example": "Yearly"
                  },
                  "status": {
                    "description": "The status of the regular withdrawal.",
                    "example": "Active",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/activeInactiveStatus"
                      }
                    ]
                  },
                  "amount": {
                    "description": "The withdrawal amount per payment.",
                    "example": "1525.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimal"
                      }
                    ]
                  },
                  "cashReservePurpose": {
                    "type": "string",
                    "description": "The Cash Reserve Purpose that applies to the regular withdrawal. This must match a Cash Reserve Purpose as configured in Composer.",
                    "example": "I"
                  },
                  "fundingBasis": {
                    "type": "string",
                    "description": "Indicator as to whether the funding basis for the withdrawal is either to be from available cash or sourced from a regular disinvestment. Possible values are: Cash, Recurring.",
                    "enum": [
                      "Cash",
                      "Recurring"
                    ],
                    "example": "Recurring"
                  },
                  "investmentNominations": {
                    "type": "array",
                    "description": "Regular Drawdown investment nominations.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "drawdownPercentSplit": {
                          "description": "The percentage split for the portfolio nomination.",
                          "example": "100.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/percentage"
                            }
                          ]
                        },
                        "investmentId": {
                          "description": "The unique Composer identifier for the Investment.",
                          "example": 123540,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "investmentId": 123540,
                        "drawdownPercentSplit": "100.00"
                      }
                    ]
                  },
                  "investmentPriority": {
                    "type": "string",
                    "description": "The definition of how the regular withdrawal amount will be allocated across the applicable Investor Account investment portfolios. Possible values are: User Defined, Proportional, Highest Balance, Disbursement Priority.",
                    "enum": [
                      "UserDefined",
                      "Proportional",
                      "HighestBalance",
                      "DisbursementPriority"
                    ],
                    "example": "DisbursementPriority"
                  },
                  "investorAccountId": {
                    "description": "The unique Composer identifier for the Investor Account.",
                    "example": 12365980,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "payToBankAccountId": {
                    "description": "The unique Composer identifier of the bank account held in Composer that the regular withdrawal is to be paid to.",
                    "example": 4490,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "directPayTypeCode": {
                    "type": "string",
                    "description": "The type of direct credit payment to be used for the regular withdrawal. The value provided must match a value configured in the DIRECT_PAY_TYPE_LIST reference code in Composer.",
                    "example": "BACS"
                  },
                  "payToInvestorAccountId": {
                    "description": "The unique Composer identifier of the investor account held in Composer that the regular withdrawal is to be paid to.",
                    "example": 12365980,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "recurringSwitchId": {
                    "description": "The unique Composer identifier of the recurring switch record associated to the regular withdrawal.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "withdrawalMethod": {
                    "type": "string",
                    "description": "The withdrawal method where an a regular withdrawal portfolio exists with equalisation set to Y.  Possible values are: FIFO, LIFO.",
                    "enum": [
                      "LIFO",
                      "FIFO"
                    ],
                    "example": "FIFO"
                  },
                  "indexationNextDueDate": {
                    "description": "The date that indexation is next due on the regular withdrawal.",
                    "example": "2018-01-31",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "indexationPercent": {
                    "description": "The indexation percentage to be used in relation to the regular withdrawal.",
                    "example": "5.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/percentage"
                      }
                    ]
                  },
                  "isIndexAsPerPercentBalance": {
                    "type": "boolean",
                    "description": "Indicator as to whether or not the regular withdrawal should be indexed as per 'percent of balance'.",
                    "example": true
                  },
                  "isNationalAverageEarnings": {
                    "type": "boolean",
                    "description": "Indicator as to whether or not the regular withdrawal should be indexed as per NAE (National Average Earnings).",
                    "example": true
                  },
                  "ignoreEndDate": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the End Date validation warnings when making the next regular withdrawal payment.",
                    "example": true
                  },
                  "ignoreRDDPaymentRunDate": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the RDD Payment Run Date validation warnings where when looking at the Direct Payment Type lead days will result in the payment not being received by the next due date.",
                    "example": true
                  },
                  "ignoreRECWFromAmountRounding": {
                    "type": "boolean",
                    "description": "indicator as to whether to bypass the Amount validation warnings where the recalculated Switch From Amount values for the Recurring Switch do not equal the Switch Target (due to rounding).",
                    "example": true
                  },
                  "ignoreRECWPaymentRunDate": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the Amount validation warnings where when looking at the Direct Payment Type lead days and expected trade settlements will result in the payment not being received by the next due date.",
                    "example": true
                  },
                  "ignoreRemainingRDDAmount": {
                    "type": "boolean",
                    "description": "Indicator as to whether to bypass the Amount validation warnings where the total amount of regular withdrawals for the Bond policy group which are expected to be payable within the policy year will result in the available Cumulative Annual Allowance being exceeded.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "regularDrawdownId",
          "in": "path",
          "description": "The unique Composer identifier for the Regular Drawdown arrangement (regular withdrawal).",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/employer-uploads/contributions": {
      "post": {
        "tags": [
          "Workplace Scheme"
        ],
        "summary": "Employer Contribution Schedule Upload",
        "description": "A service which allows users to upload a contribution schedule of employee contribution details for an employer.",
        "operationId": "POST-employer-uploads-contributions",
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [ "data.externalBatchReference", "meta.payloadId", "meta.senderId", "data.templateId",
                  "meta.partyTypeId", "meta.partyId", "data.bulkUploadFile", "data.employerContributionScheduleId",
                "data.ddiCollectionDate", "data.paymentMethodType"],
                "properties": {
                  "meta.senderId": {
                    "description": "The unique Composer identifier used to represent the calling application.",
                    "example": "MEMBERPORTAL",
                    "type": "string"
                  },
                  "meta.payloadId": {
                    "description": "The unique Composer identifier for the payload to be able to track the submission request.",
                    "example": "353cc88e-19d8-448d-aaa5-2350df705146",
                    "type": "string"
                  },
                  "meta.user": {
                    "description": "The user who logged the request.",
                    "example": "jsmith",
                    "type": "string"
                  },
                  "meta.role": {
                    "description": "The role of the user who logged the request.",
                    "example": "Adviser",
                    "type": "string"
                  },
                  "meta.partyTypeId": {
                    "description": "The Id of the party type of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "meta.partyId": {
                    "description": "The Id of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.bulkUploadFile": {
                    "description": "The file to be uploaded in relation to the submitted request.",
                    "type": "string",
                    "format": "binary"
                  },
                  "data.templateId": {
                    "description" : "The template identifier for that to use to map the file being uploaded.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.externalBatchReference": {
                    "description": "This is an external reference which if provided will be associated to the batch run that will be created as part of this upload file processing. If the external reference is provided and it matches to a reference already associated to an existing batch run, then a new batch run entry will NOT be created and his file upload processing will be associated with that existing batch run instead.",
                    "example": "External Batch Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "data.ddiCollectionDate": {
                    "description": "The date the direct debit will be collected for contributions.",
                    "example": "2024-01-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "data.employerContributionScheduleId": {
                    "description": "The unique identifier for the employer's contribution schedule.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.adhocContributionDate": {
                    "description": "The date of an adhoc contribution.",
                    "example": "2024-01-10",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/date"
                      }
                    ]
                  },
                  "data.paymentMethodType": {
                    "description": "The method of the payment made. Potential values are: DirectDebit, DirectCredit.",
                    "example": "DirectDebit",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/paymentMethodType"
                      }
                    ]
                  },
                  "data.createMasterWorkItem": {
                    "type": "boolean",
                    "description": "This indicates whether to create a master work item for this request or not. Note that child work items will not be created even if this is false.",
                    "example": true
                  },
                  "data.ignoreFooterConfig": {
                    "type": "boolean",
                    "description": "Indicator as to whether the template footer lines configuration should be ignored. This parameter is required for third party clients who modify the file prior to processing the upload request.",
                    "example": true
                  },
                  "data.externalReference": {
                    "description": "This is a reference value relating to an external process involved in the preparation of the upload file.",
                    "example": "External Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 40
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreatedRESPONSEBatchRunId"
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/employer-uploads/joiners": {
      "post": {
        "tags": [
          "Workplace Scheme"
        ],
        "summary": "Employer Joiners Upload",
        "description": "A service which allows users to upload a file with details of new members/employees for an employer.",
        "operationId": "POST-employer-uploads-joiners",
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [ "data.externalBatchReference", "meta.payloadId", "meta.senderId", "data.templateId", "meta.partyTypeId", "meta.partyId", "data.bulkUploadFile" ],
                "properties": {
                  "meta.senderId": {
                    "description": "The unique Composer identifier used to represent the calling application.",
                    "example": "MEMBERPORTAL",
                    "type": "string"
                  },
                  "meta.payloadId": {
                    "description": "The unique Composer identifier for the payload to be able to track the submission request.",
                    "example": "353cc88e-19d8-448d-aaa5-2350df705146",
                    "type": "string"
                  },
                  "meta.user": {
                    "description": "The user who logged the request.",
                    "example": "jsmith",
                    "type": "string"
                  },
                  "meta.role": {
                    "description": "The role of the user who logged the request.",
                    "example": "Adviser",
                    "type": "string"
                  },
                  "meta.partyTypeId": {
                    "description": "The Id of the party type of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "meta.partyId": {
                    "description": "The Id of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.bulkUploadFile": {
                    "description": "The file to be uploaded in relation to the submitted request.",
                    "type": "string",
                    "format": "binary"
                  },
                  "data.templateId": {
                    "description" : "The template identifier for that to use to map the file being uploaded.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.externalBatchReference": {
                    "description": "This is an external reference which if provided will be associated to the batch run that will be created as part of this upload file processing. If the external reference is provided and it matches to a reference already associated to an existing batch run, then a new batch run entry will NOT be created and his file upload processing will be associated with that existing batch run instead.",
                    "example": "External Batch Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "data.createMasterWorkItem": {
                    "type": "boolean",
                    "description": "This indicates whether to create a master work item for this request or not. Note that child work items will not be created even if this is false.",
                    "example": true
                  },
                  "data.ignoreFooterConfig": {
                    "type": "boolean",
                    "description": "Indicator as to whether the template footer lines configuration should be ignored. This parameter is required for third party clients who modify the file prior to processing the upload request.",
                    "example": true
                  },
                  "data.externalReference": {
                    "description": "This is a reference value relating to an external process involved in the preparation of the upload file.",
                    "example": "External Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 40
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreatedRESPONSEBatchRunId"
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/employer-uploads/member-updates": {
      "post": {
        "tags": [
          "Workplace Scheme"
        ],
        "summary": "Employer Member Updates Upload",
        "description": "A service which allows users to upload a file with changes to members/employees details for an Employer.",
        "operationId": "POST-employer-uploads-member-updates",
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [ "data.externalBatchReference", "meta.payloadId", "meta.senderId", "data.templateId", "meta.partyTypeId", "meta.partyId", "data.bulkUploadFile" ],
                "properties": {
                  "meta.senderId": {
                    "description": "The unique Composer identifier used to represent the calling application.",
                    "example": "MEMBERPORTAL",
                    "type": "string"
                  },
                  "meta.payloadId": {
                    "description": "The unique Composer identifier for the payload to be able to track the submission request.",
                    "example": "353cc88e-19d8-448d-aaa5-2350df705146",
                    "type": "string"
                  },
                  "meta.user": {
                    "description": "The user who logged the request.",
                    "example": "jsmith",
                    "type": "string"
                  },
                  "meta.role": {
                    "description": "The role of the user who logged the request.",
                    "example": "Adviser",
                    "type": "string"
                  },
                  "meta.partyTypeId": {
                    "description": "The Id of the party type of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "meta.partyId": {
                    "description": "The Id of the acting party who submitted the request.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.bulkUploadFile": {
                    "description": "The file to be uploaded in relation to the submitted request.",
                    "type": "string",
                    "format": "binary"
                  },
                  "data.templateId": {
                    "description" : "The template identifier for that to use to map the file being uploaded.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "data.externalBatchReference": {
                    "description": "This is an external reference which if provided will be associated to the batch run that will be created as part of this upload file processing. If the external reference is provided and it matches to a reference already associated to an existing batch run, then a new batch run entry will NOT be created and his file upload processing will be associated with that existing batch run instead.",
                    "example": "External Batch Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "data.createMasterWorkItem": {
                    "type": "boolean",
                    "description": "This indicates whether to create a master work item for this request or not. Note that child work items will not be created even if this is false.",
                    "example": true
                  },
                  "data.ignoreFooterConfig": {
                    "type": "boolean",
                    "description": "Indicator as to whether the template footer lines configuration should be ignored. This parameter is required for third party clients who modify the file prior to processing the upload request.",
                    "example": true
                  },
                  "data.externalReference": {
                    "description": "This is a reference value relating to an external process involved in the preparation of the upload file.",
                    "example": "External Reference",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 40
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreatedRESPONSEBatchRunId"
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Product search",
        "description": "This will perform the search and retrieval of products matching the search parameters provided.",
        "operationId": "GET-product-products",
        "responses": {
          "200": {
            "description": "Operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "description": "A list of available products.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "scheme": {
                                "type": "string",
                                "description": "The name of the scheme.",
                                "example": "GBST"
                              },
                              "schemeId": {
                                "description": "The unique Composer identifier for the scheme.",
                                "example": 3,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "schemeStatus": {
                                "description": "The status of the scheme. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "productGroup": {
                                "type": "string",
                                "description": "The name of the product group.",
                                "example": "GBST Wrap Platform"
                              },
                              "productGroupId": {
                                "description": "The unique Composer identifier for the product group.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productGroupStatus": {
                                "description": "The status of the product group. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "product": {
                                "type": "string",
                                "description": "The name of the product.",
                                "example": "SIPP Uncrystallised"
                              },
                              "productStatus": {
                                "description": "The status of the product. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "id": {
                                "description": "The unique Composer identifier for the associated product.",
                                "example": 19,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productFlag": {
                                "type": "string",
                                "description": "Indicator of the product type to which the product is associated.",
                                "example": "A"
                              },
                              "productType": {
                                "description": "The name of the product type.",
                                "example": "Accumulation",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/productType"
                                  }
                                ]
                              }
                            }
                          },
                          "example": [
                            {
                              "scheme": "GBST",
                              "schemeId": 3,
                              "schemeStatus": "Active",
                              "productGroup": "GBST Wrap Platform",
                              "productGroupId": 2,
                              "productGroupStatus": "Active",
                              "product": "GBST SIPP Uncrystallised",
                              "productStatus": "Active",
                              "id": 19,
                              "productFlag": "A",
                              "productType": "Accumulation"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "productType",
          "in": "query",
          "description": "The name of the product type.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/productType"
          }
        },
        {
          "name": "trustType",
          "in": "query",
          "description": "The name of the trust type.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Discretionary"
        },
        {
          "name": "includeSubAccountProduct",
          "in": "query",
          "description": "Indicator to include Sub Account Product.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        }
      ]
    },
    "/complying-funds/search": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Complying Fund search",
        "description": "This will perform the search and retrieval of the details for complying funds matching the search parameters provided.",
        "operationId": "GET-complying-funds-search",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "complyingFunds": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for a Complying Fund.",
                                "example": 146,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the Complying Fund.",
                                "example": "International Investments Limited"
                              },
                              "status": {
                                "description": "Indicator if the Complying Fund status is ‘Active’ or ‘Inactive’",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "pensionTaxSchemeReferenceNumber": {
                                "type": "string",
                                "description": "The Complying Fund’s Pension Tax Scheme Reference Number",
                                "example": "123456"
                              },
                              "phoneNumber": {
                                "type": "string",
                                "description": "The contact phone number for the Complying Fund",
                                "example": "0417123456"
                              },
                              "electronicTransfer": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Complying Fund accepts electronic transfers",
                                "example": true
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 146,
                              "name": "International Investments Limited",
                              "status": "Active",
                              "pensionTaxSchemeReferenceNumber": "123456",
                              "phoneNumber": "0417123456",
                              "electronicTransfer": true
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique Composer identifier for a Complying Fund",
            "required": false,
            "example": 1074,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Complying Fund",
            "required": false,
            "example": "Providence Financial",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pensionTaxSchemeReferenceNumber",
            "in": "query",
            "description": "The Complying Fund’s Pension Tax Scheme Reference Number",
            "required": false,
            "example": "123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Indicator to only retrieve those Complying Funds where the status is ‘Active’",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "town",
            "in": "query",
            "description": "The town of the address associated to the Complying Fund",
            "required": false,
            "example": "New York",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postcode",
            "in": "query",
            "description": "The postcode of the address associated to the Complying Fund",
            "required": false,
            "example": "123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actingAsSchemeOwner",
            "in": "query",
            "description": "Indicator if the Complying Fund is acting as a Scheme Owner",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/institution-branches/search": {
      "get": {
        "tags": [
          "Financial Institution"
        ],
        "summary": "Institution Branch search",
        "description": "This will perform the search and retrieval of Financial Institution Branch details for those matching the search parameters provided.",
        "operationId": "GET-institution-branches-search",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "institutionBranches": {
                          "type": "array",
                          "description": "The details as held for Financial Institution Branches.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the Financial Institution Branch.",
                                "example": 15664,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "sortCode": {
                                "type": "string",
                                "description": "The sort code of the Financial Institution Branch.",
                                "example": "114727"
                              },
                              "branchName": {
                                "type": "string",
                                "description": "The branch name for the Financial Institution Branch.",
                                "example": "GRANTOWN-ON-SPEY"
                              },
                              "address": {
                                "description": "The details of the Financial Institution Branches address.",
                                "type": "object",
                                "properties": {
                                  "institutionName": {
                                    "type": "string",
                                    "description": "The name of the Financial Institution.",
                                    "example": "Bank Of England"
                                  },
                                  "propertyName": {
                                    "type": "string",
                                    "description": "The name of the property of the institution’s address.",
                                    "example": "The House"
                                  },
                                  "streetNumber": {
                                    "type": "string",
                                    "description": "The street number of the institution’s address.",
                                    "example": "25"
                                  },
                                  "street": {
                                    "type": "string",
                                    "description": "The street name of the institution’s address.",
                                    "example": "Acacia Avenue"
                                  },
                                  "prefix": {
                                    "type": "string",
                                    "description": "The actual value related to the address prefix.",
                                    "example": "CAMPUS"
                                  },
                                  "prefixType": {
                                    "type": "string",
                                    "description": "The address prefix type. The value provided will match a prefix type as configured within Composer.",
                                    "example": "CAMPUS"
                                  },
                                  "suffix": {
                                    "type": "string",
                                    "description": "The actual value related to the address suffix.",
                                    "example": "PO Box 1"
                                  },
                                  "suffixType": {
                                    "type": "string",
                                    "description": "The address suffix type. The value provided will match a prefix type as configured within Composer.",
                                    "example": "UNIT"
                                  },
                                  "district": {
                                    "type": "string",
                                    "description": "The district name of the institution’s address.",
                                    "example": "Acacialand"
                                  },
                                  "postcode": {
                                    "type": "string",
                                    "description": "The postcode of the institution’s address.",
                                    "example": "AA00 0AA"
                                  },
                                  "town": {
                                    "type": "string",
                                    "description": "The town name of the institution’s address.",
                                    "example": "Longtown"
                                  },
                                  "county": {
                                    "type": "string",
                                    "description": "The county name of the institution’s address.",
                                    "example": "Surrey"
                                  },
                                  "countryCode": {
                                    "type": "string",
                                    "description": "The country code of the institution’s address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer.",
                                    "example": "GBR"
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 15664,
                              "sortCode": "114727",
                              "branchName": "GRANTOWN-ON-SPEY",
                              "address": {
                                "institutionName": "Bank Of England",
                                "propertyName": "The House",
                                "streetNumber": "25",
                                "street": "Acacia Avenue",
                                "prefix": "CAMPUS",
                                "prefixType": "CAMPUS",
                                "suffix": "PO Box 1",
                                "suffixType": "UNIT",
                                "district": "Acacialand",
                                "postcode": "AA00 0AA",
                                "town": "Longtown",
                                "county": "Surrey",
                                "countryCode": "GBR"
                              }
                            }
                          ]
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "totalRows": {
                          "description": "The total number of rows retrieved.",
                          "example": 146,
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "domesticInstitution",
          "in": "query",
          "description": "Indicator as to whether the institution is Domestic as opposed to International.",
          "required": false,
          "example": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "institutionName",
          "in": "query",
          "description": "The name of the Financial Institution.",
          "required": false,
          "example": "Bank of England",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "branch",
          "in": "query",
          "description": "The named branch of the Financial Institution.",
          "required": false,
          "example": "London Branch",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "sortCode",
          "in": "query",
          "description": "The bank sort code of the Financial Institution and Branch.",
          "required": false,
          "example": "405114",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "offset",
          "in": "query",
          "description": "The page offset value used for pagination.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/nonNegativeInteger"
          },
          "example": 10
        },
        {
          "name": "limit",
          "in": "query",
          "description": "The number of records limit used for pagination.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 5000
        }
      ]
    },
    "/investments/search": {
      "get": {
        "tags": [
          "Investment"
        ],
        "summary": "Investment search",
        "description": "This will perform the search and retrieval of details for Investments matching the search parameters provided.",
        "operationId": "GET-investments-search",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investments": {
                          "type": "array",
                          "description": "The ability to search and obtain information for an Investment",
                          "items": {
                            "type": "object",
                            "properties": {
                              "investmentId": {
                                "description": "The unique Composer identifier for the investment.",
                                "example": 11896,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "investmentName": {
                                "type": "string",
                                "description": "The name of the Investment.",
                                "example": "SUN C 7IM AAP Adventurous C Acc"
                              },
                              "noGrowth": {
                                "type": "boolean",
                                "description": "Indicator that there is no investment growth for the investment linked to the related Product.",
                                "example": false
                              },
                              "limitOrdersAccepted": {
                                "type": "boolean",
                                "description": "Indicator as to whether investment accepts limit orders.",
                                "example": false
                              },
                              "marketOrdersAccepted": {
                                "type": "boolean",
                                "description": "Indicator as to whether investment accepts market orders.",
                                "example": false
                              },
                              "assetId": {
                                "description": "The unique Composer identifier for an Asset Holding linked to an Investment.",
                                "example": 8170,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "assetSector": {
                                "type": "string",
                                "description": "The Asset Sector linked to the Investment.",
                                "example": "GA0820"
                              },
                              "assetType": {
                                "type": "string",
                                "description": "The Asset Type linked to the Investment.",
                                "example": "OEICs"
                              },
                              "sedol": {
                                "type": "string",
                                "description": "The unique external security identifier from the Stock Exchange Daily Official List for the Investment used for clearing purposes.",
                                "example": "B2PB2C7"
                              },
                              "tidm": {
                                "type": "string",
                                "description": "The unique Tradable Instrument Display Mnemonic, which is an external short code for the Investment used to identify UK-listed shares.",
                                "example": "TIDM001"
                              },
                              "isin": {
                                "type": "string",
                                "description": "The unique external security identifier (International Securities Identification Number) for the Investment used for cross-border securities transactions.",
                                "example": "GB00B2PB2C75"
                              },
                              "ftmex": {
                                "type": "string",
                                "description": "The unique external security identifier which is used to represent managed investment funds.",
                                "example": "7IAACA"
                              },
                              "distributionChannel": {
                                "type": "string",
                                "description": "The distribution channel associated to the Investment.",
                                "example": "Platform Funds"
                              },
                              "investmentManager": {
                                "type": "string",
                                "description": "The Investment Manager linked to the Investment and Asset Holding.",
                                "example": "Unknown"
                              },
                              "citicode": {
                                "type": "string",
                                "description": "The unique external FE fund info unit identifier for the Investment.",
                                "example": "BFB9"
                              },
                              "stockcode": {
                                "type": "string",
                                "description": "The unique external identifier for the Investment used by the stock quotation scheme.",
                                "example": "STOCK001"
                              },
                              "lastKnownBuyPrice": {
                                "description": "The last known Buy Unit Price.",
                                "example": "2.249200",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "lastKnownSellPrice": {
                                "description": "The last known Sell Unit Price.",
                                "example": "2.249200",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "pricingDate": {
                                "description": "The date used in the identification of the last known Buy and Sell Units Prices.",
                                "example": "2023-02-21",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "securityExchange": {
                                "type": "string",
                                "description": "The Security Exchange code used for the Investment.",
                                "example": "ABJ"
                              },
                              "minApplicationAmount": {
                                "description": "The minimum amount accepted for an application trade.",
                                "example": "0.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "repurchaseAssetAllowed": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Cash Distribution Option of Repurchase Asset is a permitted choice.",
                                "example": false
                              },
                              "distPayAsCashAllowed": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Cash Distribution Option of Natural Income is a permitted choice.",
                                "example": false
                              },
                              "defaultDistributionMethod": {
                                "type": "string",
                                "description": "Indicator of the default method for receiving any distribution payments for those paid from the Investment.",
                                "example": "RC"
                              },
                              "investmentDisplayName": {
                                "type": "string",
                                "description": "The display name for the Investment.",
                                "example": "7IM AAP Adventurous C Acc"
                              },
                              "fundType": {
                                "type": "string",
                                "description": "The type of fund.",
                                "example": "BOOST_ALLOWED"
                              },
                              "kiidFileLocation": {
                                "type": "string",
                                "description": "The location of the KiiD (Key Investor Information Document).",
                                "example": "https://doc.morningstar.com/LatestDoc.aspx"
                              },
                              "internalFund": {
                                "type": "boolean",
                                "description": "Indicator as to whether fund is linked to an Internal Investment Manager.",
                                "example": false
                              }
                            }
                          },
                          "example": [
                            {
                              "investmentId": 11896,
                              "investmentName": "SUN C 7IM AAP Adventurous C Acc",
                              "noGrowth": false,
                              "limitOrdersAccepted": false,
                              "marketOrdersAccepted": false,
                              "assetId": 8170,
                              "assetSector": "GA0820",
                              "assetType": "OEICs",
                              "sedol": "B2PB2C7",
                              "tidm": "TIDM001",
                              "isin": "GB00B2PB2C75",
                              "ftmex": "7IAACA",
                              "distributionChannel": "Platform Funds",
                              "investmentManager": "Unknown",
                              "citicode": "BFB9",
                              "stockcode": "STOCK001",
                              "lastKnownBuyPrice": "2.249200",
                              "lastKnownSellPrice": "2.249200",
                              "pricingDate": "2023-02-21",
                              "securityExchange": "ABJ",
                              "minApplicationAmount": "0.00",
                              "repurchaseAssetAllowed": false,
                              "distPayAsCashAllowed": false,
                              "defaultDistributionMethod": "RC",
                              "investmentDisplayName": "7IM AAP Adventurous C Acc",
                              "fundType": "BOOST_ALLOWED",
                              "kiidFileLocation": "https://doc.morningstar.com/LatestDoc.aspx",
                              "internalFund": false
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investmentName",
          "in": "query",
          "description": "The name of the Investment.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "SUN C 7IM AAP Adventurous C Acc"
        },
        {
          "name": "productId",
          "in": "query",
          "description": "The unique Composer identifier for a Product.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 19
        },
        {
          "name": "assetSectorId",
          "in": "query",
          "description": "The unique Composer identifier for the Asset Sector.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 90
        },
        {
          "name": "assetTypeId",
          "in": "query",
          "description": "The unique Composer identifier for the Asset Type.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 4
        },
        {
          "name": "investmentManagerId",
          "in": "query",
          "description": "The unique Composer identifier for the Investment Manager.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 112
        },
        {
          "name": "getKiidFsi",
          "in": "query",
          "description": "Indicator as to whether or not KiiD/FSI information needs to be retrieved.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "liquid",
          "in": "query",
          "description": "Indicator as to whether the Investment is classified as liquid.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "default",
          "in": "query",
          "description": "Indicator as to whether the Investment is used as the default for a Product.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "tradingBasis",
          "in": "query",
          "description": "Indicator of the trading process used at the associated asset level. Possible Values include 'All','RealTime' and 'ValuationPoint'.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/tradingBasis"
          },
          "example": "All"
        },
        {
          "name": "fundType",
          "in": "query",
          "description": "The type of fund.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "BOOST_ALLOWED"
        },
        {
          "name": "riskLevel",
          "in": "query",
          "description": "The defined risk level for an Investment.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "1"
        },
        {
          "name": "investmentIds",
          "in": "query",
          "description": "A comma separated list of the unique Composer identifiers for all those Investments required.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "11896, 14566, 19856"
        },
        {
          "name": "gateLevelChecking",
          "in": "query",
          "description": "Indicator as to whether gate level checking applies, which restricts access to Investments.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "favouriteFund",
          "in": "query",
          "description": "Indicator as to whether the Investments associated asset has been set as a favourite.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "internalFund",
          "in": "query",
          "description": "Indicator as to whether fund is linked to a specific Investment Manager.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": false
        },
        {
          "name": "associatedAdviserId",
          "in": "query",
          "description": "The unique Composer identifier for an adviser associated to the Investment.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 1654
        },
        {
          "name": "defaultInvestmentOption",
          "in": "query",
          "description": "Indicator as whether the investment is set as the default for the related Product.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": false
        }
      ]
    },
    "/investment/asset-types": {
      "get": {
        "tags": [
          "Investment"
        ],
        "summary": "Retrieve Asset Types",
        "description": "This will perform the retrieval of asset types associated to a Product.",
        "operationId": "GET-investment-asset-types",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "assetTypes": {
                          "type": "array",
                          "description": "The different categories of asset classes.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier for the asset type.",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ],
                                "example": 64
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset type.",
                                "example": "Cash"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 64,
                              "name": "Cash"
                            },
                            {
                              "id": 67,
                              "name": "Lifestyle Funds"
                            }
                          ]
                        }
                      },
                      "description": "The asset types related to a Product."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "assetTypeStatus",
          "in": "query",
          "description": "The status of the asset type. Possible values are: Active, Inactive.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/activeInactiveStatus"
          },
          "example": "Active"
        },
        {
          "name": "productId",
          "in": "query",
          "description": "The unique Composer identifier for a Product.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 54
        }
      ]
    },
    "/investment/investment-managers": {
      "get": {
        "tags": [
          "Investment"
        ],
        "summary": "Retrieve an Investment Manager's details",
        "description": "This will perform the retrieval of an Investment Manager's details matching the parameters provided.",
        "operationId": "GET-investment-investment-managers",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "investmentManagers": {
                          "type": "array",
                          "description": "An investment manager is an entity specialising in managing assets and investments on behalf of investors.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "broker": {
                                "type": "boolean",
                                "description": "Indicator as to whether the investment manager is a broker.",
                                "example": false
                              },
                              "brokerId": {
                                "description": "The broker's unique id within Composer.",
                                "example": 2,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "counterpartyId": {
                                "description": "The counterparty's unique id within Composer.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "countryCode": {
                                "type": "string",
                                "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer.",
                                "example": "GBR"
                              },
                              "email": {
                                "type": "string",
                                "description": "The investment manager’s e-mail address.",
                                "example": "test@wrapadminsystem.co.uk"
                              },
                              "endDate": {
                                "description": "The date from which the investment manager became inactive.",
                                "example": "2011-10-20",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "entityId": {
                                "description": "The investment manager's unique entity id within Composer. This number is unique across all entities registered in Composer and so is different to the investment manager ID.",
                                "example": 990,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "externalReferences": {
                                "type": "string",
                                "description": "The external reference.",
                                "example": "EMXPROVID ART01, SWPROVID ARTEMIS"
                              },
                              "id": {
                                "description": "The unique Composer identifier for the investment manager.",
                                "example": 64,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The investment manager’s name.",
                                "example": "Unknown"
                              },
                              "postcode": {
                                "type": "string",
                                "description": "The postcode of the investment manager's address.",
                                "example": "AA00 0AA"
                              },
                              "preferredName": {
                                "type": "string",
                                "description": "The investment manager's preferred name.",
                                "example": "Cheque"
                              },
                              "prefix": {
                                "type": "string",
                                "description": "The actual value related to the address prefix.",
                                "example": "Mr"
                              },
                              "prefixType": {
                                "type": "string",
                                "description": "The address prefix type. The value provided will match a prefix type as configured within Composer.",
                                "example": "BLDNG"
                              },
                              "propertyLoanProvider": {
                                "type": "boolean",
                                "description": "Indicator as to whether the investment manager provides property loans.",
                                "example": false
                              },
                              "propertyName": {
                                "type": "string",
                                "description": "The name of the property of the investment manager's address.",
                                "example": "The House"
                              },
                              "startDate": {
                                "description": "The date from which the investment manager became active.",
                                "example": "2011-10-10",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "county": {
                                "type": "string",
                                "description": "The county name of the investment manager's address.",
                                "example": "A"
                              },
                              "status": {
                                "description": "The status of the investment manager’s account. Possible values are: Active, Inactive.",
                                "example": "Active",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/activeInactiveStatus"
                                  }
                                ]
                              },
                              "street": {
                                "type": "string",
                                "description": "The street name of the investment manager's address.",
                                "example": "Acacia Avenue"
                              },
                              "streetNumber": {
                                "type": "string",
                                "description": "The street number of the investment manager's address.",
                                "example": "25"
                              },
                              "town": {
                                "type": "string",
                                "description": "The town name of the investment manager's address.",
                                "example": "B"
                              },
                              "suffix": {
                                "type": "string",
                                "description": "The actual value related to the address suffix.",
                                "example": "7"
                              },
                              "suffixType": {
                                "type": "string",
                                "description": "The address suffix type. The value provided will match a prefix type as configured within Composer.",
                                "example": "GATE"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 64,
                              "entityId": 990,
                              "name": "ABERDEEN INVESTMENT FUNDS",
                              "preferredName": "AIF",
                              "broker": true,
                              "brokerId": 2,
                              "counterpartyId": 1,
                              "status": "Active",
                              "email": "test@wrapadminsystem.co.uk",
                              "startDate": "2011-10-10",
                              "endDate": "2011-10-20",
                              "externalReferences": "EMXPROVID ART01, SWPROVID ARTEMIS",
                              "propertyLoanProvider": false,
                              "prefixType": "BLDNG",
                              "prefix": "5",
                              "suffixType": "GATE",
                              "suffix": "7",
                              "propertyName": "The House",
                              "street": "Acacia Avenue",
                              "streetNumber": "25",
                              "town": "B",
                              "postcode": "AA00 0AA",
                              "county": "A",
                              "countryCode": "GBR"
                            }
                          ]
                        }
                      },
                      "description": "The details relating to an investment manager."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "query",
          "description": "The unique Composer identifier for the investment manager.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 165987
        },
        {
          "name": "name",
          "in": "query",
          "description": "The investment manager’s name.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Capital Investments"
        },
        {
          "name": "tradingName",
          "in": "query",
          "description": "The trading name of the investment management company.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "Capital Investments Pty Ltd"
        },
        {
          "name": "addressType",
          "in": "query",
          "description": "The type of address. Possible values are: Actual, Postal.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/addressType"
          },
          "example": "Actual"
        },
        {
          "name": "town",
          "in": "query",
          "description": "The town name of the investment manager's address.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "BATH"
        },
        {
          "name": "postcode",
          "in": "query",
          "description": "The postcode of the investment manager's address.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "BA1 7RR"
        },
        {
          "name": "propertyLoanProvider",
          "in": "query",
          "description": "Indicator as to whether the investment manager provides property loans.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": false
        },
        {
          "name": "broker",
          "in": "query",
          "description": "Indicator as to whether the investment manager is a broker.",
          "required": false,
          "schema": {
            "type": "boolean"
          },
          "example": false
        },
        {
          "name": "externalSystem",
          "in": "query",
          "description": "The external system reference.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "EMXPROVID"
        },
        {
          "name": "externalReference",
          "in": "query",
          "description": "The external reference.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "AXAUK"
        },
        {
          "name": "groupingCode",
          "in": "query",
          "description": "The Grouping Code that applies to the investment manager.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "FEE"
        },
        {
          "name": "entityId",
          "in": "query",
          "description": "The investment manager's unique entity id within Composer. This number is unique across all entities registered in Composer and so is different to the investment manager ID.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 900861110
        }
      ]
    },
    "/investment/purchase-requests" : {
      "post" : {
        "tags" : [ "Investment" ],
        "summary": "Create a Purchase Request",
        "description" : "This will submit a request to purchase units within an investment.",
        "operationId" : "POST-investment-purchase-request",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "data" : {
                    "type" : "object",
                    "properties" : {
                      "investorAccountId" : {
                        "description" : "The unique Composer identifier for an Investor Account associated to the purchase request.",
                        "example" : 70824342,
                        "allOf": [{
                          "$ref": "#/components/schemas/identifier"
                        }]
                      },
                      "purchaseRequest" : {
                        "type" : "object",
                        "description" : "The details of the purchase request.",
                        "properties" : {
                          "investments" : {
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "required": ["investmentId"],
                              "properties" : {
                                "investmentId" : {
                                  "description" : "The unique Composer identifier for an Investment.",
                                  "example" : 637,
                                  "allOf" : [{
                                    "$ref" : "#/components/schemas/identifier"
                                  }]
                                },
                                "amount" : {
                                  "description" : "The amount for the purchase request associated to an Investment.",
                                  "example" : "0.2",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "units" : {
                                  "description" : "The number of units for the purchase request associated to an Investment.",
                                  "example" : "1.00",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                }
                              }
                            }
                          }
                        },
                        "example": {
                          "investments": [
                            {
                              "investmentId": 4637,
                              "amount": "1520.53",
                              "units": "754.236854"
                            },
                            {
                              "investmentId": 98857,
                              "amount": "6375.25",
                              "units": "3586.235741"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "meta" : {
                    "type" : "object",
                    "required": ["processName", "payloadId"],
                    "properties" : {
                      "processName" : {
                        "type" : "string",
                        "description" : "The name of the process associated to this event.",
                        "example" : "APP_REQUEST"
                      },
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request. ",
                        "example" : "809d326d-0ee7-4840-a011-8831872c6074",
                        "maxLength": 50
                      },
                      "sender" : {
                        "type" : "object",
                        "required": ["senderId"],
                        "properties" : {
                          "senderId" : {
                            "type" : "string",
                            "description" : "The unique Composer identifier used to represent the calling application.",
                            "example" : "MEMBERPORTAL"
                          },
                          "role" : {
                            "type" : "string",
                            "description" : "The role of the user who logged the request.",
                            "example" : "Investor"
                          },
                          "partyType" : {
                            "description" : "The unique identifier for party type of the acting party who submitted the request.",
                            "example" : "InvestorAccount",
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/partyTypeForWIMT"
                            } ]
                          },
                          "partyId" : {
                            "description" : "The unique identifier for the acting party who submitted the request.",
                            "example" : 21696906,
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/identifier"
                            } ]
                          },
                          "adviceGiven" : {
                            "type" : "boolean",
                            "description" : "Indicator as to whether advice was given for this event.",
                            "example" : true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "workItemId" : {
                          "description" : "The unique Composer identifier of the work item created for this request.",
                          "allOf" : [ {
                            "$ref" : "#/components/schemas/identifier"
                          } ],
                          "example": 6597412
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Operation is bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/400BadRequestRESPONSE"
                  }, {
                    "$ref" : "#/components/schemas/AccessTokenError"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/investment/sale-requests": {
      "post": {
        "tags": [
          "Investment"
        ],
        "description": "This will submit a request to sell units held within an investment.",
        "summary": "Create a Sale Request",
        "operationId": "POST-investment-sale-requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "object",
                    "required": ["investorAccountId"],
                    "properties": {
                      "investorAccountId": {
                        "description": "The unique Composer identifier for an Investor Account associated to the sale request.",
                        "example": 70824011,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ]
                      },
                      "saleRequest": {
                        "type": "object",
                        "description": "The details of the sale.",
                        "properties": {
                          "investments": {
                            "type": "array",
                            "description": "Investment details for the sale request.",
                            "items": {
                              "type": "object",
                              "required": [
                                "investmentId"
                              ],
                              "oneOf" : [
                                {"required": ["amount"]},
                                {"required": ["units"]}
                              ],
                              "properties": {
                                "investmentId": {
                                  "description": "The unique Composer identifier for an Investment.",
                                  "example": 638,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/identifier"
                                    }
                                  ]
                                },
                                "units": {
                                  "description": "The number of units for the sale request associated to an Investment.",
                                  "example": "10",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                },
                                "generateOrders": {
                                  "type": "boolean",
                                  "description": "Indicator for how a request to purchase or sell an asset is treated.\n\nY = Request will be processed directly, producing an Order Request.",
                                  "example": true
                                },
                                "amount": {
                                  "description": "The amount for the sale request associated to an Investment.",
                                  "example": "10",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimal"
                                    }
                                  ]
                                },
                                "redeemToExternalSystem": {
                                  "type": "boolean",
                                  "description": "Indicator as to whether the redemption will be made to an external system.",
                                  "example": true
                                },
                                "cashReservePurpose": {
                                  "type": "string",
                                  "description": "The Cash Reserve Purpose that applies to the sale request. This must match a Cash Reserve Purpose as configured in Composer.",
                                  "enum": [
                                    "IddPayments",
                                    "FeesAndDisbursements",
                                    "RddPayments",
                                    "BenefitCalculations",
                                    "PurchaseRequests",
                                    "Other",
                                    "FxTransfer",
                                    "DistributeNaturalIncome",
                                    "SubAccountInvestment",
                                    "Conversionequests",
                                    "InterAccountSwitch",
                                    "SinglePayments",
                                    "AdHocWithdrawal"
                                  ],
                                  "example": "IDD Payments",
                                  "nullable": true
                                }
                              }
                            }
                          }
                        },
                        "example": {
                          "investments": [
                            {
                              "investmentId": 4637,
                              "units": "754.236854",
                              "generateOrders": true,
                              "amount": "1520.53",
                              "percentage": "74.25",
                              "redeemToExternalSystem": true
                            },
                            {
                              "investmentId": 98857,
                              "units": "58.546924",
                              "generateOrders": true,
                              "amount": "6375.25",
                              "percentage": "22.75",
                              "redeemToExternalSystem": true
                            }
                          ]
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "processName",
                      "payloadId"
                    ],
                    "properties": {
                      "processName": {
                        "type": "string",
                        "description": "The name of the process associated to this event.",
                        "example": "RED_REQUEST"
                      },
                      "payloadId": {
                        "type": "string",
                        "description": "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example": "6d733d72-d02f-49c3-8499-2ac23760fe2f"
                      },
                      "sender": {
                        "type": "object",
                        "required": [
                          "senderId"
                        ],
                        "properties": {
                          "senderId": {
                            "description": "The unique Composer identifier used to represent the calling application.",
                            "example": "COMPOSERWEB",
                            "type": "string"
                          },
                          "role": {
                            "type": "string",
                            "description": "The role of the user who logged the request.",
                            "example": "Adviser"
                          },
                          "partyType" : {
                            "description" : "The unique identifier for party type of the acting party who submitted the request.",
                            "example" : "InvestorAccount",
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/partyTypeForWIMT"
                            } ]
                          },
                          "partyId": {
                            "description": "The unique identifier for the acting party who submitted the request.",
                            "example": 70824011,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "adviceGiven": {
                            "type": "boolean",
                            "description": "Indicator as to whether advice was given for this event.",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workItemId": {
                          "description": "The unique work item id associate to the request.",
                          "example": 8096,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/investment/switch-requests" : {
      "post" : {
        "tags" : [ "Investment" ],
        "summary": "Create a Switch Request",
        "description" : "This will provide the ability to switch investments by creating the requests to sell out of and purchase into the nominated investments.",
        "operationId" : "POST-investment-switch-requests",
        "requestBody" : {
          "description" : "The information required for the switch request.",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "data" : {
                    "description" : "The required data.",
                    "required": ["investorAccountId"],
                    "type" : "object",
                    "properties" : {
                      "investorAccountId" : {
                        "description" : "The unique Composer identifier for an Investor Account associated to the switch request.",
                        "example" : 70824519,
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/identifier"
                        } ]
                      },
                      "switches" : {
                        "type" : "array",
                        "items" : {
                          "description" : "The details of the switch.",
                          "type" : "object",
                          "required": ["fromInvestments","toInvestments"],
                          "properties" : {
                            "fromInvestments" : {
                              "type" : "array",
                              "items" : {
                                "required": ["investmentId"],
                                "oneOf" : [
                                  {"required": ["currencyAmount"]},
                                  {"required": ["unitAmount"]}
                                ],
                                "type" : "object",
                                "description" : "Details of the investments to switch from.",
                                "properties" : {
                                  "investmentId" : {
                                    "description" : "The unique Composer identifier for the investment.",
                                    "example" : 15426,
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/identifier"
                                    } ]
                                  },
                                  "currencyAmount" : {
                                    "description" : "The currency amount to be switched from the investment.",
                                    "example" : "100.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "unitAmount" : {
                                    "description" : "The unit amount to be switched from the investment.",
                                    "example" : "10.000000",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "cashDistributionOption" : {
                                    "description" : "This is default distribution method for the investment.",
                                    "example" : "DC",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/cashDistributionOption"
                                    } ]
                                  }
                                }
                              }
                            },
                            "toInvestments" : {
                              "type" : "array",
                              "items" : {
                                "required": ["investmentId"],
                                "oneOf" : [
                                  {"required": ["percentageAmount"]},
                                  {"required": ["currencyAmount"]},
                                  {"required": ["unitAmount"]}
                                ],
                                "type" : "object",
                                "description" : "Details of the investments to switch to.",
                                "properties" : {
                                  "investmentId" : {
                                    "description" : "The unique Composer identifier for the investment.",
                                    "example" : 44519,
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/identifier"
                                    } ]
                                  },
                                  "percentageAmount" : {
                                    "description" : "The percentage amount to be switched from the investment.",
                                    "example" : "100.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/percentage"
                                    } ]
                                  },
                                  "currencyAmount" : {
                                    "description" : "The currency amount to be switched from the investment.",
                                    "example" : "1250.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "unitAmount" : {
                                    "description" : "The unit amount to be switched from the investment.",
                                    "example" : "10.000000",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "cashDistributionOption" : {
                                    "description" : "This is default distribution method for the investment.",
                                    "example" : "DC",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/cashDistributionOption"
                                    } ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "example": [
                          {
                            "fromInvestments": [
                              {
                                "investmentId": 15246,
                                "percentageAmount": "10.00",
                                "currencyAmount": "100.00",
                                "unitAmount": "10.000000",
                                "cashDistributionOption": "DC"
                              },
                              {
                                "investmentId": 85121,
                                "percentageAmount": "7.00",
                                "currencyAmount": "548.00",
                                "unitAmount": "5.9860000",
                                "cashDistributionOption": "DC"
                              }
                            ],
                            "toInvestments": [
                              {
                                "investmentId": 44519,
                                "percentageAmount": "100.00",
                                "currencyAmount": "1250.00",
                                "unitAmount": "10.000000",
                                "cashDistributionOption": "DC"
                              },
                              {
                                "investmentId": 98654,
                                "percentageAmount": "20.00",
                                "currencyAmount": "1689.55",
                                "unitAmount": "14.674158",
                                "cashDistributionOption": "DC"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "meta" : {
                    "type" : "object",
                    "required": ["processName","payloadId"],
                    "description" : "The required details for the meta.",
                    "properties" : {
                      "processName" : {
                        "type" : "string",
                        "description" : "The name of the process associated to this event.",
                        "example" : "EXIST_ACCOUNT_SWITCH"
                      },
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "809d326d-0ee7-4840-a011-8831872c6074"
                      },
                      "sender" : {
                        "type" : "object",
                        "required": ["senderId"],
                        "description" : "The required details of the sender.",
                        "properties" : {
                          "senderId" : {
                            "type" : "string",
                            "description" : "The unique Composer identifier used to represent the calling application.",
                            "example" : "MEMBERPORTAL"
                          },
                          "role" : {
                            "type" : "string",
                            "description" : "The role of the user who logged the request.",
                            "example" : "Adviser"
                          },
                          "partyType" : {
                            "description" : "The unique identifier for party type of the acting party who submitted the request.",
                            "example" : "InvestorAccount",
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/partyTypeForWIMT"
                            } ]
                          },
                          "partyId" : {
                            "description" : "The unique identifier for the acting party who submitted the request.",
                            "example" : 1,
                            "allOf" : [ {
                              "$ref" : "#/components/schemas/identifier"
                            } ]
                          },
                          "adviceGiven" : {
                            "type" : "boolean",
                            "description" : "Indicator as to whether advice was given for this event.",
                            "example" : true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Resource was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workItemId": {
                          "description" : "Response on successful creation of the resource",
                          "example" : 8795,
                          "allOf" : [ {
                            "$ref" : "#/components/schemas/identifier"
                          } ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-items/search": {
      "get": {
        "tags": [
          "Work Item"
        ],
        "summary": "Work Item search",
        "description": "This will perform the search and retrieval of work items matching the search parameters provided.",
        "operationId": "GET-work-item-search-work-items",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workItems": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The unique Composer identifier of the work item held in Composer.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "amount": {
                                "type": "string",
                                "description": "The payment amount associated to the work item.",
                                "example": "5222.00"
                              },
                              "workItemType": {
                                "type": "string",
                                "description": "The type of the work item.",
                                "example": "New Business"
                              },
                              "processType": {
                                "type": "string",
                                "description": "The type of processing that will be initiated by the selected work item.",
                                "example": "MasterWorkItem",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/processType"
                                  }
                                ]
                              },
                              "partyTypeName": {
                                "description": "The name of the party type associated to the work item.",
                                "example": "Investor Account",
                                "type": "string"
                              },
                              "partyTypeId": {
                                "description": "The unique Composer identifier for the Party Type against which the work item is associated.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "entityId": {
                                "description": "The unique Composer identifier for the entity to which the work item relates.",
                                "example": 996,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "status": {
                                "type": "string",
                                "description": "The status of the work item. Possible values are: Entered, Open, Checking, Suspended, Waiting Verification, Closed, Cancelled.",
                                "example": "Closed",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/workItemStatus"
                                  }
                                ]
                              },
                              "receivedMethod": {
                                "type": "string",
                                "description": "The method by which the work item was received. Possible values are: Mail, Web, Personal, DataFile, Telephone, Email, Fax.",
                                "example": "Mail",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/receivedMethod"
                                  }
                                ]
                              },
                              "receivedDatetime": {
                                "description": "The date and time the work item was created.",
                                "example": "2021-12-20T04:11:34",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/dateTime"
                                  }
                                ]
                              },
                              "inOut": {
                                "type": "string",
                                "description": "Indicates if the work item type is incoming or outgoing.",
                                "example": "In",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/inOutFlag"
                                  }
                                ]
                              },
                              "partyId": {
                                "description": "The unique Composer identifier for the Party against which the work item is associated.",
                                "example": 8,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "name": {
                                "type": "string",
                                "description": "The entity's surname.",
                                "example": "Jones"
                              },
                              "givenNames": {
                                "type": "string",
                                "description": "The entity's forename and any middle names.",
                                "example": "Investor # 996"
                              },
                              "childWorkItems": {
                                "description": "The child work items associated to a master work item.",
                                "type": "integer",
                                "example": 3
                              },
                              "externalReferences": {
                                "type": "array",
                                "description": "The external references.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "externalSystem": {
                                      "type": "string",
                                      "description": "The description for the external system.",
                                      "example": "EXTCLNTREF"
                                    },
                                    "externalReference": {
                                      "type": "string",
                                      "description": "The external system's reference number.",
                                      "example": "A239856"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 1,
                              "amount": "5222.00",
                              "workItemType": "New Business",
                              "processType": "MasterWorkItem",
                              "partyTypeName": "Investor Account",
                              "partyTypeId": 1,
                              "entityId": 996,
                              "status": "Closed",
                              "receivedMethod": "Mail",
                              "receivedDatetime": "2021-12-20T04:11:34",
                              "inOut": "In",
                              "partyId": 8,
                              "name": "Jones",
                              "givenNames": "Investor # 996",
                              "childWorkItems": 3,
                              "externalReferences": [
                                {
                                  "externalSystem": "EXTCLNTREF",
                                  "externalReference": "AB097232"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "workItemId",
            "in": "query",
            "description": "The unique Composer identifier of the work item held in Composer.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "workItemTypeId",
            "in": "query",
            "description": "The unique Composer identifier of the work item type.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of the work item. Possible values are: Entered, Open, Checking, Suspended, Waiting Verification, Closed, Cancelled.",
            "required": false,
            "example": "Open",
            "schema":
            {
              "$ref": "#/components/schemas/workItemStatus"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "The unique Composer identifier for the entity to which the work item relates.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            },
            "example": 13268597
          },
          {
            "name": "partyType",
            "in": "query",
            "description": "The type of party associated with the work item.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/partyType"
            },
            "example": "Investor"
          },
          {
            "name": "partyId",
            "in": "query",
            "description": "The unique Composer identifier for the Party against which the work item is associated.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            },
            "example": 16548956
          },
          {
            "name": "inOut",
            "in": "query",
            "description": "Indicates if the work item type is incoming or outgoing.",
            "required": false,
            "example": "In",
            "schema": {
              "$ref": "#/components/schemas/inOutFlag"
            }
          },
          {
            "name": "receivedMethod",
            "in": "query",
            "description": "The method by which the work item was received. Possible values are: Mail, Web, Personal, DataFile, Telephone, Email, Fax.",
            "required": false,
            "example": "Mail",
            "schema": {
              "$ref": "#/components/schemas/receivedMethod"
            }
          },
          {
            "name": "batchId",
            "in": "query",
            "description": "The unique Composer identifier for the Batch against which the work item is associated.",
            "required": false,
            "example": 1876,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "receivedDate",
            "in": "query",
            "description": "The date the work item was created.",
            "required": false,
            "example": "2023-09-23",
            "schema": {
              "$ref": "#/components/schemas/date"
            }
          },
          {
            "name": "productTypeId",
            "in": "query",
            "description": "The unique Composer identifier for the Product against which the work item is associated.",
            "required": false,
            "example": 53,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "oldSystemReference",
            "in": "query",
            "description": "Option to add a relevant old system reference to the work item.",
            "required": false,
            "example": "WORKITEMREF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processType",
            "in": "query",
            "description": "The type of processing that will be initiated by the selected work item.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/processType"
            },
            "example": "PartyMaintenance"
          }
        ]
      }
    },
    "/work-items": {
      "post": {
        "tags": [
          "Work Item"
        ],
        "summary": "Create a Work Item",
        "description": "To be able to perform and track the processing of a Composer business function a work item is required to be created from which that process will be driven.\n\nThis will create a work item.\n\nData required to be provided includes the details of the Composer party against which the action is to affect, payment detials if related to incoming monies, and the pre-requisite of identifying and providing the work item type identifier of those available for the party and defined to Composer.",
        "operationId": "POST-work-item-work-items",
        "requestBody": {
          "description": "Creates a work item in Composer.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "adviceGiven": {
                    "description": "Indicator as to whether advice was given for this event.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "basisOfSale": {
                    "description": "The basis of sale. Potential Values are: Advised, Independent, Restricted, Simplified, Execution Only, No Advice.",
                    "example": "NoAdvice",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/basisOfSale"
                      }
                    ]
                  },
                  "cashWarning": {
                    "description": "Indicator as to whether a cash warning was provided to the investor.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "cashWarningConfirmed": {
                    "description": "Indicator as to whether a cash warning was accepted.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "commitWorkItem": {
                    "description": "Indicator as to whether the work item is to be committed.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "defaultSystemCurrency": {
                    "type": "string",
                    "description": "The currency of the reference amount where entered. The value provided must match a currency as configured in Composer.",
                    "example": "GBP"
                  },
                  "entityId": {
                    "description": "The unique Composer identifier for the entity to which the work item relates.",
                    "example": 3843,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifierWithNullable"
                      }
                    ]
                  },
                  "givenNames": {
                    "description": "The entity's forename and any middle names.",
                    "example": "Adam Husker",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ]
                  },
                  "hideNotationOnWeb": {
                    "description": "Indicator as to whether the work item notes are to be displayed on the web.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ],
                    "example": true
                  },
                  "masterWorkItemId": {
                    "description": "The 'master' work item of which this work item is a 'child'. Only relevant if this work item is a 'child'.",
                    "example": 43127,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifierWithNullable"
                      }
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The entity's surname.",
                    "example": "Williams"
                  },
                  "notation": {
                    "description": "Option to add any relevant notes to the work item.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ],
                    "example": "Awaiting clients address verification"
                  },
                  "oldSystemReference": {
                    "description": "Option to add a relevant old system reference to the work item. ",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ],
                    "example": "SYS123"
                  },
                  "overrideRelatedWorkItemWarning": {
                    "description": "Indicator as to whether the related work item warning is to be overridden.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "partyId": {
                    "description": "The unique Composer identifier for the Party against which the work item is associated.",
                    "example": 3960,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "partyType": {
                    "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                    "example": "InvestorAccount",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/partyType"
                      }
                    ]
                  },
                  "paymentDetails": {
                    "type": "array",
                    "description": "Payment details of that accompanying the work item request.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "paymentType": {
                          "type": "string",
                          "description": "The payment type of the payment associated to the work item. The value provided must match a payment type as configured within Composer.",
                          "example": "D"
                        },
                        "paymentCurrency": {
                          "description": "The currency of the payment associated to the work item. The value provided must match a currency as configured in Composer.",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/stringWithNullable"
                            }
                          ],
                          "example": "GBP"
                        },
                        "amount": {
                          "description": "The payment amount associated to the work item.",
                          "example": "5000.00",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/decimal"
                            }
                          ]
                        },
                        "sortCode": {
                          "description": "The bank sort code that the payment associated to the work item will be paid to.",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/stringWithNullable"
                            }
                          ],
                          "example": "11111"
                        },
                        "drawerName": {
                          "type": "string",
                          "description": "The drawer name (payer name) of the payment associated to the work item.",
                          "example": "R Mono"
                        },
                        "referenceNumber": {
                          "type": "string",
                          "description": "The reference number of the payment associated to the work item.",
                          "example": "12345678"
                        }
                      }
                    },
                    "example": [
                      {
                        "paymentType": "D",
                        "paymentCurrency": "GBP",
                        "amount": "5000.00",
                        "sortCode": "11111",
                        "drawerName": "R Mono",
                        "referenceNumber": "12345678"
                      }
                    ]
                  },
                  "processInBatchMode": {
                    "description": "Indicator as to whether the work item can only be processed via a dedicated batch process and not manually.",
                    "example": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/booleanWithNullable"
                      }
                    ]
                  },
                  "productId": {
                    "description": "The unique Composer identifier for the Product associated to the work item.",
                    "example": 68,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifierWithNullable"
                      }
                    ]
                  },
                  "reassociateWorkItemId": {
                    "description": "The unique Composer identifier of an existing Work Item from which the payment details will be reassociated from that to this one being created with the existing then being cancelled.",
                    "example": 548,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifierWithNullable"
                      }
                    ]
                  },
                  "receivedDateTime": {
                    "description": "The date the work item was created.",
                    "example": "2020-07-02T08:30:00.000",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/dateTimeWithNullable"
                      }
                    ]
                  },
                  "receivedMethod": {
                    "description": "The work item method. Possible values are: Mail, Web, Personal, DataFile, Telephone, Email, Fax.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ],
                    "example": "Mail"
                  },
                  "referenceAmount": {
                    "description": "The reference amount (for external use) for the work item.",
                    "example": "100.00",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/decimalWithNullable"
                      }
                    ]
                  },
                  "referenceCurrency": {
                    "description": "The currency of the reference amount where entered. The value provided must match a currency as configured in Composer.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ],
                    "example": "USD"
                  },
                  "referenceNumber": {
                    "description": "The reference number (e.g. the sender's reference).",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ],
                    "example": "1232TFC"
                  },
                  "relatedWorkItemId": {
                    "description": "The unique Composer identifier of the work item of which this work item is related to.",
                    "example": 43127,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifierWithNullable"
                      }
                    ]
                  },
                  "status": {
                    "description": "The status of the work item. Possible values are: Entered, Open, Checking, Suspended, Waiting Verification, Closed, Cancelled,",
                    "example": "Checking",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/stringWithNullable"
                      }
                    ]
                  },
                  "workItemTypeId": {
                    "description": "The unique Composer identifier of the work item type.",
                    "example": 759,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "externalReferences": {
                    "type": "array",
                    "description": "External references from multiple external systems such as external workflow system, external CRM system or external back-office system.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalReference": {
                          "type": "string",
                          "description": "External reference.",
                          "example": "A1000"
                        },
                        "externalSystem": {
                          "type": "string",
                          "description": "External system.",
                          "example": "EXTCRMREF"
                        }
                      }
                    },
                    "example": [
                      {
                        "externalReference": "ABC",
                        "externalSystem": "EXTCRMREF"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-items/{workItemId}/accept": {
      "post": {
        "tags": [
          "Work Item"
        ],
        "summary": "Accept a Work Item",
        "description": "Once a work item has been processed and reached the status of Checking, in order to complete processing and thereby setting any data updates/modifications and transactions created as a result of the processing to be active, the work item must be 'Accepted'.\n\nThis provides the ability to perform this action to complete and finalise the results of all associated processing.",
        "operationId": "POST-work-items-{workitemid}-accept",
        "requestBody": {
          "description": "Parameters controlling the throwing of validation warnings possibly generated as part of the acceptance processing.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "overrideClosedInvestmentWarning": {
                    "type": "boolean",
                    "description": "Indicator as to whether the Closed Investment Warning is to be overridden.",
                    "example": true
                  },
                  "overrideUnprocessedExpectationWarning": {
                    "type": "boolean",
                    "description": "Indicator as to whether the Unprocessed Expectation Warning is to be overridden.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "workItemId",
          "in": "path",
          "description": "The unique Composer identifier of the work item held in Composer.",
          "required": true,
          "example": 8756,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/work-items/{workItemId}/reject": {
      "post": {
        "tags": [
          "Work Item"
        ],
        "summary": "Reject a Work Item",
        "description": "Once a work item has been processed and reached the status of Checking the options are to either complete processing and finalise the results of all associated processing OR reject to be able to undo and reverse the results of any data modifications or record creation and returning state to that as it was prior to processing.\n\nThis provides the ability to perform this action to reject that performed as a result of processing of this work item and return the state back to that prior to processing enabling the option to redo.",
        "operationId": "POST-work-items-{workitemid}-reject",
        "requestBody": {
          "content": {
            "application/json": {
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "workItemId",
          "in": "path",
          "description": "The unique Composer identifier of the work item held in Composer.",
          "required": true,
          "example": 8756,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/work-item-attachments/{id}": {
      "get": {
        "tags": [
          "Work Item"
        ],
        "summary": "Retrieve a Work Item attachment",
        "description": "This will retrieve the details for an attachment associated to a work item.",
        "operationId": "GET-work-item-attachments-{id}",
        "responses": {
          "200": {
            "description": "Operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The unique Composer identifier of the work item attachment held in Composer.",
                          "example": "96367-1",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/workItemAttachmentId"
                            }
                          ]
                        },
                        "attachmentNo": {
                          "type": "integer",
                          "description": "The number of the attachment.",
                          "example": 1
                        },
                        "attachmentType": {
                          "type": "string",
                          "description": "The type of attachment.",
                          "example": "ContributionUploadFile"
                        },
                        "emailNotificationStatus": {
                          "type": "string",
                          "description": "The status of the email notification.",
                          "example": "Pending"
                        },
                        "dmsStatus": {
                          "type": "string",
                          "description": "The status of the document management system.",
                          "example": "Pending"
                        },
                        "numberOfRetriesForDms": {
                          "type": "integer",
                          "description": "The number of retries for the document management system.",
                          "example": 0
                        },
                        "dmsErrorMessage": {
                          "type": "string",
                          "description": "The document management system error message.",
                          "example": "DMS Storage failed"
                        },
                        "attachmentPath": {
                          "type": "string",
                          "description": "The location of the attachment.",
                          "example": "Z:\\bulk_transfer_in"
                        },
                        "attachmentName": {
                          "type": "string",
                          "description": "The name of the attachment.",
                          "example": "1_20092023153229__MCA_PP_DTPPNM_PT_ATPDA_BD20230913_DI3_.txt"
                        },
                        "contentType": {
                          "type": "string",
                          "description": "The type of content for the work item attachment.",
                          "example": "application/json"
                        },
                        "emailNotifyErrorMessage": {
                          "type": "string",
                          "description": "The email notification error message.",
                          "example": "Email notification error"
                        },
                        "externalDmsId": {
                          "type": "string",
                          "description": "The unique identifier of the external document management system held in Composer.",
                          "example": "1234"
                        },
                        "templateId": {
                          "description": "The unique Composer identifier of the template held in Composer.",
                          "example": 1,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The unique Composer identifier of the work item attachment held in Composer.",
          "required": true,
          "example": "8752-1",
          "schema": {
            "$ref": "#/components/schemas/workItemAttachmentId"
          }
        }
      ]
    },
    "/work-items/{workItemId}/attachments": {
      "post": {
        "tags": [
          "Work Item"
        ],
        "summary": "Create a Work Item attachment",
        "description": "This will associate an attachment to a work item.",
        "operationId": "POST-work-items-{workItemId}-attachments",
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "oneOf" : [
                  {"required": ["attachmentFile"]},
                  {"required": ["attachmentData"]},
                  {"required": ["externalDmsId"]}
                ],
                "properties": {
                  "templateId": {
                    "description": "The unique Composer identifier of the template held in Composer.",
                    "example": 32165,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "attachmentFile": {
                    "description": "The file to be attached to the work item.",
                    "type": "string",
                    "format": "binary"
                  },
                  "attachmentData": {
                    "description": "The attachment data.",
                    "type": "string",
                    "example": "Attachment data value"
                  },
                  "attachmentName": {
                    "description": "The name of the attachment.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "sample.json"
                  },
                  "attachmentType": {
                    "description": "The type of attachment. Possible values are: RedemptionQuoteAdvice, ContributionUploadFile, Document, EtpPrepaymentSummary.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/attachmentType"
                      }
                    ],
                    "example": "Document"
                  },
                  "dmsStatus": {
                    "description": "The DMS status. Possible values are: Pending, SentToDms, U, Error, InProcess.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/attachmentDmsStatus"
                      }
                    ],
                    "example": "Pending"
                  },
                  "externalDmsId": {
                    "description": "The external DMS reference.",
                    "type": "string",
                    "example": "EXTDocRef01"
                  },
                  "attachmentPath": {
                    "description": "The document name.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "X:\\"
                  },
                  "contentType": {
                    "description": "The type of content.",
                    "type": "string",
                    "maxLength": 40,
                    "example": "JSON"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreatedRESPONSE"
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request"
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "workItemId",
          "in": "path",
          "description": "The unique Composer identifier of the work item held in Composer.",
          "required": true,
          "example": 76123,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/master-work-items": {
      "post": {
        "tags": [
          "Work Item"
        ],
        "summary": "Create Master Work Item with optional child",
        "description": "To be able to track the process of a Composer business function that is requested via the mediator, a master work item is required to be created from which that process will be driven.\nThis will create a master work item and, optionally, a child work item.\nThe data required to be provided includes the details of the Composer party against which the action is to be taken and the process name for identifying the work item type applicable for that process.",
        "operationId": "POST-master-work-items",
        "requestBody": {
          "description": "Create a new master work item with the option of also creating and associated child work item.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "processName",
                      "partyType",
                      "partyId",
                      "notation"],
                    "properties": {
                      "processName": {
                        "description": "Name of the business process to identify the master work item type that is configured under the reference code CBIS_CTYPE_MASTER and if required, the child work item type that is configured under the reference code CBIS_CTYPE_CHILD.",
                        "example": "ADHOCWITHDRAWL"
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/WIMTPartyType"
                          }
                        ]
                      },
                      "partyId": {
                        "description": "The unique Composer identifier for the Party against which the work item is associated.",
                        "example": 3960,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ]
                      },
                      "notation": {
                        "type": "string",
                        "description": "Option to add any relevant notes to the work item.",
                        "example": "Awaiting clients address verification"
                      },
                      "masterPartyExternalReferences": {
                        "type": "array",
                        "description": "A list of external references that will be created against the master work item.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "externalReference": {
                              "type": "string",
                              "description": "External system of an external reference that must be a valid value configured under the reference code EXTERNAL_SYSTEM_TYPE, qualified by the work item party type.",
                              "example": "ABCO001"
                            },
                            "externalSystem": {
                              "type": "string",
                              "description": "The value of an external reference. Whether the external system and reference combination must be unique will depend on the system configuration (reference code EXTERNAL_SYS_UNIQUE).",
                              "example": "ABCO"
                            }
                          }
                        },
                        "example": [
                          {
                            "externalReference": "AS10987",
                            "externalSystem": "SFORCE"
                          },
                          {
                            "externalReference": "09876Z",
                            "externalSystem": "BWARE"
                          }
                        ]
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "properties": {
                      "createChildWorkItem": {
                        "type": "boolean",
                        "description": "Indicate that a child work item will be created along with the master work item.",
                        "example": true
                      },
                      "childPartyExternalReferences": {
                        "type": "array",
                        "description": "A list of external references that will be created against the child work item.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "externalReference": {
                              "type": "string",
                              "description": "External system of an external reference that must be a valid value configured under the reference code EXTERNAL_SYSTEM_TYPE, qualified by the work item party type.",
                              "example": "ABCO001"
                            },
                            "externalSystem": {
                              "type": "string",
                              "description": "The value of an external reference. Whether the external system and reference combination must be unique will depend on the system configuration (reference code EXTERNAL_SYS_UNIQUE).",
                              "example": "ABCO"
                            }
                          }
                        },
                        "example": [
                          {
                            "externalReference": "1000R",
                            "externalSystem": "SFORCE"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MasterWorkItemCreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/investors/{investorId}/individual-personal-details": {
      "patch": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Update Investor Personal Details",
        "description": "This will update an individual investor's personal details. Only those properties provided within the request body will be those upated. This endpoint is that of '/investors/{investorId}/investor-account-balances' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "PATCH-work-item-managed-tasks-investors-{investorid}-individual-personal-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The Investor's surname.",
                        "example": "Monohan",
                        "nullable": true
                      },
                      "givenNames": {
                        "type": "string",
                        "description": "The Investor's forename and any middle names.",
                        "example": "Rich",
                        "nullable": true
                      },
                      "shortName": {
                        "type": "string",
                        "description": "The Investor's short name.",
                        "example": "Mono",
                        "nullable": true
                      },
                      "salutation": {
                        "type": "string",
                        "description": "The Investor's salutation.",
                        "example": "Captain Monohan",
                        "nullable": true
                      },
                      "gender": {
                        "type": "string",
                        "description": "The Investor's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                        "enum": [
                          "Female",
                          "Male",
                          "NotDisclosed",
                          "Unknown"
                        ],
                        "example": "Male",
                        "nullable": true
                      },
                      "clientType": {
                        "type": "string",
                        "description": "The Investor's client type. The value provided must match a client type as configured within Composer.",
                        "example": "Retail",
                        "nullable": true
                      },
                      "birthdate": {
                        "description": "The Investor's date of birth.",
                        "example": "1954-07-04",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "birthplace": {
                        "type": "string",
                        "description": "The Investor's place of birth.",
                        "example": "Melbourne",
                        "nullable": true
                      },
                      "birthCountryCode": {
                        "type": "string",
                        "description": "The Investor's birth country in the ISO alpha-3 three-letter code format. The value provided must match a country code as configured within Composer and is used in FATCA reporting.",
                        "example": "AUS",
                        "nullable": true
                      },
                      "email": {
                        "type": "string",
                        "description": "The Investor's e-mail address.",
                        "example": "mne@home.com",
                        "nullable": true
                      },
                      "homePhone": {
                        "type": "string",
                        "description": "The Investor's e-mail address.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "workPhone": {
                        "type": "string",
                        "description": "The Investor's work phone number.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "mobile": {
                        "type": "string",
                        "description": "The Investor's mobile phone number.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "preferredCorrespondenceMethod": {
                        "type": "string",
                        "description": "The Investor's preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                        "example": "Mail",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                          }
                        ],
                        "nullable": true
                      },
                      "nextBestPreferredCorrespondenceMethod": {
                        "type": "string",
                        "description": "The Investor's next preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                        "example": "Email",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                          }
                        ],
                        "nullable": true
                      },
                      "nino": {
                        "type": "string",
                        "description": "The Investor's National Insurance Number.",
                        "example": "JJ334455A",
                        "nullable": true
                      },
                      "noNinoReason": {
                        "type": "string",
                        "description": "This is the reason why no National Insurance Number has been provided for the Investor. The value provided must match a value configured in the NO_NINO_REASONS reference code in Composer.",
                        "example": "R",
                        "nullable": true
                      },
                      "retirementDate": {
                        "description": "The Investor's selected retirement date.",
                        "example": "2024-07-04",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "deceasedDate": {
                        "description": "The Investor's date of death.",
                        "example": "2023-04-02",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "deceasedNotificationDate": {
                        "description": "The date you were notified of the Investor's death.",
                        "example": "2023-05-11",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "deceasedDateStatus": {
                        "type": "string",
                        "description": "The Investor's deceased date status. The value provided must match a deceased date status as configured in Composer.",
                        "example": "DNOT",
                        "nullable": true
                      },
                      "occupation": {
                        "type": "string",
                        "description": "The Investor's occupation.",
                        "example": "Sailor",
                        "nullable": true
                      },
                      "annualSalary": {
                        "description": "The Investor's annual salary.",
                        "example": "25000.00",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ],
                        "nullable": true
                      },
                      "salaryDate": {
                        "description": "The date at which the investors advised annual salary was applicable",
                        "example": "2022-09-21",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "residentStatus": {
                        "type": "string",
                        "description": "The Investor's resident status for tax purposes. Possible values are: Resident, Non-Resident.",
                        "example": "Resident",
                        "nullable": true
                      },
                      "residenceCountryCode": {
                        "type": "string",
                        "description": "The Investor's resident country code for tax purposes in the ISO alpha-3 three-letter code format. This is required for a non-resident Investor for FATCA purposes and the value provided must match a country code as configured in Composer.",
                        "example": "AUS",
                        "nullable": true
                      },
                      "amlStatus": {
                        "type": "string",
                        "description": "The Investor's AML Status. The value provided must match a value configured in the AML_STATUS_LIST reference code in Composer.",
                        "example": "Y"
                      },
                      "fatcaStatus": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/fatcaStatus"
                          }
                        ]
                      },
                      "lostMember": {
                        "type": "string",
                        "description": "Indicator as to whether the Investor is classed as Lost/Gone Away. Possible values are: Lost, Found, Reported.",
                        "example": "Lost",
                        "nullable": true
                      },
                      "mailReturnedDate1": {
                        "description": "This is the date the Investor was first recorded as being Lost/Gone Away.",
                        "example": "2023-02-01",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "mailReturnedDate2": {
                        "description": "This is the date the Investor was subsequently recorded as being Lost/Gone Away.",
                        "example": "2023-02-02",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "addresses": {
                        "type": "array",
                        "description": "The addresses associated to the Investor. The ability exists for the Investor to record 4 addresses each of differing types, Actual, Postal, Forwarding, Document Exchange.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The unique Composer identifier for the address.",
                              "example": 195271,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "addressType": {
                              "type": "string",
                              "description": "The type of address. Possible values are: Actual, Postal.",
                              "example": "Actual",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/addressType"
                                }
                              ]
                            },
                            "prefixType": {
                              "type": "string",
                              "description": "The address prefix type. The value provided must match a prefix type as configured in Composer.",
                              "example": "BLDNG"
                            },
                            "prefix": {
                              "type": "string",
                              "description": "The actual value related to the address prefix.",
                              "example": "23"
                            },
                            "suffixType": {
                              "type": "string",
                              "description": "The address suffix type. The value provided must match a prefix type as configured in Composer.",
                              "example": "GATE"
                            },
                            "suffix": {
                              "type": "string",
                              "description": "The actual value related to the address suffix.",
                              "example": "7"
                            },
                            "propertyName": {
                              "type": "string",
                              "description": "The name of the property of the address.",
                              "example": "The Cottage"
                            },
                            "careOfName": {
                              "type": "string",
                              "description": "The care of name of address.",
                              "example": "The Manager"
                            },
                            "streetNumber": {
                              "type": "string",
                              "description": "The street number of the address.",
                              "example": "74"
                            },
                            "street": {
                              "type": "string",
                              "description": "The street name of the address.",
                              "example": "High Street"
                            },
                            "street2": {
                              "type": "string",
                              "description": "The second  part of the street name of the address.",
                              "example": "Garners Lane"
                            },
                            "town": {
                              "type": "string",
                              "description": "The town name of the address.",
                              "example": "Basildon"
                            },
                            "district": {
                              "type": "string",
                              "description": "The district name of the address.",
                              "example": "Essex District"
                            },
                            "county": {
                              "type": "string",
                              "description": "The county name of the address.",
                              "example": "Essex"
                            },
                            "postCode": {
                              "type": "string",
                              "description": "The postcode of the address.",
                              "example": "SS13"
                            },
                            "countryCode": {
                              "type": "string",
                              "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured in Composer.",
                              "example": "GBR"
                            }
                          }
                        },
                        "nullable": true
                      },
                      "title": {
                        "description": "The title of the individual.",
                        "example": "Mr",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/title"
                          }
                        ],
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender" : {
                        "type" : "string",
                        "example": "MEMBER_PORTAL",
                        "description" : "The sender name."
                      },
                      "payloadId" : {
                        "type" : "string",
                        "example": "uniqueId",
                        "description" : "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId" : {
                        "type" : "integer",
                        "example": 112233,
                        "description" : "The master work item id.",
                        "format" : "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor to whom the personal details are associated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/work-item-managed-tasks/investors/{investorId}/bank-accounts": {
      "post": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Add a new bank account",
        "description": "This will perform the creation of a new bank account for an Investor. This endpoint is that of '/investors/{investorId}/bank-accounts' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "POST-work-item-managed-tasks-investors-{investorid}-bank-accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "accountType"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name associated to the bank account.",
                        "example": "Tom Abbot",
                        "maxLength": 40,
                        "nullable": true
                      },
                      "accountType": {
                        "type": "string",
                        "description": "Indicator as to whether the bank account is Domestic or International.",
                        "example": "Domestic",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/accountType"
                          }
                        ]
                      },
                      "defaultBankAccount": {
                        "type": "boolean",
                        "description": "Indicator as to whether the bank account is set as the default for the Investor.",
                        "example": true,
                        "nullable": true
                      },
                      "accountNumber": {
                        "type": "string",
                        "description": "The account number associated to a domestic bank account.",
                        "example": "8075440",
                        "maxLength": 10,
                        "nullable": true
                      },
                      "bankAccountId": {
                        "type": "integer",
                        "description": "The unique Composer identifier of the bank account held in Composer.",
                        "example": 21696670,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "nullable": true
                      },
                      "sortCode": {
                        "type": "string",
                        "description": "The Sort Code of the bank institution and branch.",
                        "example": "114727",
                        "maxLength": 10,
                        "nullable": true
                      },
                      "bicCode": {
                        "type": "string",
                        "description": "The Bank Identifier Code (BIC).",
                        "example": "AVCDUK64",
                        "maxLength": 11,
                        "nullable": true
                      },
                      "internationalAccountNumber": {
                        "type": "string",
                        "description": "The account number associated to an international bank account (IBAN).",
                        "example": "1236589",
                        "maxLength": 40,
                        "nullable": true
                      },
                      "customerReference": {
                        "type": "string",
                        "description": "An external customer reference relating to the bank account.",
                        "example": "A1254987",
                        "maxLength": 20,
                        "nullable": true
                      },
                      "bankAccountType": {
                        "type": "string",
                        "description": "The specific type of bank account. Possible values are: Third Party, Retiready, External Client Money.",
                        "example": "ThirdParty",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/bankAccountType"
                          }
                        ],
                        "nullable": true
                      },
                      "thirdPartyId": {
                        "description": "The unique Composer identifier of the Third Party held in Composer, where the Bank Account Type has been set to Third Party.",
                        "example": 21696670,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "nullable": true
                      },
                      "institutionBranchId": {
                        "description": "The unique Composer identifier of the Institution Branch of the bank held in Composer.",
                        "example": 6893,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "nullable": true
                      },
                      "currencyCode": {
                        "type": "string",
                        "description": "The currency of the bank account. The value will match a currency code as configured in Composer.",
                        "example": "USD",
                        "maxLength": 3,
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender" : {
                        "type" : "string",
                        "example": "MEMBER_PORTAL",
                        "description" : "The sender name."
                      },
                      "payloadId" : {
                        "type" : "string",
                        "example": "uniqueId",
                        "description" : "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId" : {
                        "type" : "integer",
                        "example": 112233,
                        "description" : "The master work item id.",
                        "format" : "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the investor to whom the Bank Account(s) are associated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/work-item-managed-tasks/relationships/individuals": {
      "post": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Create new Individual relations.",
        "description": "This will create new individual relations, such as a beneficiary. This endpoint is that of '/relationships/individuals' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "POST-work-item-managed-tasks-relationships-individuals",
        "requestBody": {
          "description": "Create a new individual relation such as a beneficiary and work items for tracking the process payload.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "name",
                      "gender",
                      "addresses",
                      "preferredPaymentType",
                      "reportingFrequency"
                    ],
                    "properties": {
                      "givenNames": {
                        "type": "string",
                        "description": "The Individual's forename and any middle names.",
                        "example": "Rich",
                        "nullable": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The Individual's surname.",
                        "example": "Monohan"
                      },
                      "preferredName": {
                        "type": "string",
                        "description": "The Individual's short name.",
                        "example": "Mono",
                        "nullable": true
                      },
                      "salutation": {
                        "type": "string",
                        "description": "The Individual's salutation.",
                        "example": "Captain Monohan",
                        "nullable": true
                      },
                      "gender": {
                        "description": "The Individual's gender. Possible values are: Female, Male, Not Disclosed, Unknown.",
                        "example": "Male",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/gender"
                          }
                        ]
                      },
                      "addresses": {
                        "type": "array",
                        "description": "The addresses associated to the Individual. The ability exists for the Entity to hold addresses for each differing type - Actual, Postal, Forwarding.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "addressType": {
                              "description": "The type of address. Possible values are: Actual, Postal, Forwarding.",
                              "example": "Postal",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/addressType"
                                }
                              ]
                            },
                            "careOfName": {
                              "type": "string",
                              "description": "The care of name of address.",
                              "example": "The Manager"
                            },
                            "propertyName": {
                              "type": "string",
                              "description": "The name of the property of the address.",
                              "example": "The Cottage"
                            },
                            "prefixType": {
                              "type": "string",
                              "description": "The address prefix type. The value provided will match a prefix type as configured within Composer.",
                              "example": "BLDNG"
                            },
                            "prefix": {
                              "type": "string",
                              "description": "The actual value related to the address prefix.",
                              "example": "7"
                            },
                            "suffixType": {
                              "type": "string",
                              "description": "The address suffix type. The value provided will match a prefix type as configured within Composer.",
                              "example": "APT"
                            },
                            "suffix": {
                              "type": "string",
                              "description": "The actual value related to the address suffix.",
                              "example": "2"
                            },
                            "streetNumber": {
                              "type": "string",
                              "description": "The street number of the address.",
                              "example": "74"
                            },
                            "street": {
                              "type": "string",
                              "description": "The street name of the address.",
                              "example": "High Street"
                            },
                            "street2": {
                              "type": "string",
                              "description": "The second part of the street name of the address.",
                              "example": "Garners Lane"
                            },
                            "town": {
                              "type": "string",
                              "description": "The town/city name of the address.",
                              "example": "Basildon"
                            },
                            "district": {
                              "type": "string",
                              "description": "The district name of the address.",
                              "example": "Essex District"
                            },
                            "county": {
                              "type": "string",
                              "description": "The county name of the address.",
                              "example": "ESSEX"
                            },
                            "postcode": {
                              "type": "string",
                              "description": "The postcode of the address.",
                              "example": "AH0 ER1"
                            },
                            "countryCode": {
                              "type": "string",
                              "description": "The country code of the address in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer.",
                              "example": "GBR"
                            }
                          }
                        }
                      },
                      "dateOfBirth": {
                        "description": "The Individual's date of birth.",
                        "example": "1990-01-01",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "birthCountry": {
                        "type": "string",
                        "description": "The Individual’s birth country in the ISO alpha-3 three-letter code format. The value provided will match a country code as configured within Composer and is used in FATCA reporting.",
                        "example": "AUS",
                        "nullable": true
                      },
                      "birthplace": {
                        "type": "string",
                        "description": "The Individual's place of birth.",
                        "example": "Melbourne",
                        "nullable": true
                      },
                      "nino": {
                        "type": "string",
                        "description": "The Individual’s National Insurance Number.",
                        "example": "NN222222A",
                        "nullable": true
                      },
                      "email": {
                        "type": "string",
                        "description": "The Individual's e-mail address.",
                        "example": "test@gbst.com",
                        "nullable": true
                      },
                      "homePhone": {
                        "type": "string",
                        "description": "The Individual's home phone number.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "mobile": {
                        "type": "string",
                        "description": "The Individual's mobile phone number.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "workPhone": {
                        "type": "string",
                        "description": "The Individual's work phone number.",
                        "example": "0115698574",
                        "nullable": true
                      },
                      "preferredCorrespondenceMethod": {
                        "description": "The Individual's preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                        "example": "Email",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                          }
                        ],
                        "nullable": true
                      },
                      "nextBestPreferredCorrespondenceMethod": {
                        "type": "string",
                        "description": "The Individual's next preferred contact method. Possible values are: Mail, Email, Personal, Telephone.",
                        "example": "Telephone",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/preferredCorrespondenceMethod"
                          }
                        ],
                        "nullable": true
                      },
                      "retirementDate": {
                        "description": "The Individual's selected retirement date.",
                        "example": "2023-10-10",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "deceasedDate": {
                        "description": "The Individual's date of death.",
                        "example": "2023-10-10",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "deceasedDateStatus": {
                        "type": "string",
                        "description": "The Individual's deceased date status. The value provided will match a deceased date status as configured within Composer.",
                        "example": "DNOT",
                        "nullable": true
                      },
                      "deceasedNotificationDate": {
                        "description": "The date notification received of the Individual's death.",
                        "example": "2023-10-11",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ],
                        "nullable": true
                      },
                      "amlStatus": {
                        "type": "string",
                        "description": "The Individual’s AML Status. The value provided will match a value configured in the AML_STATUS_LIST reference code in Composer.",
                        "example": "P",
                        "nullable": true
                      },
                      "fcdsStatus": {
                        "type": "string",
                        "description": "Any Financial Crime and Data Security restrictions that may be applicable to the Individual. Possible values for this field are stored in reference code FCDS_WARN_TYPE.",
                        "example": "FCDS 01",
                        "nullable": true
                      },
                      "directPayTypeCode": {
                        "type": "string",
                        "description": "The type of direct credit payment to be used for any electronic payment. The value provided must match a value configured in the DIRECT_PAY_TYPE_LIST reference code in Composer.",
                        "example": "BACS",
                        "nullable": true
                      },
                      "externalEntity": {
                        "type": "boolean",
                        "description": "Indicator if this record is for an External Entity.",
                        "example": true,
                        "nullable": true
                      },
                      "groupingCode": {
                        "type": "string",
                        "description": "The grouping code associated to the Individual.",
                        "example": "FEE",
                        "nullable": true
                      },
                      "preferredPaymentType": {
                        "type": "string",
                        "description": "The Preferred Payment Type for payments to be made to the Individual. This will match a Preferred Payment Type as configured in Composer.",
                        "example": "Q"
                      },
                      "reportingFrequency": {
                        "description": "The frequency of which reporting is to occur.",
                        "example": "Annual",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/reportingFrequency"
                          }
                        ]
                      },
                      "servicePriority": {
                        "type": "boolean",
                        "description": "Indicates if the Individual is to receive a higher level of service.",
                        "example": true,
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender" : {
                        "type" : "string",
                        "example": "MEMBER_PORTAL",
                        "description" : "The sender name."
                      },
                      "payloadId" : {
                        "type" : "string",
                        "example": "uniqueId",
                        "description" : "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId" : {
                        "type" : "integer",
                        "example": 112233,
                        "description" : "The master work item id.",
                        "format" : "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/investor-accounts/{investorAccountId}/beneficiaries": {
      "patch": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Update Investor Account Beneficiaries",
        "description": "An investor may nominate a beneficiary for a specific Investor Account within Composer. The beneficiary is the entity that benefits may be payable to upon the investor's death.\n\nThis will update, for an individual investor account, the nominated beneficiary, the nominated percentage or the applicable nomination dates. This endpoint is that of '/investor-accounts/{investorAccountId}/beneficiaries' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "PATCH-work-item-managed-tasks-investor-accounts-{investoraccountid}-beneficiaries",
        "requestBody": {
          "description": "Updates beneficiary details for an investor account and work items for tracking the process payload.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "beneficiaries"
                    ],
                    "properties": {
                      "beneficiaries": {
                        "type": "array",
                        "description": "Updates beneficiary details for an investor account.",
                        "items": {
                          "type": "object",
                          "required": [
                            "percent",
                            "relationshipTypeId",
                            "entityId"
                          ],
                          "properties": {
                            "id": {
                              "description": "The unique Composer identifier for the beneficiary record.",
                              "example": 249,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ],
                              "nullable": true
                            },
                            "entityId": {
                              "description": "The unique Composer identifier for the beneficiary entity.",
                              "example": 3070,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "relationshipTypeId": {
                              "description": "The unique Composer identifier for the relation type of the associated entity.",
                              "example": 128,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "relationshipTypeName": {
                              "type": "string",
                              "description": "The name of the relationship type.",
                              "example": "Beneficiary",
                              "nullable": true
                            },
                            "percent": {
                              "description": "The nominated percentage of benefits payable to the Beneficiary.",
                              "example": "25.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/percentage"
                                }
                              ]
                            },
                            "bindingNominationDate": {
                              "description": "The date the binding nomination is effective from.",
                              "example": "2022-12-01",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/date"
                                }
                              ],
                              "nullable": true
                            },
                            "bindingNominationExpiryDate": {
                              "description": "The date the binding nomination will expire.",
                              "example": "2024-12-01",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/date"
                                }
                              ],
                              "nullable": true
                            },
                            "bindingNominationRevokeDate": {
                              "description": "The date the binding nomination was revoked.",
                              "example": "2023-02-01",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/date"
                                }
                              ],
                              "nullable": true
                            },
                            "child": {
                              "type": "boolean",
                              "description": "Indicator as to whether the Beneficiary is a child.",
                              "example": false
                            },
                            "receiveCorrespondence": {
                              "type": "boolean",
                              "description": "Indicator as to whether the Beneficiary is to receive correspondence in respect to the associated Investor Account.",
                              "example": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender" : {
                        "type" : "string",
                        "example": "MEMBER_PORTAL",
                        "description" : "The sender name."
                      },
                      "payloadId" : {
                        "type" : "string",
                        "example": "uniqueId",
                        "description" : "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId" : {
                        "type" : "integer",
                        "example": 112233,
                        "description" : "The master work item id.",
                        "format" : "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor Account.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/work-item-managed-tasks/investor-accounts/{investorAccountId}/employer-contribution-schedule-details": {
      "post": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Override Investor Account Employer Contribution Schedule Details.",
        "description": "To create the Exposed Service Endpoint to provide the ability for a valid party type to update investor account details via the Employer Contribution Schedule. This endpoint is that of '/investor-accounts/{investorAccountId}/employer-contribution-schedule-details' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "create",
        "parameters": [
          {
            "name": "investorAccountId",
            "in": "path",
            "description": "The unique Composer identifier for the investor account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Employer Contribution Schedule Details for an Investor Account.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EmployerContScheduleDtlCreate"
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender": {
                        "type": "string",
                        "example": "MEMBER_PORTAL",
                        "description": "The sender name."
                      },
                      "payloadId": {
                        "type": "string",
                        "example": "uniqueId",
                        "description": "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId": {
                        "type": "integer",
                        "example": 112233,
                        "description": "The master work item id.",
                        "format": "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/investor-accounts/employer-contribution-schedule-details/{employerContScheduleDtlId}": {
      "patch": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Update an Employer Contribution Schedule",
        "description": "This will update an Investor Accounts Employer Contribution Schedule details.  This endpoint is that of '/investor-accounts/employer-contribution-schedule-details/{employerContScheduleDtlId}' but also includes the creation of WorkItems for audit and checking purposes where required.",
        "operationId": "patch",
        "parameters": [
          {
            "name": "employerContScheduleDtlId",
            "in": "path",
            "description": "The unique Composer identifier for the employer contribution schedule details.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Investor Accounts Employer Contribution Schedule details.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EmployerContScheduleDtlUpdate"
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender": {
                        "type": "string",
                        "example": "MEMBER_PORTAL",
                        "description": "The sender name."
                      },
                      "payloadId": {
                        "type": "string",
                        "example": "uniqueId",
                        "description": "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId": {
                        "type": "integer",
                        "example": 112233,
                        "description": "The master work item id.",
                        "format": "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/incomedrawdown-accounts/{investorAccountId}/adhoc-income-requests": {
      "post": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Create an ad hoc pension income request for an investor’s income drawdown account",
        "description": "This endpoint will provide the ability to set up an ad hoc pension income request for an investor’s income drawdown account. The caller is responsible for ensuring that the data provided in this service has been validated prior to submission. Where investments need to be sold to fund the requested ad hoc income value, a call should be made to the sale-request service to sell down the required amount prior to this ad hoc income request being made.",
        "operationId": "POST-investor-accounts_{investorAccountId}_adhoc-pension-incomes",
        "parameters": [
          {
            "name": "investorAccountId",
            "in": "path",
            "description": "The Investor Account id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Work Item Details and Adhoc Pension Income Request item to add.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required" : [ "amount", "paymentCurrency" ],
                    "properties" : {
                      "amount" : {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ],
                        "description" : "The amount of the adhoc income payment.",
                        "example" : "500.05"
                      },
                      "dueDate" : {
                        "type" : "string",
                        "description" : "The date that the adhoc income amount is to be paid.",
                        "format" : "date",
                        "example" : "2018-01-31"
                      },
                      "paymentCurrency" : {
                        "type" : "string",
                        "description" : "The currency of the adhoc income amount being paid.",
                        "example": "GBP"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender": {
                        "type": "string",
                        "example": "MEMBER_PORTAL",
                        "description": "The unique Composer identifier used to represent the calling application."
                      },
                      "payloadId": {
                        "type": "string",
                        "example": "uniqueId",
                        "description": "The unique Composer identifier for the payload to be able to track the submission request. ",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "\t\nThe party type of the acting party who submitted the request.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The unique identifier for the acting party who submitted the request."
                      },
                      "masterWorkItemId": {
                        "type": "integer",
                        "example": 112233,
                        "description": "The unique Composer identifier of the master work item created for this request.",
                        "format": "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The unique Composer identifier of the child work item created for this request.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/incomedrawdown-accounts/{investorAccountId}/adhoc-income-requests/{adhocIncomeRequestId}/replace": {
      "post": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Replace an ad hoc pension income request for an investor’s income drawdown account",
        "description": "This endpoint will provide the ability to replace an ad hoc pension income request for an investor’s income drawdown account. The caller is responsible for ensuring that the data provided in this service has been validated prior to submission. Where additional investments need to be sold to fund the new requested ad hoc income value, a call should be made to the sale-request service to sell down the required amount prior to this ad hoc income request being made.",
        "operationId": "POST-investor-accounts_{investorAccountId}_adhoc-pension-incomes_{adhocIncomeRequestId}_replace",
        "parameters": [
          {
            "name": "investorAccountId",
            "in": "path",
            "description": "The Investor Account id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "adhocIncomeRequestId",
            "in": "path",
            "description": "The Adhoc Income Request Id to replace",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Work Item Details and Adhoc Pension Income Request item to replace.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required" : [ "amount", "paymentCurrency" ],
                    "properties" : {
                      "amount" : {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ],
                        "description" : "The amount of the adhoc income payment.",
                        "example" : "500.05"
                      },
                      "dueDate" : {
                        "type" : "string",
                        "description" : "The date that the adhoc income amount is to be paid.",
                        "format" : "date",
                        "example" : "2018-01-31"
                      },
                      "paymentCurrency" : {
                        "type" : "string",
                        "description" : "The currency of the adhoc income amount being paid.",
                        "example" : "GBP"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender": {
                        "type": "string",
                        "example": "MEMBER_PORTAL",
                        "description": "The unique Composer identifier used to represent the calling application."
                      },
                      "payloadId": {
                        "type": "string",
                        "example": "uniqueId",
                        "description": "The unique Composer identifier for the payload to be able to track the submission request. ",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The party type of the acting party who submitted the request.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The unique identifier for the acting party who submitted the request."
                      },
                      "masterWorkItemId": {
                        "type": "integer",
                        "example": 112233,
                        "description": "The unique Composer identifier of the master work item created for this request.",
                        "format": "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The unique Composer identifier of the child work item created for this request.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/custom-attributes": {
      "patch": {
        "tags": [
          "Work Item Managed Tasks"
        ],
        "summary": "Work Item Managed Tasks - Update Custom Attributes",
        "description": "This endpoint will provide the ability to update custom attributes associated to an Investor or an Investor Account and create work item(s) to store the request.",
        "operationId": "PATCH-work-item-managed-tasks-custom-attributes",
        "requestBody": {
          "description": "Updates custom attribute details for an investor account/ an investor.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "meta"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "customAttributes"
                    ],
                    "properties": {
                      "partyId": {
                        "description": "The unique Composer identifier for the party.",
                        "example": 249,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ]
                      },
                      "partyType": {
                        "description": "The name of the Party Type.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyType"
                          }
                        ]
                      },
                      "customAttributes": {
                        "type": "array",
                        "description": "Updates custom attribute details.",
                        "items": {
                          "type": "object",
                          "required": [
                            "attributeShortCode",
                            "attributeValue"
                          ],
                          "properties": {
                            "attributeShortCode": {
                              "type": "string",
                              "example": "20-977",
                              "description": "A unique Composer identifier for the Attribute."
                            },
                            "attributeValue": {
                              "type": "string",
                              "nullable": true,
                              "example": "Y",
                              "description": "The value of the Attribute"
                            },
                            "partyAttributeId": {
                              "description": "A unique Composer identifier for the Party Attribute",
                              "example": 113,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ],
                              "nullable": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "required": [
                      "partyId",
                      "partyType",
                      "sender"
                    ],
                    "properties": {
                      "sender": {
                        "type": "string",
                        "example": "MEMBER_PORTAL",
                        "description": "The sender name."
                      },
                      "payloadId": {
                        "type": "string",
                        "example": "uniqueId",
                        "description": "The payload id.",
                        "nullable": true
                      },
                      "partyType": {
                        "description": "The Composer Party Type indicating the role of the 'partyId' in relation to the work item.",
                        "example": "InvestorAccount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/partyTypeForWIMT"
                          }
                        ]
                      },
                      "partyId": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifier"
                          }
                        ],
                        "example": 1122,
                        "description": "The party id."
                      },
                      "masterWorkItemId": {
                        "type": "integer",
                        "example": 112233,
                        "description": "The master work item id.",
                        "format": "int32",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/party-external-references": {
      "get": {
        "tags": [
          "Common Party Functions"
        ],
        "summary": "Retrieve Party External References",
        "description": "This will retrieve those Parties having External References of the nominated system type.",
        "operationId": "GET-party-external-references",
        "parameters": [
          {
            "name": "partyType",
            "in": "query",
            "description": "The type of party associated with the party external references.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/partyType"
            },
            "example": "Investor"
          },
          {
            "name": "externalSystem",
            "in": "query",
            "description": "The External System",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EMXPROVID"
          },
          {
            "name": "externalReference",
            "in": "query",
            "description": "The External Reference",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ABR 12343"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "partyId": {
                            "description": "The party id associated with the party external references.",
                            "example": 146,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          }
                        }
                      },
                      "example" : [
                        {
                          "partyId": 146
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/custom-attributes" : {
      "get" : {
        "tags" : [ "Common Party Functions" ],
        "summary": "Retrieve Custom Attributes for a nominated Party",
        "description" : "This will retrieve one or more Custom Attributes which are associated to the nominated Party.",
        "operationId" : "GET-custom-attribute-custom-attributes",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "partyType" : {
                          "description" : "The Composer identifier for the Party Type of that to whom the attributes are associated.",
                          "example" : "InvestorAccount",
                          "allOf" : [ {
                            "$ref" : "#/components/schemas/partyTypeForCustomAttributes"
                          } ]
                        },
                        "partyId" : {
                          "description" : "The unique Composer identifier for the Party of the nominated partyType.",
                          "example" : 70824175,
                          "allOf" : [ {
                            "$ref" : "#/components/schemas/identifier"
                          } ]
                        },
                        "customAttributes" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "id" : {
                                "description" : "A unique Composer identifier for the Custom Attribute.",
                                "example" : 91,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "partyAttributeId" : {
                                "description" : "The unique Composer identifier thats links a Party to a Custom Attribute.",
                                "example" : 328494,
                                "allOf" : [ {
                                  "$ref" : "#/components/schemas/identifier"
                                } ]
                              },
                              "attributeShortcode" : {
                                "type" : "string",
                                "description" : "The Short Code used to identify a Custom Attribute.",
                                "example" : "ANNIVSRY_DATE"
                              },
                              "attributeName" : {
                                "type" : "string",
                                "description" : "The name of the Custom Attribute.",
                                "example" : "Anniversary Date"
                              },
                              "attributeValue" : {
                                "type" : "string",
                                "description" : "The value of the Custom Attribute.",
                                "example" : "08-11-2023"
                              }
                            }
                          },
                          "example": [
                            {
                              "id": 910,
                              "partyAttributeId": 328494,
                              "attributeShortcode": "PDC_ESC_EMP_YN_FLAG",
                              "attributeName": "Escalate Employer PDC YN",
                              "attributeValue": "01-11-2023"
                            },
                            {
                              "id": 652,
                              "partyAttributeId": 65489,
                              "attributeShortcode": "PDC_ESC_TRD_PERC_VAL",
                              "attributeName": "PDC Third Party Escalate Percentage",
                              "attributeValue": "01-11-2023"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "partyId",
            "in": "query",
            "description": "The unique Composer identifier for the Party of the nominated PartyType.",
            "required": true,
            "example": 98563112,
            "schema": {
              "$ref": "#/components/schemas/identifier"
            }
          },
          {
            "name": "partyType",
            "in": "query",
            "description": "The name of the Party Type.",
            "required": true,
            "example": "InvestorAccount",
            "schema": {
              "$ref": "#/components/schemas/partyType"
            }
          },
          {
            "name": "attributeShortCode",
            "in": "query",
            "description": "The Short Code used to identify a Custom Attribute.",
            "required": false,
            "example": "ApirCode",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags" : [ "Common Party Functions" ],
        "summary": "Maintain Custom Attributes for a nominated Party",
        "description" : "This provides the ability to update custom attributes associated to the nominated Party.",
        "operationId": "PATCH-custom-attributes",
        "requestBody": {
          "description": "Updates custom attribute details for an investor account/an investor.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "partyId",
                  "partyType",
                  "customAttributes"
                ],
                "properties": {
                  "partyId": {
                    "description": "The unique Composer identifier for the Party of the nominated partyType.",
                    "example": 249,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "partyType": {
                    "description": "The Composer identifier for the Party Type of that to whom the attributes are associated.",
                    "example": "InvestorAccount",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/partyTypeForCustomAttributes"
                      }
                    ]
                  },
                  "customAttributes": {
                    "type": "array",
                    "description": "Updates custom attribute details.",
                    "items": {
                      "type": "object",
                      "required": [
                        "attributeShortCode",
                        "attributeValue"
                      ],
                      "properties": {
                        "attributeShortCode": {
                          "type": "string",
                          "example": "20-977",
                          "description": "A unique Composer identifier for the Attribute."
                        },
                        "attributeValue": {
                          "type": "string",
                          "nullable": true,
                          "example": "Y",
                          "description": "The value of the Attribute"
                        },
                        "partyAttributeId": {
                          "description": "A unique Composer identifier for the Party Attribute",
                          "example": 113,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "attributeShortCode": "20-564",
                        "attributeValue": "1.564",
                        "partyAttributeId": 235
                      },
                      {
                        "attributeShortCode": "20-987",
                        "attributeValue": "Y",
                        "partyAttributeId": 113
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Operation succeeded.  No response provided."
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/cash-reserve-purpose-types": {
      "get": {
        "tags": [
          "Operational - Composer Configuration"
        ],
        "summary": "Retrieve available Cash Reserve Purpose Types",
        "description": "This will retrieve the available cash reserve purpose types.",
        "operationId": "GET-cash-reserve-purpose-types",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cashReservePurposeTypes": {
                          "type": "array",
                          "description": "The available cash reserve purpose types.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cashReservePurposeCode": {
                                "type": "string",
                                "description": "The unique Composer identifier code for the Cash Reserve Purpose.",
                                "example": "W"
                              },
                              "description": {
                                "type": "string",
                                "description": "A description of the Cash Reserve Purpose.",
                                "example": "Inter Account Switch"
                              }
                            }
                          },
                          "example": [
                            {
                              "cashReservePurposeCode": "W",
                              "description": "Inter Account Switch"
                            },
                            {
                              "cashReservePurposeCode": "P",
                              "description": "Purchase Requests"
                            },
                            {
                              "cashReservePurposeCode": "R",
                              "description": "RDD Payments"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorAccountId",
          "in": "query",
          "description": "The unique Composer identifier for an Investor Account.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 19865478
        },
        {
          "name": "productId",
          "in": "query",
          "description": "The unique Composer identifier for a Product.",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          },
          "example": 24
        },
        {
          "name": "manualEntryAllow",
          "in": "query",
          "description": "Indicator as to whether manual entry allowed.",
          "required": false,
          "example": true,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "enabledForProcess",
          "in": "query",
          "description": "Indicator as to whether enabled for process.",
          "required": false,
          "example": true,
          "schema": {
            "type": "boolean"
          }
        }
      ]
    },
    "/processing/service-request/{requestId}/status" : {
      "get" : {
        "tags" : [ "Operational - Batch Processing Control" ],
        "summary": "Retrieve the Status of a Service Request",
        "description" : "This returns the status of a submitted asynchronous service request, e.g. a purchase request.",
        "operationId" : "GET-processing-service-request-{requestid}-status",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "type" : "string",
                          "description" : "The status of the service request.",
                          "example" : "COMPLETED"
                        },
                        "message" : {
                          "oneOf": [
                            {
                              "type" : "array",
                              "description" : "Additional information provided regarding the status of the service request.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "exceptionMessage" : {
                                    "type" : "string",
                                    "example" : "The investor's age (25) is less than the normal minimum retirement age 55. The benefit can only proceed if the required ill-health conditions have been satisfied."
                                  },
                                  "exceptionCode" : {
                                    "type" : "string",
                                    "example" : "investor_minimum_retirement_age_ill_health"
                                  }
                                }
                              },
                              "example": [
                                {
                                  "exceptionMessage": "The investor's age (25) is less than the normal minimum retirement age 55. The benefit can only proceed if the required ill-health conditions have been satisfied.",
                                  "exceptionCode": "investor_minimum_retirement_age_ill_health"
                                }
                              ]
                            },
                            {
                              "type": "string",
                              "description": "Additional information provided regarding the status of the service request.",
                              "example": "The request has been completed successfully."
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "requestId",
        "in" : "path",
        "description" : "The unique Composer identifier for the service request.",
        "required" : true,
        "schema" : {
          "type": "string"
        }
      } ]
    },
    "/processing/batch-run-details": {
      "get": {
        "tags": [
          "Operational - Batch Processing Control"
        ],
        "description": "This performs the retrieval of Batch Run summary data for those Batch Processes matching the specified parameters.",
        "summary": "Retrieval of Batch Run details",
        "operationId": "GET-processing-batch-run-details",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchRunDetails": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "batchRunId": {
                                "description": "The Batch Run Id.",
                                "example": 8553402,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "runDatetime": {
                                "type": "string",
                                "description": "The run date-time of the Batch Run.",
                                "example": "2023-04-03T18:40:03.47",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/dateTime"
                                  }
                                ]
                              },
                              "approvedDatetime": {
                                "description": "The approved date-time of the Batch Run.",
                                "example": "2023-04-03T18:40:09.567",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/dateTime"
                                  }
                                ]
                              },
                              "effectiveDate": {
                                "description": "The effective date of the Batch Run.",
                                "example": "2023-04-04",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "status": {
                                "type": "string",
                                "description": "The status of the Batch run. Possible values are: Approved, Error, InProgress, ReProcessed, Rejected, WaitingApproval.",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/batchRunStatus"
                                  }
                                ],
                                "example": "Approved"
                              },
                              "runSpid": {
                                "type": "integer",
                                "description": "The SPID linked to the Batch Run.",
                                "example": 639
                              },
                              "notation": {
                                "type": "string",
                                "description": "Option to add any relevant notes to the Batch run.",
                                "example": "Batch Run 7654"
                              },
                              "runUser": {
                                "type": "string",
                                "description": "The Composer username of the user who created the Batch Run.",
                                "example": "cbis"
                              },
                              "approveUser": {
                                "type": "string",
                                "description": "The Composer username of the user who approved the Batch Run.",
                                "example": "cbis"
                              },
                              "externalReference": {
                                "type": "string",
                                "description": "The external reference.",
                                "example": "AB7865"
                              },
                              "processTypeName": {
                                "type": "string",
                                "description": "The process name of the Batch Run.",
                                "example": "CBIS_MEM_BULK_UPLOAD"
                              },
                              "fileAssociation": {
                                "type": "boolean",
                                "description": "Indicator as to whether a file is associated with a Batch Run.",
                                "example": false
                              },
                              "stillRunning": {
                                "type": "boolean",
                                "description": "Indicator as to whether the Batch Run is still running.",
                                "example": false
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": [
                    {
                      "batchRunId": 8553402,
                      "runDatetime": "2023-04-03T18:40:03.47",
                      "approvedDatetime": "2023-04-03T18:40:09.567",
                      "effectiveDate": "2023-04-04",
                      "status": "Approved",
                      "runSpid": 639,
                      "notation": "Batch Run 7654",
                      "runUser": "cbis",
                      "approveUser": "cbis",
                      "externalReference": "AB7865",
                      "processTypeName": "CBIS_MEM_BULK_UPLOAD",
                      "fileAssociation": false,
                      "stillRunning": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "batchRunId",
          "in": "query",
          "description": "The unique Composer identifier for the batch run.",
          "required": false,
          "schema": {
            "type": "integer"
          },
          "example": 1325
        },
        {
          "name": "effectiveDateFrom",
          "in": "query",
          "description": "The effective date from which the Batch Run details retrieval is to start.",
          "required": false,
          "example": "2023-01-01",
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        },
        {
          "name": "effectiveDateTo",
          "in": "query",
          "description": "The effective date upto which the Batch Run details retrieval is required.",
          "required": false,
          "example": "2023-12-01",
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        },
        {
          "name": "externalReference",
          "in": "query",
          "description": "The external reference.",
          "required": false,
          "schema": {
            "type": "string"
          },
          "example": "ABR 12343"
        },
        {
          "name": "processId",
          "in": "query",
          "description": "The process id of the Batch Run.",
          "required": false,
          "schema": {
            "type": "integer"
          },
          "example": 1324
        },
        {
          "name": "runDateFrom",
          "in": "query",
          "description": "The run date from which the Batch Run details retrieval is to start.",
          "required": true,
          "example": "2023-01-01",
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        },
        {
          "name": "runDateTo",
          "in": "query",
          "description": "The run date upto which the Batch Run details retrieval is required.",
          "required": true,
          "example": "2023-12-01",
          "schema": {
            "$ref": "#/components/schemas/date"
          }
        },
        {
          "name": "status",
          "in": "query",
          "description": "The status of the Batch run. Possible values are: Approved, Error, InProgress, ReProcessed, Rejected, WaitingApproval.",
          "required": false,
          "example": "Approved",
          "schema": {
            "$ref": "#/components/schemas/batchRunStatus"
          }
        }
      ]
    },
    "/processing/{sagaId}/saga-status" : {
      "get" : {
        "summary": "Retrieve the Saga Status for an Async Service Request",
        "tags" : [ "Operational - Batch Processing Control" ],
        "description" : "This provides for the ability to retrieve a saga status for a service that has been submitted to be run asynchronously.",
        "operationId" : "GET-processing-{sagaid}-saga-status",
        "responses" : {
          "200" : {
            "description" : "Operation was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "sagaId": {
                              "description": "The unique Composer identifier for the saga.",
                              "example": 97,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "sagaStatus": {
                              "type": "string",
                              "description": "The status of the saga. Possible values are: Completed, Error, In Progress.",
                              "example": "COMPLETED",
                              "enum": [
                                "COMPLETED"
                              ]
                            },
                            "response": {
                              "type": "string",
                              "description": "The response details of the saga.",
                              "example": "{\"investorId\": 21696708,\"workItemId\": 4191,\"investorAccountId\": 70823909}"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "sagaId": {
                              "description": "The unique Composer identifier for the saga.",
                              "example": 97,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "sagaStatus": {
                              "type": "string",
                              "description": "The status of the saga. Possible values are: Completed, Error, In Progress.",
                              "example": "ERROR",
                              "enum": [
                                "ERROR"
                              ]
                            },
                            "errors": {
                              "type": "string",
                              "description": "The saga error details.",
                              "example": "[{\"code\":\"is_required\",\"commandFieldObjectPath\":\"accountDetails.accountAttributes\",\"message\":\"A value for Investor Account attribute is mandatory(Anniversary Date). Please provide a valid attribute value\",\"recoverable\":true,\"overridable\":false,\"messageArgs\":[]}]"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "sagaId": {
                              "description": "The unique Composer identifier for the saga.",
                              "example": 97,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "sagaStatus": {
                              "type": "string",
                              "description": "The status of the saga. Possible values are: Completed, Error, In Progress.",
                              "example": "IN_PROGRESS",
                              "enum": [
                                "IN_PROGRESS"
                              ]
                            }
                          }
                        },
                        {
                          "type": "object"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "sagaId",
        "in" : "path",
        "description" : "The unique Composer identifier for the saga.",
        "required" : true,
        "schema" : {
          "$ref": "#/components/schemas/identifier"
        }
      } ]
    },
    "/bulk-process/{batchRunId}/details": {
      "get": {
        "tags": [
          "Operational - Batch Processing Control"
        ],
        "description": "This retrieves all batch process details associated to a specific batch run.",
        "summary": "Get Bulk Process details",
        "operationId": "GET-bulk-process-details",
        "responses": {
          "200": {
            "description": "Operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchRunId": {
                          "description": "The batch run number to which these details are associated.",
                          "example": 8554013,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "processId": {
                          "description": "The Composer Process ID linked to the Batch Run Id.",
                          "example": 97,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "processName": {
                          "type": "string",
                          "description": "The Composer Process Name associated to the process for the Batch Run Id.",
                          "example": "CBIS_BULK_CONT_SCHED"
                        },
                        "runDatetime": {
                          "description": "The run datetime linked to the Batch Run Id.",
                          "example": "2023-11-20T15:08:23",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/dateTime"
                            }
                          ]
                        },
                        "approvedDatetime": {
                          "description": "The approve datetime linked to the Batch Run Id.",
                          "example": "2023-11-20T15:09:39",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/dateTime"
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the Batch Run associated to this Id.",
                          "example": "Approved"
                        },
                        "notation": {
                          "type": "string",
                          "description": "Any notes associated to the Batch Process.",
                          "example": "Error"
                        },
                        "effectiveDate": {
                          "description": "The Effective Date associated to the Batch Process.",
                          "example": "2023-11-20",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/date"
                            }
                          ]
                        },
                        "completedDatetime": {
                          "description": "The Completed Datetime for the Batch Process.",
                          "example": "2023-11-20T15:09:39",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/dateTime"
                            }
                          ]
                        },
                        "arguments": {
                          "type": "array",
                          "description": "The parameters used to run the Batch Process.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "argumentTag": {
                                "type": "string",
                                "description": "The argument qualifier associated to the batch process.",
                                "example": "PARTY_TYPE_ID"
                              },
                              "argumentValue": {
                                "type": "string",
                                "description": "The argument value for the qualifier associated to the batch process.",
                                "example": "2"
                              },
                              "displaySequence": {
                                "type": "integer",
                                "description": "The sequence of the arguments.",
                                "example": 1
                              }
                            }
                          },
                          "example" : [
                            {
                              "argumentTag": "PARTY_ID",
                              "argumentValue": "6598742",
                              "displaySequence": 1
                            },
                            {
                              "argumentTag": "PARTY_TYPE_ID",
                              "argumentValue": "2",
                              "displaySequence": 2
                            }
                          ]
                        },
                        "controlTotals": {
                          "type": "array",
                          "description": "The control totals associated to run the Batch Process.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tag": {
                                "type": "string",
                                "description": "Control totals tag.",
                                "example": "ROWS_FAILED"
                              },
                              "value": {
                                "type": "string",
                                "description": "Control totals value for a specific tag.",
                                "example": "0"
                              }
                            }
                          },
                          "example" : [
                            {
                              "tag": "RECORDS_PROCESSED",
                              "value": "15000"
                            },
                            {
                              "tag": "ROWS_FAILED",
                              "value": "100"
                            }
                          ]
                        },
                        "logs": {
                          "type": "array",
                          "description": "The log details associated to the Batch Process.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "logDatetime": {
                                "description": "The date of the log entry.",
                                "example": "2023-11-20T15:09:13",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/dateTime"
                                  }
                                ]
                              },
                              "batchState": {
                                "type": "string",
                                "description": "The status of the batch process.",
                                "example": "CONT_SCHED_STEP_3"
                              },
                              "notation": {
                                "type": "string",
                                "description": "Any notes associated to the batch log record.",
                                "example": "Elapsed time: 30189ms"
                              }
                            }
                          },
                          "example" : [
                            {
                              "logDatetime": "2023-11-20T15:09:13",
                              "batchState": "CONT_SCHED_STEP_3",
                              "notation": "Elapsed time: 30189ms"
                            }
                          ]
                        },
                        "rowDetails": {
                          "type": "array",
                          "description": "Details about the row.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "hasErrors": {
                                "type": "boolean",
                                "description": "This flag will indicate whether the row has processing or validation errors.",
                                "example": true
                              },
                              "hasWarnings": {
                                "type": "boolean",
                                "description": "This flag will indicate whether the row has processing or validation warnings.",
                                "example": true
                              },
                              "partyId": {
                                "description": "The party id of the party that the row is applicable for.",
                                "example": 21696691,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "partyTypeId": {
                                "description": "The party type id of the party that the row is applicable for.",
                                "example": 20,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "rowNumber": {
                                "type": "integer",
                                "description": "This represents the row number as indicated in the row number field in the bulk file. If not provided, then the physical file row number is used. Paging will be based on this rowNumber value.",
                                "example": 1
                              },
                              "type": {
                                "type": "string",
                                "description": "The type of the row. Example values for member bulk process and contribution processing are: JOINER, LEAVER.",
                                "example": "VALIDATIONERROR"
                              },
                              "exceptions": {
                                "type": "array",
                                "description": "The exceptions associated to run the Batch Process. There can be multiple exceptions associated to this batch run.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "batchRunExceptionId": {
                                      "description": "The bach run exception identifier",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "batchRunId": {
                                      "description": "The batch run number to which these details are associated.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "batchRunItemId": {
                                      "description": "The batch run item identifier.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "exceptionType": {
                                      "type": "string",
                                      "description": "Type of exception.",
                                      "example": "INFO"
                                    },
                                    "notation": {
                                      "type": "string",
                                      "description": "Exxception details.",
                                      "example": "investor 21696691 is Awaiting Action. Cannot process any contribution or update until this is addressed."
                                    },
                                    "partyId": {
                                      "description": "Party identifier.",
                                      "example": 21696691,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "partyTypeId": {
                                      "description": "Party type identifier.",
                                      "example": 20,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "partyTypeShortCode": {
                                      "type": "string",
                                      "description": "Party type short code",
                                      "example": "MEMBER"
                                    },
                                    "severity": {
                                      "type": "string",
                                      "description": "Severity level",
                                      "example": "I"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "example" : [
                            {
                              "hasErrors": true,
                              "hasWarnings": true,
                              "partyId": 21696691,
                              "partyTypeId": 20,
                              "rowNumber": 1,
                              "type": "VALIDATIONERROR",
                              "exceptions": [
                                {
                                  "batchRunExceptionId": 1,
                                  "batchRunId": 1,
                                  "batchRunItemId": 1,
                                  "exceptionType": "INFO",
                                  "notation": "investor 21696691 is Awaiting Action. Cannot process any contribution or update until this is addressed.",
                                  "partyId": 21696691,
                                  "partyTypeId": 20,
                                  "partyTypeShortCode": "MEMBER",
                                  "severity": "I"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "description": "Detail of bulk process."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400BadRequestRESPONSE"
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "batchRunId",
          "in": "path",
          "description": "The batch run number to which these details are associated.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        {
          "name": "includeWarning",
          "in": "query",
          "description": "Defines whether warnings should be included in the results.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "includeExceptions",
          "in": "query",
          "description": "Defines whether exceptions should be included in the results.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "includeInformational",
          "in": "query",
          "description": "Defines whether Informational should be included in the results.",
          "required": false,
          "example": false,
          "schema": {
            "type": "boolean"
          }
        }
      ]
    },
    "/illustrations/request-illustration": {
      "post": {
        "tags": [
          "Illustrations"
        ],
        "summary": "Create an Illustration request",
        "description": "This endpoint will provide the ability to create an illustration request for an investor account.",
        "operationId": "POST-illustrations-request-illustrations-request",
        "requestBody": {
          "description": "The details required to create an illustration request.",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "setupOnly": {
                    "type": "boolean",
                    "description": "Indicator as to the set up required. Possible Values: - True or False. Where true will populate input tables only.",
                    "example": true
                  },
                  "userName": {
                    "type": "string",
                    "description": "The username of the user initiating the request.",
                    "example": "peter"
                  },
                  "partyTypeId": {
                    "description": "The party type for the user initiating the request. ",
                    "example": 20,
                    "type": "integer"
                  },
                  "illustrationType": {
                    "type": "string",
                    "description": "The type of illustration required. Possible values: - N = New Business, R = Review, C = Crystallise, T = TopUp, S = ISA",
                    "example": "N"
                  },
                  "productType": {
                    "type": "string",
                    "description": "The Product Type. The Product Type for which is illustration is being created.",
                    "example": "productType"
                  },
                  "investorId": {
                    "description": "The unique Composer identifier for the Investor.",
                    "example": 1,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "investorAccountId": {
                    "description": "The unique Composer identifier for the Investor Account.",
                    "example": 2,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "productTypeId": {
                    "description": "The unique Composer identifier for the Product Type.",
                    "example": 3,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "outputTypeRequired": {
                    "type": "string",
                    "description": "The type of output file required. Possible Values are: - P = a link to the full report PDF will be returned, B = a BLOB (binary object) or a reference stream via MTOM will be returned containing the PDF itself, F = Full illustration response XML will be returned.",
                    "example": "B"
                  },
                  "employerGroupId": {
                    "description": "The unique Composer identifier of the Employer Group associated to the Investor.",
                    "example": 4,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "illustrationPayload": {
                    "type": "object",
                    "required": ["planStartDate", "illustrationDate"],
                    "properties": {
                      "quoteType": {
                        "type": "integer",
                        "description": "The type of illustration required. Possible Values: - 0 = Immediate Drawdown, 4 Accumulation, 6 = In Force, 8 = Crystallised Transfer, 9 = ISA.",
                        "example": 4
                      },
                      "planStartDate": {
                        "description": "The Start Date of the Account.",
                        "example": "2023-05-05",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ]
                      },
                      "illustrationDate": {
                        "description": "The date of the illustration.",
                        "example": "2023-05-05",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ]
                      },
                      "incomeStartDate": {
                        "description": "The start date for the income to be paid.",
                        "example": "2023-05-05",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ]
                      },
                      "targetIncomeType": {
                        "type": "integer",
                        "description": "Indicator of the type of target income required. Possible Values: - 0 = No Income(Accumulation), 2 = Income Required.",
                        "example": 2
                      },
                      "incomeFrequency": {
                        "type": "integer",
                        "description": "The frequency that the income will be paid. Possible Values: - 1 = Monthly, 3 = Quarterly, 6 = Half Yearly, 12 = Annually.",
                        "example": 6
                      },
                      "targetTfcAmount": {
                        "description": "The amount to be taken as Tax Free Cash.",
                        "example": "500.00",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "targetTfcPercentage": {
                        "description": "The percentage to be taken as Tax Free Cash.",
                        "example": "8.9",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/percentage"
                          }
                        ]
                      },
                      "targetCrystallisedAmount": {
                        "description": "The amount to be crystallised.",
                        "example": "15000.00",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "vestedPercentageGad": {
                        "description": "The proportion of the GAD maximum income to be provided in Capped Drawdown.",
                        "example": "1.1",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/percentage"
                          }
                        ]
                      },
                      "targetIncreaseMethod": {
                        "type": "integer",
                        "description": "Indicator as to the target increase method to be used. Possible Values: - 0 = Level, 2 = RPI, 4 = Specified Rate",
                        "example": 2
                      },
                      "incomeAmount": {
                        "description": "The annualised amount of income the client has elected to take from drawdown.",
                        "example": "1.2",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "incomeEscalation": {
                        "description": "The escalation rate required for the income payments. Possible Values: - 0 = Level, 2 = RPI.",
                        "example": "1.3",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "finalAnnuityDate": {
                        "description": "The preferred retirement date for the Investor.",
                        "example": "2023-05-05",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ]
                      },
                      "flexibleIncome": {
                        "type": "boolean",
                        "description": "Indicator as to whether flexible income option has been selected.",
                        "example": true
                      },
                      "annuityEscalationType": {
                        "type": "integer",
                        "description": "The type of escalation that is to be applied to the annuity. Possible Value: - 0 = Level, 1 = AEI, 2 = RPI, 3 = LPI, 4 = Fixed.",
                        "example": 1
                      },
                      "annuityEscalation": {
                        "description": "The percentage used for the escalation of the annuity.",
                        "example": "1.4",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "annuitySpousePension": {
                        "description": "The percentage of the annuity income required to provide a spouse’s pension following the investor’s death.",
                        "example": "1.5",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "annuityGuaranteePeriod": {
                        "type": "integer",
                        "description": "The guarantee period to be applied to the annuity. Possible Values: - 0 = None, 5 = 5 Years, 10 = 10 Years.",
                        "example": 5
                      },
                      "annuityFrequency": {
                        "type": "integer",
                        "description": "The frequency for the annuity payments. Possible Values: - 1 = Monthly, 3 = Quarterly, 6 = Half Yearly, 12 = Annually.",
                        "example": 1
                      },
                      "annuityTiming": {
                        "type": "integer",
                        "description": "Indicator of whether annuity will be paid. Possible Values: - 0 = In Advance, 2 = In Arrears",
                        "example": 2
                      },
                      "investorDetails": {
                        "type": "object",
                        "properties": {
                          "adviserAccountId": {
                            "description": "The unique Composer identifier for the Adviser.",
                            "example": 19,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "adviserName": {
                            "type": "string",
                            "description": "The name of the Adviser.",
                            "example": "Kevin James"
                          },
                          "branchName": {
                            "type": "string",
                            "description": "The name of the Branch to which the Adviser is associated.",
                            "example": "City Financial"
                          },
                          "networkName": {
                            "type": "string",
                            "description": "The name of the IFA Network to which the Adviser is associated.",
                            "example": "Plan Wealth Management"
                          },
                          "adviceGiven": {
                            "type": "string",
                            "description": "Indicator to to whether advice has been given.",
                            "example": "Y"
                          },
                          "investorId": {
                            "description": "The unique Composer identifier for the Investor.",
                            "example": 20,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifier"
                              }
                            ]
                          },
                          "personalDetails": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The Investor’s title.",
                                "example": "Mr"
                              },
                              "firstName": {
                                "type": "string",
                                "description": "The Investor's forename.",
                                "example": "James"
                              },
                              "surname": {
                                "type": "string",
                                "description": "The Investor's surname.",
                                "example": "Brown"
                              },
                              "gender": {
                                "type": "string",
                                "description": "The Investor's gender. Possible Values: - M = Male, F = Female, N = Not Supplied.",
                                "example": "M"
                              },
                              "dateOfBirth": {
                                "description": "The Investor's date of birth.",
                                "example": "2023-05-05",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "protectedAge": {
                                "type": "integer",
                                "description": "The investor's protected pension age.",
                                "example": 55
                              },
                              "grossSalary": {
                                "description": "The Investor's gross salary.",
                                "example": "100000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "residency": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/illustrationResidency"
                                  }
                                ],
                                "description": "The Investor’s residency for tax purposes. Possible Values: - G = General, S = Scottish and C = Welsh.",
                                "example": "G"
                              }
                            },
                            "description": "The Investor’s personal details."
                          },
                          "spouseDetails": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The Spouse’s title.",
                                "example": "Mrs"
                              },
                              "firstName": {
                                "type": "string",
                                "description": "The Spouse’s forename.",
                                "example": "Jane"
                              },
                              "surname": {
                                "type": "string",
                                "description": "The Spouse’s surname.",
                                "example": "Brown"
                              },
                              "gender": {
                                "type": "string",
                                "description": "The Spouse’s gender. Possible Values: - M = Male, F = Female, N = Not Supplied.",
                                "example": "M"
                              },
                              "dateOfBirth": {
                                "description": "The Spouse’s date of birth.",
                                "example": "2023-05-05",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "protectedAge": {
                                "type": "integer",
                                "description": "The Spouse’s protected pension age.",
                                "example": 55
                              },
                              "grossSalary": {
                                "description": "The Spouse’s gross salary.",
                                "example": "55000.00",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/decimal"
                                  }
                                ]
                              },
                              "residency": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/illustrationResidency"
                                  }
                                ],
                                "description": "The Spouse’s residency status for tax purposes. Possible Values: - G = General, S = Scottish and C = Welsh.",
                                "example": "G"
                              }
                            },
                            "description": "The Spouse’s personal details."
                          },
                          "previousDrawdown": {
                            "type": "string",
                            "description": "Indicator as whether income has previously been taken from their drawdown account.",
                            "example": "Y"
                          },
                          "previousUFPLS": {
                            "type": "string",
                            "description": "Indicator as to whether Uncrystallised Fund Pension Lump Sum has previously been taken.",
                            "example": "Y"
                          }
                        },
                        "description": "The details of the Investor."
                      },
                      "contributions": {
                        "type": "array",
                        "description": "The contribution details.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "startDate": {
                              "description": "The start date of the contribution.",
                              "example": "2023-05-05",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/date"
                                }
                              ]
                            },
                            "amount": {
                              "description": "The amount of the contribution.",
                              "example": "5000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "contributionType": {
                              "type": "integer",
                              "description": "The type of contribution. Possible Values: - 1 = Standard Transfer In, 2 = Employer Regular/Single, 3 = Investor Regular/Single, 5 Bulk Transfer, 6 = Pension Credit.",
                              "example": 1
                            },
                            "escalationType": {
                              "type": "integer",
                              "description": "The type of escalation to be associated the contribution. Possible Values: - 0 = Level, 2 = RPI, 4 = Specified Rate.",
                              "example": 0
                            },
                            "escalationValue": {
                              "description": "The percentage used for the escalation of the contribution.",
                              "example": "2.8",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "frequency": {
                              "type": "integer",
                              "description": "The frequency of the contribution. Possible Values: - 0 = Single, 1 = Monthly Contribution, 3 = Quarterly Contribution, 12 = Annual Contribution",
                              "example": 1
                            },
                            "protectedRights": {
                              "type": "boolean",
                              "description": "Indicator of whether a Transfer In holds Protected or Non-Protected Rights.",
                              "example": true
                            },
                            "calculationType": {
                              "type": "integer",
                              "description": "Indicator as to how the amount will be displayed/calculated. Possible Values: - 0 = Percentage, 1 = Calculated Amount(divided by 100).",
                              "example": 1
                            }
                          }
                        }
                      },
                      "funds": {
                        "type": "array",
                        "description": "The fund details",
                        "items": {
                          "type": "object",
                          "properties": {
                            "investmentId": {
                              "description": "The unique Composer identifier for the investment.",
                              "example": 31,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "externalReference": {
                              "type": "string",
                              "description": "The external reference for the investment.",
                              "example": "SEDOL12345"
                            },
                            "fundValue": {
                              "description": "The proportion of overall investment strategy to place in this investment.",
                              "example": "3.2",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "openingFundBalance": {
                              "description": "The opening fund value for the investment.",
                              "example": "55000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "fundType": {
                              "type": "string",
                              "description": "The fund type.",
                              "example": "GROWTH"
                            }
                          }
                        }
                      },
                      "productCharges": {
                        "type": "array",
                        "description": "The details of the product charges.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "A description of the charge.",
                              "example": "Upfront"
                            },
                            "chargeTypeCode": {
                              "type": "string",
                              "description": "The unique Composer identifier for the charge. Possible Values: - SGL = Single, DFM = Discretionary Fund Manager, REG = Regular, TRL = Trail, TRN = Transfer.",
                              "example": "SGL"
                            },
                            "chargeValue": {
                              "description": "The charge value which will be either a percentage or monetary amount.",
                              "example": "3.4",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "calculationType": {
                              "type": "integer",
                              "description": "Indicator as to the type of charge. Possible Values: - 0 = Percentage, 1 = Calculated.",
                              "example": 1
                            },
                            "frequency": {
                              "type": "integer",
                              "description": "The frequency of the regular contributioncontribution. Possible Values: - 0 = Single, 1 = Monthly Contribution, 3 = Quarterly Contribution, 12 = Annual Contribution.",
                              "example": 12
                            },
                            "endMonth": {
                              "type": "integer",
                              "description": "The number of months remaining.",
                              "example": 12
                            },
                            "escalationType": {
                              "type": "integer",
                              "description": "The type of escalation to be associated to the charge. Possible Values: - 0 = Level, 1 = AEI, 2 = RPI, 4 = Specified Rate.",
                              "example": 1
                            },
                            "escalationValue": {
                              "description": "The percentage used for the escalation of the charge.",
                              "example": "3.8",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "tranches": {
                        "type": "array",
                        "description": "The tranche details related to Income Drawdown.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "currentValue": {
                              "description": "The value of the income drawdown tranche at the review date.",
                              "example": "55000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "gadMaxValue": {
                              "description": "The maximum amount of annual income currently available to be taken from the current value.",
                              "example": "4.0",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "lastReviewDate": {
                              "description": "The date on which the GAD max value was calculated – used to determine when to next review the income limits.",
                              "example": "2023-05-05",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/date"
                                }
                              ]
                            },
                            "incomeTaken": {
                              "description": "Income taken so far in this pension year.",
                              "example": "45000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "type": {
                              "type": "integer",
                              "description": "Indicator as to the type of tranche held. Possible Values: - 0 = Crystallised Arrangement, 1 = Additional Funds, 2 = Crystallised Transfer, 3 Uncrystallised Funds.",
                              "example": 1
                            },
                            "additionalFunds": {
                              "description": "Additional crystallised funds being placed into drawdown.",
                              "example": "15000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "additionalTfc": {
                              "description": "Additional Tax Free Cash to take as a part of the new monies being placed into drawdown.",
                              "example": "15000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            },
                            "reviewLimitsNow": {
                              "type": "boolean",
                              "description": "Indicator as to whether to review income limits.",
                              "example": true
                            },
                            "protectedRights": {
                              "type": "boolean",
                              "description": "Indicator whether tranche holds Protected or Non-Protected Rights.",
                              "example": true
                            },
                            "subAccount": {
                              "type": "string",
                              "description": "Indicator as to whether a Secure Retirement Income sub account exists. Possible Values: - Y or N.",
                              "example": "Y"
                            },
                            "illSubAccountTypeId": {
                              "description": "The unique Composer identifier for an illustration sub account type.",
                              "example": 45,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/identifier"
                                }
                              ]
                            },
                            "subAnnualIncome": {
                              "description": "The annual income amount from the Secure Retirement Income sub account.",
                              "example": "45000.00",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/decimal"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "protection": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "integer",
                            "description": "The type of protection held by the Investor. Possible Values: - 0 = None, 2 = Scheme Specific Lump Sum, 2 = Enhanced/Primary/TFC Protection, 3 = Fixed Protection2012, 4 = Fixed Protection 2014, 5 = Individual Protection.",
                            "example": 2
                          },
                          "protectedLifetimeAllowance": {
                            "description": "The Protected Lifetime Allowance held by the Investor.",
                            "example": "125000.00",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          },
                          "schemeSpecificLumpSum": {
                            "description": "Scheme Specific Lump Sum.",
                            "example": "100000.00",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          },
                          "enhancedProtection": {
                            "type": "boolean",
                            "description": "Indicator as to whether Investor holds Enhanced Protection. Possible Values: False, True.",
                            "example": true
                          },
                          "primaryProtection": {
                            "type": "integer",
                            "description": "Indicator as to whether Investor holds Primary Protection. Possible Values: - 0 = None, 1 = Primary Protection.",
                            "example": 1
                          },
                          "enhancedTfc": {
                            "description": "The percentage of fund available for Tax Free Cash under Enhanced Protection.",
                            "example": "5.1",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          },
                          "ltaEnhancement": {
                            "description": "The additional factor to apply to the Standard Lifetime Allowance in order to determine the investor’s Personal Lifetime Allowance.",
                            "example": "5.2",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          },
                          "protectedTfc": {
                            "description": "The value of lump-sum rights on 5th April 2006.",
                            "example": "100000.00",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/decimal"
                              }
                            ]
                          }
                        },
                        "description": "The details of protection held by the Investor."
                      },
                      "dependantsIllustration": {
                        "type": "integer",
                        "description": "Indicator as to whether the income drawdown account is for the dependent of a deceased investor. Possible Values: - 0 = Normal, 1 = Dependant's IDD.",
                        "example": 1
                      },
                      "clientRequestRequired": {
                        "type": "boolean",
                        "description": "Indicator as to whether Secure Retirement Illustration is required.",
                        "example": true
                      },
                      "clientRequest": {
                        "type": "object",
                        "properties": {
                          "illustrationType": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/clientRequestIllustrationType"
                              }
                            ],
                            "description": "The illustration type.",
                            "example": "DEFAULT"
                          },
                          "sriIllustration": {
                            "type": "object",
                            "properties": {
                              "masterInvestorAccountId": {
                                "description": "The unique Composer identifier for the master Investor Account.",
                                "example": 55,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "productTypeId": {
                                "description": "The unique Composer identifier for the product type associated to the master Investor Account.",
                                "example": 56,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifier"
                                  }
                                ]
                              },
                              "guaranteedMinimumDeathBenefit": {
                                "type": "boolean",
                                "description": "Indicator as to whether Guaranteed Minimum Death Benefit applies to master Investor Account.",
                                "example": true
                              },
                              "jointLife": {
                                "type": "boolean",
                                "description": "Indicator as to whether Joint Life applies.",
                                "example": true
                              },
                              "nextReviewDate": {
                                "description": "This is the date on which all of the secured arrangements will next be reviewed.",
                                "example": "2023-05-05",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/date"
                                  }
                                ]
                              },
                              "arrangements": {
                                "type": "array",
                                "description": "The details of the Secure Retirement Income options.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "The arrangement type must match a fund code held. This is the value of the external reference held for the ISIN code for the selected secure income asset.",
                                      "example": "AS120867"
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "description": "This will match the policy ID for the GIA wrapper held within Composer.",
                                      "example": "6548795"
                                    },
                                    "inceptionDate": {
                                      "description": "This is the date on which the secured income arrangement was set-up.",
                                      "example": "2023-05-05",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/date"
                                        }
                                      ]
                                    },
                                    "value": {
                                      "description": "This is the current value of the secured arrangement (NB. Where this is for a new arrangement, then the current value will be the purchase value).",
                                      "example": "100000.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "incomeBase": {
                                      "description": "This is the current income base from the secured arrangement.",
                                      "example": "15000.00",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "initialIncomeBase": {
                                      "description": "The total value of the money-in contribution used to create the guarantee sub account.",
                                      "example": "5.9",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "incomeFactor": {
                                      "description": "The percentage of the guaranteed income to be illustrated.",
                                      "example": "6.0",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "basis": {
                                      "type": "integer",
                                      "description": "Indicator of the basis. Possible values: - Single, Joint, Deferred.",
                                      "example": 1
                                    },
                                    "deathBenefit": {
                                      "type": "integer",
                                      "description": "Indicator as to whether Guaranteed Death Benefit applies. Possible Values: - 0 = False, 1 = True.",
                                      "example": 1
                                    },
                                    "guaranteedIncreaseRate": {
                                      "description": "The rate by which the Income Base will increase.",
                                      "example": "6.3",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "highestMonthiversary": {
                                      "description": "The highest monthiversary value in the current review year as calculated by Composer or the value of the highestmontiversay rebase held since the last SLI review date.",
                                      "example": "6.4",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "incomeRate": {
                                      "description": "The income rate that is held for the sub account.",
                                      "example": "6.5",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "preIncomeIncreaseAccrual": {
                                      "description": "The amount of guaranteed pre-income increase accrued.",
                                      "example": "6.6",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/decimal"
                                        }
                                      ]
                                    },
                                    "preIncomeIncreaseAccrualDate": {
                                      "description": "The date the accrual calculation took place.",
                                      "example": "2023-05-05",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/date"
                                        }
                                      ]
                                    },
                                    "charges": {
                                      "type": "array",
                                      "description": "The Product or Guarantee charges associated to the secure income arrangement.",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "description": {
                                            "type": "string",
                                            "description": "The name of the charge.",
                                            "example": "Guarantee Charge"
                                          },
                                          "chargeValue": {
                                            "description": "The relevant rate for the charge.",
                                            "example": "6.7",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/decimal"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "description": "The data required to generate an illustration that includes one or more Secured Retirement Income arrangements."
                          }
                        },
                        "description": "The generic information needed to produce a Secure Retirement Income Illustration."
                      },
                      "mixedContribution": {
                        "type": "boolean",
                        "description": "The mixed contribution.",
                        "example": true
                      },
                      "wrapAccountValuation": {
                        "description": "The total of all account values to be include in calculations.",
                        "example": "100000.00",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "totalInvestment": {
                        "description": "The total amount to be received from the Investor.",
                        "example": "6.9",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "totalInitialCharge": {
                        "description": "The total initial charge to be deducted from the balance after paying out the lump sum.",
                        "example": "7.0",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "totalInitialCommission": {
                        "description": "The total initial commission to be deducted from the balance after paying out the lump sum.",
                        "example": "7.1",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "taxFreeLumpSum": {
                        "description": "The Tax Free Cash lump sum.",
                        "example": "7.2",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "taxedLumpSum": {
                        "description": "The taxed lump sum.",
                        "example": "7.3",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "totalSubAccounts": {
                        "description": "The total amount in the Secure Retirement Income sub accounts.",
                        "example": "7.4",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "adhocPaymentAmount": {
                        "description": "The amount of an ad-hoc income payment.",
                        "example": "7.5",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/decimal"
                          }
                        ]
                      },
                      "adhocPaymentDate": {
                        "description": "The date of the ad-hoc income payment.",
                        "example": "2023-05-05",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/date"
                          }
                        ]
                      }
                    },
                    "description": "The data required for an illustration."
                  },
                  "incomeRequired": {
                    "type": "boolean",
                    "description": "Indicator as to whether income required.",
                    "example": true
                  },
                  "targetIDDAccountId": {
                    "description": "The unique Composer identifier for the targeted Income Drawdown account.",
                    "example": 76,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identifier"
                      }
                    ]
                  },
                  "contributionType": {
                    "description": "The contribution type.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/illustrationRequestContributionType"
                      }
                    ],
                    "example": "S"
                  },
                  "clientSpecificValues": {
                    "type": "array",
                    "description": "The details of client specific values required for the illustration.",
                    "items": {
                      "type": "object",
                      "description": "This contains client specific key/value pairs.",
                      "properties": {
                        "shortCode": {
                          "type": "string",
                          "description": "The code by which the purpose of the value can be determined .",
                          "example": "VALPURP"
                        },
                        "qualifierValue": {
                          "type": "string",
                          "description": "If the name value pair needs to be more specific than just the illustration itself (e.g. it needs to refer to a particular tranche id) then this column can be used to store the other id or qualifying value.",
                          "example": "AB986"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value to be sent to the illustration engine.",
                          "example": "100000.00"
                        }
                      }
                    }
                  },
                  "investmentModelSelected": {
                    "type": "string",
                    "description": "Indicator as to whether user selected an investment model to be applied to the illustration. Possible Values: - Y or N",
                    "example": "Y"
                  },
                  "fullCrystallisation": {
                    "type": "string",
                    "description": "Indicator as to whether the illustration is full or partial crystallisation. Possible Values: - Y = Full Crystallisation, N = Partial Crystallisation.",
                    "example": "Y"
                  },
                  "requestAuditLog": {
                    "type": "object",
                    "properties": {
                      "auditActive": {
                        "type": "boolean",
                        "description": "Indicator as to the audit status.",
                        "example": true
                      },
                      "includeConfigurationSets": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include configuration settings.",
                        "example": true
                      },
                      "includeDiaryEntries": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include diary entries.",
                        "example": true
                      },
                      "includeScenarioDetails": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include scenario details.",
                        "example": true
                      },
                      "includeTransactionOutcomes": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include transaction outcomes.",
                        "example": true
                      },
                      "includeInvestmentStrategy": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include investment strategy.",
                        "example": true
                      },
                      "includeCommutationalTables": {
                        "type": "boolean",
                        "description": "Indicator as to whether to include commutational tables.",
                        "example": true
                      }
                    },
                    "description": "Indicator as to whether an audit log is required."
                  },
                  "requestAdditionalProperties": {
                    "type": "boolean",
                    "description": "Indicator as to whether additional properties required.",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "responseDetails" : {
                          "type" : "object",
                          "properties" : {
                            "illustrationId" : {
                              "description" : "The unique identifier for the illustration.",
                              "example" : 1,
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/identifier"
                              } ]
                            },
                            "ticket" : {
                              "type" : "string",
                              "description" : "The ticket.",
                              "example" : "ticket"
                            },
                            "fileContent" : {
                              "type" : "string",
                              "description" : "The file content.",
                              "example" : "fileContent"
                            },
                            "fileUrl" : {
                              "type" : "string",
                              "description" : "The file url.",
                              "example" : "http: //www.google.com.vn/abc"
                            }
                          },
                          "description" : "Details of the response for the illustration request."
                        },
                        "responseBase" : {
                          "type" : "object",
                          "properties" : {
                            "description" : {
                              "type" : "string",
                              "description" : "The description of the illustration.",
                              "example" : "New Business"
                            },
                            "illustrationType" : {
                              "type" : "string",
                              "description" : "The illustration type. Possible Values: N, R, C, T, S.",
                              "example" : "N"
                            },
                            "illustrationId" : {
                              "description" : "The unique identifier for the illustration.",
                              "example" : 2,
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/identifier"
                              } ]
                            },
                            "productType" : {
                              "type" : "string",
                              "description" : "The product type.",
                              "example" : "Pension Annuity"
                            },
                            "immediateAnnuity" : {
                              "description" : "The estimated value of the immediate annuity.",
                              "example" : "150000.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "openingBalance" : {
                              "description" : "The opening balance.",
                              "example" : "100000.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "lumpSum" : {
                              "description" : "The Target PCLS.",
                              "example" : "1500.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "providerName" : {
                              "type" : "string",
                              "description" : "The name of the provider.",
                              "example" : "Standard Life"
                            },
                            "illustrationFromDate" : {
                              "description" : "The date from which Illustration is Projected From.",
                              "example" : "2023-05-05",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/date"
                              } ]
                            },
                            "illustrationRetirementDate" : {
                              "description" : "The retirement date for the Investor for which illustration is being generated.",
                              "example" : "2023-05-05",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/date"
                              } ]
                            },
                            "planCommencementDate" : {
                              "description" : "The commencement date of the account.",
                              "example" : "2023-05-05",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/date"
                              } ]
                            },
                            "currMaxPension" : {
                              "description" : "The current GAD Maximum Pension Income available where account is held under Capped Drawdown.",
                              "example" : "150.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "flexiblePension" : {
                              "type" : "string",
                              "description" : "Indicator as to whether flexible income option has been selected. Possible Values: - Y or N.",
                              "example" : "Y"
                            },
                            "paymentAmount" : {
                              "description" : "The annual amount of Income requested.",
                              "example" : "150000.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "paymentFrequency" : {
                              "type" : "string",
                              "description" : "Frequency of when Payment will be made, e.g. monthly.",
                              "example" : "Monthly"
                            },
                            "assumedMaxLta" : {
                              "description" : "The maximum Lifetime Allowance assumed for Calculations.",
                              "example" : "150000.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "preferredRetirementAge" : {
                              "type" : "integer",
                              "description" : "The preferred retirement age for the Investor.",
                              "example" : 60
                            },
                            "productTypeId" : {
                              "description" : "The unique Composer identifier for the product type.",
                              "example" : 10,
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/identifier"
                              } ]
                            },
                            "adhocPaymentAmount" : {
                              "description" : "The ad-hoc income payment amount.",
                              "example" : "1500.00",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/decimal"
                              } ]
                            },
                            "adhocPaymentDate" : {
                              "description" : "The ad-hoc income payment date.",
                              "example" : "2023-05-05",
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/date"
                              } ]
                            },
                            "investorDetails" : {
                              "type" : "object",
                              "properties" : {
                                "personalDetails" : {
                                  "type" : "object",
                                  "properties" : {
                                    "title" : {
                                      "type" : "string",
                                      "description" : "The Investor’s title.",
                                      "example" : "Mr"
                                    },
                                    "firstName" : {
                                      "type" : "string",
                                      "description" : "The Investor’s forename.",
                                      "example" : "James"
                                    },
                                    "surname" : {
                                      "type" : "string",
                                      "description" : "The Investor’s surname.",
                                      "example" : "Brown"
                                    },
                                    "gender" : {
                                      "type" : "string",
                                      "description" : "The Investor’s gender.",
                                      "example" : "M"
                                    },
                                    "dateOfBirth" : {
                                      "description" : "The Investor’s date of birth.",
                                      "example" : "2023-05-05",
                                      "allOf" : [ {
                                        "$ref" : "#/components/schemas/date"
                                      } ]
                                    },
                                    "spouseDateOfBirth" : {
                                      "description" : "The date of birth of the Investor’s.",
                                      "example" : "2023-05-05",
                                      "allOf" : [ {
                                        "$ref" : "#/components/schemas/date"
                                      } ]
                                    },
                                    "adviserName" : {
                                      "type" : "string",
                                      "description" : "The name of the Adviser.",
                                      "example" : "Kevin James"
                                    },
                                    "branchName" : {
                                      "type" : "string",
                                      "description" : "The name of the Branch to which the Adviser is associated.",
                                      "example" : "IFA Advisory Group"
                                    },
                                    "networkName" : {
                                      "type" : "string",
                                      "description" : "The name of the IFA Network to which the Adviser is associated.",
                                      "example" : "A1 Financial Services"
                                    },
                                    "adviceGiven" : {
                                      "type" : "string",
                                      "description" : "Indicator to to whether advice has been given.",
                                      "example" : "Y"
                                    }
                                  },
                                  "description" : "The Investor’s personal details."
                                },
                                "previousDrawdown" : {
                                  "type" : "string",
                                  "description" : "Indicator as whether income has previously been taken from their drawdown account.",
                                  "example" : "Y"
                                },
                                "previousUFPLS" : {
                                  "type" : "string",
                                  "description" : "Indicator as to whether Uncrystallised Fund Pension Lump Sum has previously been taken.",
                                  "example" : "Y"
                                }
                              },
                              "description" : "The details of the Investor."
                            },
                            "smpiIllustrationId" : {
                              "description" : "The unique identifier for an SMPI illustration.",
                              "example" : 13,
                              "allOf" : [ {
                                "$ref" : "#/components/schemas/identifier"
                              } ]
                            },
                            "illustrations" : {
                              "type" : "array",
                              "description" : "Details of the Illustration.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "growthType" : {
                                    "type" : "string",
                                    "description" : "The growth type, i.e. Low, Mid or High.",
                                    "example" : "Mid"
                                  },
                                  "growthRate" : {
                                    "description" : "The growth rate.",
                                    "example" : "1.4",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "type" : {
                                    "type" : "string",
                                    "description" : "Indicator as to whether projection is Real or Nominal.",
                                    "example" : "Real"
                                  },
                                  "projectedFund" : {
                                    "description" : "The Projected Fund Value at Final Annuity Date.",
                                    "example" : "150000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "annuity" : {
                                    "description" : "The annuity the Projected Fund can buy.",
                                    "example" : "45000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "lumpSum" : {
                                    "description" : "The maximum lumpsum from Projected Fund.",
                                    "example" : "45000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "reducedAnnuity" : {
                                    "description" : "The maximum annuity after deducting lumpsum from Projected Fund.",
                                    "example" : "50000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "annualisedAccruedAnnuity" : {
                                    "description" : "The annualised accrued annuity value.",
                                    "example" : "80000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "crystallisedProjection" : {
                                    "type" : "object",
                                    "properties" : {
                                      "summary" : {
                                        "type" : "object",
                                        "properties" : {
                                          "term" : {
                                            "type" : "integer",
                                            "description" : "Projection at end of 10 years from Illustration Date.",
                                            "example" : 21
                                          },
                                          "openMarketValue" : {
                                            "description" : "Fund Value at 10 Years.",
                                            "example" : "100000.00",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "annuity" : {
                                            "description" : "Annuity which projected fund can buy.",
                                            "example" : "50000.00",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "predictedAgeAtZero" : {
                                            "type" : "integer",
                                            "description" : "Predicted Age at Zero.",
                                            "example" : 55
                                          }
                                        },
                                        "description" : "Summary of the values used for the crystallised projection."
                                      },
                                      "projectedBenefits" : {
                                        "type" : "array",
                                        "description" : "Details of the projected benefits.",
                                        "items" : {
                                          "type" : "object",
                                          "description": "Projected Benefits Year",
                                          "properties" : {
                                            "rowDescription" : {
                                              "type" : "string",
                                              "description" : "2032",
                                              "example" : "rowDescription"
                                            },
                                            "fund" : {
                                              "description" : "Projected Value of Fund at the end of Projected Year.",
                                              "example" : "100000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "maximumIncome" : {
                                              "description" : "Maximum Income.",
                                              "example" : "45000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "requestedIncome" : {
                                              "description" : "Requested Income.",
                                              "example" : "40000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "actualIncome" : {
                                              "description" : "Actual Income.",
                                              "example" : "42000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "inflationFund" : {
                                              "description" : "Maximum Income after Inflation.",
                                              "example" : "44000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "inflationMaximumIncome" : {
                                              "description" : "Requested Income after Inflation.",
                                              "example" : "47000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "inflationRequestedIncome" : {
                                              "description" : "Actual Income after Inflation.",
                                              "example" : "47000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "inflationActualIncome" : {
                                              "description" : "The actual income after taking into account inflation.",
                                              "example" : "47000.00",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            },
                                            "age" : {
                                              "type" : "integer",
                                              "description" : "Age.",
                                              "example" : 32
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "description": "Details of the crystallised projection"
                                  }
                                }
                              }
                            },
                            "effectOfDeductions" : {
                              "type" : "object",
                              "properties" : {
                                "reducedYieldAdviser" : {
                                  "description" : "Growth Rate after provider and fund management charges.",
                                  "example" : "3.6",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "effectAdviser" : {
                                  "description" : "Effect of Provider and Fund Management Charges on growth rate.",
                                  "example" : "3.7",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "reducedYieldAll" : {
                                  "description" : "Growth Rate after Provider, Adviser and Fund Management charges.",
                                  "example" : "3.8",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "effectAll" : {
                                  "description" : "Effect of Provider ,Adviser and Fund Management Charges on growth rate.",
                                  "example" : "3.9",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "firstYearCharge" : {
                                  "description" : "The first year charge.",
                                  "example" : "4.1",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "yearMoneyRunsOut" : {
                                  "type" : "integer",
                                  "description" : "The year money will run out.",
                                  "example" : 2032
                                },
                                "investorAgeWhenMoneyRunsOut" : {
                                  "type" : "integer",
                                  "description" : "The investor's age when money runs out.",
                                  "example" : 43
                                },
                                "rows" : {
                                  "type" : "array",
                                  "description" : "Details for each charge year.",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "chargeYear" : {
                                        "type" : "string",
                                        "description" : "Projected Year.",
                                        "example" : "1992"
                                      },
                                      "totalPaidIn" : {
                                        "description" : "Total Value Paid In.",
                                        "example" : "470000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "totalWithdrawn" : {
                                        "description" : "Total Value Withdrawn.",
                                        "example" : "47000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "fundNoCharges" : {
                                        "description" : "Projected Fund with No Charges.",
                                        "example" : "47000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "fundAdviserCharges" : {
                                        "description" : "Projected Fund After Provider and Fund Manager Charges.",
                                        "example" : "470000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "fundAllCharges" : {
                                        "description" : "Projected Fund After Provider, Adviser and Fund Manager Charges.",
                                        "example" : "470000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    }
                                  }
                                }
                              },
                              "description" : "Details of the effect of deductions."
                            },
                            "criticalYieldsA" : {
                              "type" : "array",
                              "description" : "Details used for Critical Yield A returns.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "description" : {
                                    "type" : "string",
                                    "description" : "Client Age for Which Critical Yield is calculated.",
                                    "example" : "55"
                                  },
                                  "criticalYield" : {
                                    "description" : "The expected Critical Yield A.",
                                    "example" : "5.0",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "healthStatus" : {
                                    "type" : "string",
                                    "description" : "The health status of the Investor.",
                                    "example" : "Good"
                                  }
                                }
                              }
                            },
                            "criticalYieldsB" : {
                              "type" : "array",
                              "description" : "Details used for Critical Yield B returns.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "description" : {
                                    "type" : "string",
                                    "description" : "Client Age for Which Critical Yield is calculated.",
                                    "example" : "60"
                                  },
                                  "criticalYield" : {
                                    "description" : "The expected Critical Yield B.",
                                    "example" : "5.1",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "annuityYield" : {
                                    "description" : "The annuity yield.",
                                    "example" : "5.2",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "healthStatus" : {
                                    "type" : "string",
                                    "description" : "The health status of the Investor.",
                                    "example" : "Good"
                                  }
                                }
                              }
                            },
                            "pensionRates" : {
                              "type" : "object",
                              "properties" : {
                                "lowRate" : {
                                  "description" : "Assumed Annuity Low Growth Rate.",
                                  "example" : "5.3",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "medRate" : {
                                  "description" : "Assumed Annuity Medium Growth Rate.",
                                  "example" : "5.4",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "highRate" : {
                                  "description" : "Assumed Annuity High Growth Rate.",
                                  "example" : "5.5",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "smpiRate" : {
                                  "description" : "Assumed Annuity Rate for SMPI.",
                                  "example" : "5.6",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "currentRate" : {
                                  "description" : "Assumed Current Annuity Growth Rate.",
                                  "example" : "5.7",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "assumedInflationRate" : {
                                  "description" : "Assumed Current Inflation Rate.",
                                  "example" : "5.8",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                }
                              },
                              "description" : "The details of the pension rates used."
                            },
                            "contributions" : {
                              "type" : "array",
                              "description" : "Details of the contributions.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "startDate" : {
                                    "description" : "Start Date for Contribution.",
                                    "example" : "2023-05-05",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/date"
                                    } ]
                                  },
                                  "paymentType" : {
                                    "type" : "string",
                                    "description" : "The Contrbution Type, e.g. Personal Regular, Employer Regular, Personal Single, Employer Single, Transfer In.",
                                    "example" : "Personal Regular"
                                  },
                                  "amount" : {
                                    "description" : "Contribution Amount.",
                                    "example" : "7000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "frequency" : {
                                    "type" : "string",
                                    "description" : "Contribution Frequency, e.g. monthly, quarterly, annually",
                                    "example" : "Monthly"
                                  },
                                  "escalationType" : {
                                    "type" : "integer",
                                    "description" : "The type of escalation to be associated the contribution. Possible Values: - 0 = Level, 2 = RPI, 4 = Specified Rate.",
                                    "example" : 2
                                  },
                                  "escalationValue" : {
                                    "description" : "The percentage used for the escalation of the contribution.",
                                    "example" : "6.1",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "taxReliefAmount" : {
                                    "description" : "Contribution tax relief amount.",
                                    "example" : "5000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            },
                            "investmentFunds" : {
                              "type" : "array",
                              "description" : "List of All the Funds for Which Illustration has been generated.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "name" : {
                                    "type" : "string",
                                    "description" : "The name of the fund.",
                                    "example" : "FS Schroder Asian Alpha"
                                  },
                                  "percentage" : {
                                    "description" : "Percentage Invested in the Fund.",
                                    "example" : "6.3",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/percentage"
                                    } ]
                                  },
                                  "lowGrowth" : {
                                    "description" : "Funds Low Growth Rate.",
                                    "example" : "6.4",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "midGrowth" : {
                                    "description" : "Funds Medium Growth Rate.",
                                    "example" : "6.5",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "highGrowth" : {
                                    "description" : "Funds High Growth Rate.",
                                    "example" : "6.6",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "amc" : {
                                    "description" : "Total Charge Rate for the Fund.",
                                    "example" : "6.7",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "totalChargeRate" : {
                                    "description" : "Always 0 as not populated in Response.",
                                    "example" : "0.0",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "structuredFundIndicator" : {
                                    "type" : "string",
                                    "description" : "Indicator as to whether a structured fund.",
                                    "example" : "structuredFundIndicator"
                                  },
                                  "structuredFundMaturityDate" : {
                                    "description" : "The maturity date for the structured fund.",
                                    "example" : "2023-05-05",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/date"
                                    } ]
                                  },
                                  "structuredFundEarlyExitCharge" : {
                                    "description" : "The early exit charge for the structured fund.",
                                    "example" : "6.9",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "volatilityGroup" : {
                                    "type" : "integer",
                                    "description" : "The volatility group assigned to the fund.",
                                    "example" : 70
                                  },
                                  "volatilityGroupGrowth" : {
                                    "description" : "The volatility group growth rate.",
                                    "example" : "7.1",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "projectedFundValue" : {
                                    "description" : "The projected fund value.",
                                    "example" : "7.2",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            },
                            "productCharges" : {
                              "type" : "array",
                              "description" : "Details of the Product Charges.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "description" : {
                                    "type" : "string",
                                    "description" : "Charge Description, e.g. Initial Adviser Charge (Transfers).",
                                    "example" : "Initial Adviser Charge"
                                  },
                                  "chargeValue" : {
                                    "description" : "Charge Value either Percentage or Value based on Calculation Type.",
                                    "example" : "7.3",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "frequency" : {
                                    "type" : "string",
                                    "description" : "Charge Frequency",
                                    "example" : "Single"
                                  },
                                  "calculationType" : {
                                    "type" : "integer",
                                    "description" : "The calculation type where 1 is Amount and 0 is percentage.",
                                    "example" : 1
                                  },
                                  "endMonth" : {
                                    "type" : "integer",
                                    "description" : "The end month.",
                                    "example" : 11
                                  }
                                }
                              }
                            },
                            "adviserCommissions" : {
                              "type" : "array",
                              "description" : "Details of the Adviser Charges.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "name" : {
                                    "type" : "string",
                                    "description" : "The adviser charge.",
                                    "example" : "Upfront"
                                  },
                                  "commissionAmount" : {
                                    "description" : "The charge amount.",
                                    "example" : "5000.00",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            },
                            "annuityParams" : {
                              "type" : "object",
                              "properties" : {
                                "frequency" : {
                                  "type" : "integer",
                                  "description" : "The Annuity Payment Frequency.",
                                  "example" : 12
                                },
                                "guaranteePeriod" : {
                                  "type" : "integer",
                                  "description" : "The Annuity Guarantee Period.",
                                  "example" : 77
                                },
                                "advanceArrears" : {
                                  "type" : "string",
                                  "description" : "Annuity Payment in Advance or Arrears.",
                                  "example" : "Y"
                                },
                                "spouseProportion" : {
                                  "description" : "Spouse Pension Proportion after investors death.",
                                  "example" : "7.8",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "escalation" : {
                                  "description" : "Annuity Escalation.",
                                  "example" : "7.9",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                }
                              },
                              "description" : "The parameters set for the annuity."
                            },
                            "projectedFunds" : {
                              "type" : "array",
                              "description" : "The projected funds.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "name" : {
                                    "type" : "string",
                                    "description" : "The name of the Investment Fund.",
                                    "example" : "FS Schroder Asian Alpha Plus Z Acc"
                                  },
                                  "yearProjected" : {
                                    "type" : "array",
                                    "description" : "The Projected Year.",
                                    "items" : {
                                      "type" : "object",
                                      "properties" : {
                                        "value" : {
                                          "type" : "integer",
                                          "description" : "The value of the Projected Fund.",
                                          "example" : 50000
                                        },
                                        "amount" : {
                                          "description" : "The amount of the Projected Fund.",
                                          "example" : "50000.00",
                                          "allOf" : [ {
                                            "$ref" : "#/components/schemas/decimal"
                                          } ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "additionalData" : {
                              "type" : "array",
                              "description" : "Details of additional data.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "status" : {
                                    "type" : "string",
                                    "description" : "The status.",
                                    "example" : "status"
                                  },
                                  "feeGroupName" : {
                                    "type" : "string",
                                    "description" : "The fee group name.",
                                    "example" : "feeGroupName"
                                  },
                                  "projectedFundValue" : {
                                    "type" : "integer",
                                    "description" : "The projected fund value.",
                                    "example" : 82
                                  },
                                  "increaseOnBasicStatus" : {
                                    "type" : "integer",
                                    "description" : "The increase on basic status.",
                                    "example" : 83
                                  },
                                  "benefitOfReducedFee" : {
                                    "type" : "integer",
                                    "description" : "The benefit of reduced fee.",
                                    "example" : 84
                                  }
                                }
                              }
                            }
                          },
                          "description" : "The details of the base response."
                        },
                        "auditLog" : {
                          "type" : "object",
                          "properties" : {
                            "annuitySet" : {
                              "type" : "object",
                              "properties" : {
                                "name" : {
                                  "type" : "string",
                                  "description" : "The annuity set.",
                                  "example" : "name"
                                },
                                "from" : {
                                  "type" : "string",
                                  "description" : "From Date.",
                                  "example" : "2023-05-06"
                                },
                                "to" : {
                                  "type" : "string",
                                  "description" : "To Date.",
                                  "example" : "2023-07-06"
                                },
                                "guaranteePeriod" : {
                                  "type" : "integer",
                                  "description" : "The number of years the annuity would remain in payment for even if the investor died within this period.",
                                  "example" : 85
                                },
                                "paymentsPerAnnum" : {
                                  "type" : "integer",
                                  "description" : "The number of annuity payments each year.",
                                  "example" : 6
                                },
                                "inAdvance" : {
                                  "type" : "boolean",
                                  "description" : "Indicator as whether annuity paid in advance.",
                                  "example" : true
                                },
                                "dependantsPension" : {
                                  "description" : "The proportion of the investor’s annuity amount payable to their dependant on their death.",
                                  "example" : "8.7",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "escalationRate" : {
                                  "description" : "The rate at which annuity payments increase each year.",
                                  "example" : "8.8",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                }
                              },
                              "description" : "Assumptions."
                            },
                            "assumptionSet" : {
                              "type" : "object",
                              "properties" : {
                                "id" : {
                                  "description" : "The identifier for the assumption set.",
                                  "example" : 89,
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/identifier"
                                  } ]
                                },
                                "from" : {
                                  "type" : "string",
                                  "description" : "From Date.",
                                  "example" : "2023-05-06"
                                },
                                "to" : {
                                  "type" : "string",
                                  "description" : "To Date.",
                                  "example" : "2023-07-06"
                                },
                                "assumptions" : {
                                  "type" : "array",
                                  "description" : "The assumptions.",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "description" : {
                                        "type" : "string",
                                        "description" : "Details of the assumptions.",
                                        "example" : "description"
                                      },
                                      "giaGrowth" : {
                                        "description" : "The GIA Growth Rate.",
                                        "example" : "9.0",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "growth" : {
                                        "description" : "The Growth Rate.",
                                        "example" : "9.1",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "rpiInflation" : {
                                        "description" : "RPI Inflation.",
                                        "example" : "9.2",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "contributionInflation" : {
                                        "description" : "Contribution Inflation.",
                                        "example" : "9.3",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "expenseInflation" : {
                                        "description" : "Expense Inflation.",
                                        "example" : "9.4",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "annuityYield" : {
                                        "description" : "Annuity Yield.",
                                        "example" : "9.5",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    }
                                  }
                                }
                              },
                              "description" : "Basic Rate Tax."
                            },
                            "basicRateTaxSet" : {
                              "type" : "object",
                              "properties" : {
                                "id" : {
                                  "description" : "The identifier for the Basic Rate Tax set.",
                                  "example" : 96,
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/identifier"
                                  } ]
                                },
                                "from" : {
                                  "type" : "string",
                                  "description" : "From Date.",
                                  "example" : "2023-05-06"
                                },
                                "to" : {
                                  "type" : "string",
                                  "description" : "To Date.",
                                  "example" : "2023-07-06"
                                },
                                "residencies" : {
                                  "type" : "array",
                                  "description" : "The tax residencies for the UK.",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "residency" : {
                                        "type" : "string",
                                        "description" : "The area of the UK that the rate applies to. If not specified in a request, the rate for England will be used.",
                                        "example" : "England"
                                      },
                                      "rate" : {
                                        "description" : "The basic rate tax rate for that year and region of the UK.",
                                        "example" : "9.7",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    }
                                  }
                                }
                              },
                              "description" : "Standars Set."
                            },
                            "standardSet" : {
                              "type" : "object",
                              "properties" : {
                                "from" : {
                                  "type" : "string",
                                  "description" : "From Date.",
                                  "example" : "2023-05-06"
                                },
                                "to" : {
                                  "type" : "string",
                                  "description" : "To Date.",
                                  "example" : "2023-07-06"
                                },
                                "currentAnnuityYield" : {
                                  "description" : "Current Annuity Yield.",
                                  "example" : "9.8",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "lifetimeAllowance" : {
                                  "type" : "integer",
                                  "description" : "The current value of the Standard Lifetime Allowance.",
                                  "example" :  15000000
                                },
                                "annuityExpense" : {
                                  "description" : "The expense loading when calculating annuity rates.",
                                  "example" : "0.1",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "minimumIncomeForCriticalYieldB" : {
                                  "description" : "The Minimum Income set for Critical Yield B.",
                                  "example" : "0.2",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "maximumIncomeForCriticalYieldB" : {
                                  "description" : "The Maximum Income set for Critical Yield B.",
                                  "example" : "0.3",
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/decimal"
                                  } ]
                                },
                                "assumedAgeDifference" : {
                                  "type" : "integer",
                                  "description" : "Where the date of birth of the investor’s dependent is not known, it is assumed that if they are of different genders, the male will be this many years older than the female. This value is set by the regulations.",
                                  "example" : 4
                                },
                                "maximumCriticalYieldStartAge" : {
                                  "type" : "integer",
                                  "description" : "The Maximum Start Age set for Critical Yield calculations.",
                                  "example" : 5
                                },
                                "maximumCriticalYieldAge" : {
                                  "type" : "integer",
                                  "description" : "The Maximum Age set for Critical Yield calculations.",
                                  "example" : 6
                                },
                                "criticalYieldAgeOffset" : {
                                  "type" : "integer",
                                  "description" : "The offset is added to the investor’s current age and then rounded down to the nearest multiple of 5 to calculate the age at which the first (of up to 3) critical yields will be calculated.",
                                  "example" : 7
                                },
                                "iSATerm" : {
                                  "type" : "integer",
                                  "description" : "The ISA Term.",
                                  "example" : 8
                                },
                                "criticalYieldAgeExceededMessage" : {
                                  "type" : "string",
                                  "description" : "The message included in the internal response object when the investor’s age will mean that no critical yields at all have been calculated.",
                                  "example" : "A"
                                },
                                "noCriticalYieldBDueToLowIncomeMessage" : {
                                  "type" : "string",
                                  "description" : "The message included in the internal response object if a critical yield B is not calculated due to the selected income being too low.",
                                  "example" : "B"
                                },
                                "noCriticalYieldBDueToHighIncomeMessage" : {
                                  "type" : "string",
                                  "description" : "The message included in the internal response object if a critical yield B is not calculated due to the selected income being too high.",
                                  "example" : "C"
                                },
                                "includeCalculationDetailInOutput" : {
                                  "type" : "boolean",
                                  "description" : "Indicator as to whether calculation input/output included.",
                                  "example" : true
                                },
                                "pxA16MortalityTableIllustrationTypes" : {
                                  "type" : "string",
                                  "description" : "The PX16 mortality table illustration types.",
                                  "example" : "D"
                                }
                              },
                              "description" : "Volitilty."
                            },
                            "volatilityGroupSet" : {
                              "type" : "object",
                              "properties" : {
                                "id" : {
                                  "description" : "The unique identifier of the group set.",
                                  "example" : 9,
                                  "allOf" : [ {
                                    "$ref" : "#/components/schemas/identifier"
                                  } ]
                                },
                                "from" : {
                                  "type" : "string",
                                  "description" : "From Date.",
                                  "example" : "2023-05-06"
                                },
                                "to" : {
                                  "type" : "string",
                                  "description" : "To Date.",
                                  "example" : "2023-06-06"
                                },
                                "groups" : {
                                  "type" : "array",
                                  "description" : "Details of the groups.",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "id" : {
                                        "description" : "The identifier for the group.",
                                        "example" : 10,
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/identifier"
                                        } ]
                                      },
                                      "minVolatility" : {
                                        "description" : "The minimum volatility value.",
                                        "example" : "1.1",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "maxVolatility" : {
                                        "description" : "The maximum volatility value.",
                                        "example" : "1.2",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "growth" : {
                                        "description" : "The growth rate.",
                                        "example" : "1.3",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    }
                                  }
                                }
                              },
                              "description" : "Diary Entries."
                            },
                            "diaryEntries" : {
                              "type" : "array",
                              "description" : "Details of Diary Entries.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "date" : {
                                    "description" : "The date of the entry.",
                                    "example" : "2023-05-05",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/date"
                                    } ]
                                  },
                                  "type" : {
                                    "type" : "string",
                                    "description" : "The type of entry.",
                                    "example" : "type"
                                  },
                                  "amount" : {
                                    "description" : "The amount.",
                                    "example" : "1.4",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            },
                            "scenarios" : {
                              "type" : "array",
                              "description" : "Scenarios.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "additionalOffset" : {
                                    "description" : "Details of Additional Offset.",
                                    "example" : "1.5",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "basis" : {
                                    "type" : "object",
                                    "properties" : {
                                      "assumptionSet" : {
                                        "type" : "object",
                                        "properties" : {
                                          "description" : {
                                            "type" : "string",
                                            "description" : "The type.",
                                            "example" : "description"
                                          },
                                          "taxedGrowth" : {
                                            "description" : "The Taxed Growth Rate.",
                                            "example" : "1.6",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "growth" : {
                                            "description" : "The Growth Rate.",
                                            "example" : "1.7",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "rPIInflation" : {
                                            "description" : "RPI Inflation.",
                                            "example" : "1.8",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "expenseInflation" : {
                                            "description" : "Expense Inflation.",
                                            "example" : "1.9",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "annuityYield" : {
                                            "description" : "Annuity Yield.",
                                            "example" : "2.0",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          },
                                          "contributionInflation" : {
                                            "description" : "Contribution Inflation.",
                                            "example" : "2.1",
                                            "allOf" : [ {
                                              "$ref" : "#/components/schemas/decimal"
                                            } ]
                                          }
                                        },
                                        "description" : "Overrides."
                                      },
                                      "overrideAssetGrowth" : {
                                        "type" : "boolean",
                                        "description" : "Indicator as whether there is an override on asset growth rate.",
                                        "example" : true
                                      },
                                      "ignoreCharges" : {
                                        "type" : "boolean",
                                        "description" : "Indicator as to whether charges are ignored.",
                                        "example" : true
                                      }
                                    },
                                    "description" : "The basis of the assumption set."
                                  },
                                  "criticalYieldAIncome" : {
                                    "description" : "The Critical Yield A Income.",
                                    "example" : "2.2",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "description" : {
                                    "type" : "string",
                                    "description" : "Details of miscellaneous information.",
                                    "example" : "Additional Information"
                                  },
                                  "drawdownMode" : {
                                    "type" : "string",
                                    "description" : "The Drawdown Mode.",
                                    "example" : "Normal"
                                  },
                                  "outcomes" : {
                                    "type" : "array",
                                    "description" : "Transaction Outcomes.",
                                    "items" : {
                                      "type" : "object",
                                      "properties" : {
                                        "description" : {
                                          "type" : "string",
                                          "description" : "Details of the Outcomes.",
                                          "example" : "description"
                                        },
                                        "diaryEntry" : {
                                          "type" : "object",
                                          "properties" : {
                                            "date" : {
                                              "description" : "The date of the diary entry.",
                                              "example" : "2023-05-05",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/date"
                                              } ]
                                            },
                                            "type" : {
                                              "type" : "string",
                                              "description" : "The type of diary entry.",
                                              "example" : "type"
                                            },
                                            "amount" : {
                                              "description" : "The amount.",
                                              "example" : "2.3",
                                              "allOf" : [ {
                                                "$ref" : "#/components/schemas/decimal"
                                              } ]
                                            }
                                          },
                                          "description" : "Account Stooped."
                                        }
                                      }
                                    }
                                  },
                                  "stopped" : {
                                    "type" : "boolean",
                                    "description" : "Indicator as to whether the account has been stopped.",
                                    "example" : true
                                  },
                                  "stoppedOn" : {
                                    "description" : "The date the account was stopped.",
                                    "example" : "2023-05-05",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/date"
                                    } ]
                                  }
                                }
                              }
                            },
                            "investmentStrategy" : {
                              "type" : "array",
                              "description" : "Details of the Investment Strategy.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "assetDescription" : {
                                    "type" : "string",
                                    "description" : "The description of the asset.",
                                    "example" : "assetDescription"
                                  },
                                  "proportion" : {
                                    "description" : "The proportion of the asset held in the Investment Strategy.",
                                    "example" : "2.4",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            },
                            "commutationTable" : {
                              "type" : "array",
                              "description" : "Commutation Details.",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "escalation" : {
                                    "description" : "The Escalation Rate.",
                                    "example" : "2.5",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  },
                                  "firstLife" : {
                                    "type" : "object",
                                    "properties" : {
                                      "qFactor" : {
                                        "description" : "qFactor.",
                                        "example" : "2.6",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "pFactor" : {
                                        "description" : "pFactor.",
                                        "example" : "2.7",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "lFactor" : {
                                        "description" : "lFactor.",
                                        "example" : "2.8",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "amount" : {
                                        "description" : "The amount.",
                                        "example" : "5000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "probability" : {
                                        "description" : "The probability factor.",
                                        "example" : "3.0",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    },
                                    "description" : "Additional Details."
                                  },
                                  "secondLife" : {
                                    "type" : "object",
                                    "properties" : {
                                      "qFactor" : {
                                        "description" : "qFactor.",
                                        "example" : "3.1",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "pFactor" : {
                                        "description" : "pFactor.",
                                        "example" : "3.2",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "lFactor" : {
                                        "description" : "lFactor.",
                                        "example" : "3.3",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "amount" : {
                                        "description" : "The amount.",
                                        "example" : "23000.00",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      },
                                      "probability" : {
                                        "description" : "The probability factor.",
                                        "example" : "3.5",
                                        "allOf" : [ {
                                          "$ref" : "#/components/schemas/decimal"
                                        } ]
                                      }
                                    }
                                  },
                                  "sum" : {
                                    "description" : "The sum.",
                                    "example" : "3.6",
                                    "allOf" : [ {
                                      "$ref" : "#/components/schemas/decimal"
                                    } ]
                                  }
                                }
                              }
                            }
                          },
                          "description" : "Details of the Audit Log."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    },
    "/work-item-managed-tasks/external-reference/{partyTypeId}-{partyId}" : {
      "post" : {
        "tags" : [ "Work Item Managed Tasks" ],
        "summary": "Create and Update Party External References",
        "description" : "To provide the ability to create and update party external references.",
        "operationId" : "POST-work-item-managed-tasks-external-reference-{partyTypeId}-{partyId}",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "data" : {
                    "type" : "object",
                    "properties" : {
                      "externalReferences" : {
                        "type" : "array",
                        "description" : "Details of any External References held for an Account.",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "externalReference" : {
                              "type" : "string",
                              "description" : "An external system's reference.",
                              "example" : "N19000559G",
                              "minLength": 1,
                              "maxLength": 40
                            },
                            "externalSystem" : {
                              "type" : "string",
                              "description" : "The description for an external system.",
                              "example" : "AI OFB Pol",
                              "minLength": 1,
                              "maxLength": 40
                            }
                          },
                          "required": [ "externalReference", "externalSystem" ]
                        }
                      }
                    }
                  },
                  "meta" : {
                    "type" : "object",
                    "properties" : {
                      "processName" : {
                        "type" : "string",
                        "description" : "The name of the process associated to this event.",
                        "example" : "UPDATE_EXT_REF"
                      },
                      "payloadId" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "TEstXXXXX1"
                      },
                      "sender" : {
                        "type" : "string",
                        "description" : "The unique Composer identifier for the payload to be able to track the submission request.",
                        "example" : "MEMBERPORTAL"
                      },
                      "masterWorkItemId" : {
                        "type" : "integer",
                        "description" : "The unique Composer identifier of the master work item created for this request.",
                        "example" : "36254"
                      },
                      "role" : {
                        "type" : "string",
                        "description" : "The role of the user who logged the request.",
                        "example" : "Adviser"
                      },
                      "partyType" : {
                        "description" : "The unique identifier for party type of the acting party who submitted the request.",
                        "example" : "InvestorAccount",
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/partyTypeForWIMT"
                        } ]
                      },
                      "partyId" : {
                        "description" : "The unique identifier for the acting party who submitted the request.",
                        "example" : 1,
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/identifier"
                        } ]
                      }
                    }
                  }
                },
                "required": [ "data", "meta"]
              }
            }
          }
        },
        "responses" : {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The Master Work Item Id.",
                          "example": 6399,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "childWorkItemId": {
                          "description": "The Child Work Item Id.",
                          "example": 6400,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        }
                      },
                      "description": "The work item details."
                    }
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Operation was successful. No response provided."
          },
          "401" : {
            "description" : "Operation is not authorised",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403" : {
            "description" : "Operation is forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "partyTypeId",
          "in": "path",
          "description": "The unique Composer identifier for the party type to which the external reference will be associated.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "partyId",
          "in": "path",
          "description": "The unique Composer identifier for the party to which the external reference will be associated.",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/investors/{investorId}/investor-accounts/crystallised-transfer-in": {
      "post": {
        "tags": ["Investor"],
        "description": "To provide the ability to create a crystallised transfer and apply it to a new IDD account.",
        "summary": "Create a new IDD account for a crystallised transfer",
        "operationId": "POST-investors_{investorId}_investor-accounts_crystallised-transfer-in-request.json",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required" : [ "accountDetails", "adviceGiven", "investor" ],
                "properties": {
                  "accountDetails": {
                    "type": "object",
                    "properties": {
                      "primarySIPPAccountId": {
                        "description": "The unique Composer identifier for the Primary SIPP Account to which this new IDD Account is to be associated.",
                        "example": 3001254,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifierWithNullable"
                          }
                        ]
                      },
                      "adviserId": {
                        "description": "The unique Composer identifier for the Adviser associated to the  Account.",
                        "example": 35,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifierWithNullable"
                          }
                        ]
                      },
                      "correspondenceSentTo": {
                        "type": "string",
                        "description": "Indicator as to whom correspondence related to this investor account is to be sent.",
                        "enum": [
                          "A",
                          "B",
                          "M",
                          "N"
                        ],
                        "example": "B"
                      },
                      "startDate": {
                        "description": "The start date for the Account. Default to Today’s Date.",
                        "example": "2022-05-25",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/dateWithNullable"
                          }
                        ]
                      },
                      "discretionaryInvestmentManager": {
                        "type": "integer",
                        "description": "The unique Composer identifier for a Discretionary Investment Manager.",
                        "example": 35,
                        "nullable": true
                      },
                      "preferredPaymentType": {
                        "type": "string",
                        "description": "The Preferred Payment Type of payments to be made from the Investor Account. This will match a Preferred Payment Type as configured in Composer.",
                        "example": "D",
                        "nullable": true
                      },
                      "mailExclusion": {
                        "type": "boolean",
                        "description": "Indicator to advise if the Investor Account has been flagged as being excluded from being sent correspondence.",
                        "example": false,
                        "nullable": true
                      },
                      "investmentConfiguration": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "cashTopup": {
                            "type": "array",
                            "description": "Indicator of the default investment from which the Cash Top-up process is to sell down to realise cash where required.",
                            "items": {
                              "type": "object",
                              "required" : [ "investmentId" ],
                              "properties": {
                                "investmentId": {
                                  "description": "The unique Composer identifier for the investment",
                                  "example": 154,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/identifier"
                                    }
                                  ]
                                },
                                "sequenceNumber": {
                                  "type": "integer",
                                  "description": "The sequence number in which the investments will be sold.",
                                  "example": 1,
                                  "nullable": true
                                }
                              }
                            }
                          }
                        },
                        "description": "The investment configuration."
                      },
                      "feeGroupId": {
                        "description": "The unique Composer identifier for a fee group associated to the Account.",
                        "example": 1,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifierWithNullable"
                          }
                        ]
                      },
                      "feeDeductionMemberAccountId": {
                        "description": "The member account id from which fees should be deducted.",
                        "example": 1,
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/identifierWithNullable"
                          }
                        ]                      },
                      "crystallisedAccountDetails": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "description": "The unique Composer identifier for the Product associated to the Crystallised Account.",
                            "example": 19,
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/identifierWithNullable"
                              }
                            ]
                          },
                          "flexiAccount": {
                            "type": "boolean",
                            "description": "Indicator as to whether the Account is Flexi-Access or Capped. Possible values: True (Flexi-Access) or False (Capped).",
                            "example": true,
                            "nullable": true
                          },
                          "accountInvestmentStrategy": {
                            "type": "object",
                            "nullable": true,
                            "properties": {
                              "investmentModelId": {
                                "description": "The unique Composer identifier for an Investment Model.",
                                "example": 1,
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/identifierWithNullable"
                                  }
                                ]
                              },
                              "investments": {
                                "type": "array",
                                "nullable": true,
                                "description": "Details of the Investments.",
                                "items": {
                                  "type": "object",
                                  "required" : [ "investmentId", "percentage" ],
                                  "properties": {
                                    "investmentId": {
                                      "description": "The unique Composer identifier for the investment.",
                                      "example": 44,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifier"
                                        }
                                      ]
                                    },
                                    "percentage": {
                                      "description": "The percentage of the investment to be allocated to the investment strategy.",
                                      "example": "100",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/percentage"
                                        }
                                      ]
                                    },
                                    "investmentPathwayId": {
                                      "description": "The unique Composer identifier for an Investment Pathway that provides an investment solution for an investor going into in income drawdown.",
                                      "example": 1,
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/identifierWithNullable"
                                        }
                                      ]
                                    },
                                    "cashDistributionOption": {
                                      "type": "string",
                                      "description": "Indicator for the option in which distributions are to be made.",
                                      "example": "",
                                      "nullable": true
                                    }
                                  }
                                }
                              }
                            },
                            "description": "Details of the Investment Strategy for the Account."
                          },
                          "moneyDetails": {
                            "type": "object",
                            "properties": {
                              "transferIn": {
                                "type": "object",
                                "description": "Transfer In Details.",
                                "required" : [ "amount", "reference", "scheme" ],
                                "properties": {
                                  "amount": {
                                    "description": "The amount of the transfer.",
                                    "example": "8888.00",
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/decimal"
                                      }
                                    ]
                                  },
                                  "fullTransferIn": {
                                    "type": "boolean",
                                    "description": "Indicator as to whether the transfer is a full transfer.",
                                    "example": true,
                                    "nullable": true
                                  },
                                  "initialChargeAmount": {
                                    "description": "The initial charge amount to be applied.",
                                    "example": "100.00",
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/decimalWithNullable"
                                      }
                                    ]
                                  },
                                  "initialChargePercentage": {
                                    "description": "The initial charge percentage to be applied.",
                                    "example": "2.50",
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/percentageWithNullable"
                                      }
                                    ]
                                  },
                                  "initialChargeVatApplies": {
                                    "type": "boolean",
                                    "description": "Indicator if VAT applies to the initial charge.",
                                    "example": true,
                                    "nullable": true
                                  },
                                  "investments": {
                                    "type": "array",
                                    "nullable": true,
                                    "description": "Investments to which the transfer will be applied.",
                                    "items": {
                                      "type": "object",
                                      "required" : [ "investmentId", "percentage" ],
                                      "properties": {
                                        "investmentId": {
                                          "description": "The unique Composer identifier for the investment.",
                                          "example": 17314,
                                          "allOf": [
                                            {
                                              "$ref": "#/components/schemas/identifier"
                                            }
                                          ]
                                        },
                                        "percentage": {
                                          "description": "The percentage of the transfer to be applied to each investment.",
                                          "example": "100.00",
                                          "allOf": [
                                            {
                                              "$ref": "#/components/schemas/percentage"
                                            }
                                          ]
                                        },
                                        "investmentPathwayId": {
                                          "description": "The unique Composer identifier for an Investment Pathway that provides an investment solution for an investor going into in income drawdown.",
                                          "example": 1,
                                          "allOf": [
                                            {
                                              "$ref": "#/components/schemas/identifierWithNullable"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "reference": {
                                    "type": "string",
                                    "description": "The reference for the transfer.",
                                    "example": "F2057FAD38"
                                  },
                                  "scheme": {
                                    "type": "object",
                                    "properties": {
                                      "fundProviderId": {
                                        "description": "The unique Composer identifier for the transferring scheme.",
                                        "example": 2416086,
                                        "allOf": [
                                          {
                                            "$ref": "#/components/schemas/identifierWithNullable"
                                          }
                                        ]
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the transferring scheme.",
                                        "example": "LFI Investor Services",
                                        "nullable": true
                                      },
                                      "address": {
                                        "type": "string",
                                        "description": "The address for the scheme.",
                                        "example": "Acacia Avenue",
                                        "nullable": true
                                      },
                                      "phone": {
                                        "type": "string",
                                        "description": "The phone number of the transferring scheme.",
                                        "example": "01000 111 111",
                                        "nullable": true
                                      }
                                    },
                                    "description": "Details of the Transferring Scheme."
                                  }
                                }
                              }
                            },
                            "description": "Details of the Expected Money In."
                          },
                          "adviserCharges": {
                            "type": "array",
                            "description": "Details of the Adviser Charges associated to the Account.",
                            "nullable": true,
                            "items": {
                              "type": "object",
                              "required" : [ "chargeType" ],
                              "properties": {
                                "adviserRole": {
                                  "type": "string",
                                  "description": "The role of the adviser on the Account.",
                                  "example": "D",
                                  "nullable": true
                                },
                                "rate": {
                                  "description": "The rate of the adviser charge.",
                                  "example": "10.00",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimalWithNullable"
                                    }
                                  ]
                                },
                                "amount": {
                                  "description": "The amount of the charge",
                                  "example": "1100.00",
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/decimalWithNullable"
                                    }
                                  ]
                                },
                                "frequency": {
                                  "type": "string",
                                  "description": "The frequency of the adviser charge. Possible Values are Monthly, Quarterly, Half-Yearly or Annually.",
                                  "example": "Monthly",
                                  "enum": [
                                    "Monthly",
                                    "Quarterly",
                                    "HalfYearly",
                                    "Annually"
                                  ]
                                },
                                "applicationType": {
                                  "type": "string",
                                  "description": "applicationType.",
                                  "example": "TransferIn",
                                  "enum": [
                                    "Single",
                                    "Regular",
                                    "TransferIn",
                                    "ReRegistration",
                                    "SingleEmployer",
                                    "RegularEmployer",
                                    "TransferInEmployer"
                                  ]
                                },
                                "chargeType": {
                                  "type": "string",
                                  "description": "The type of adviser charge. Possible Values are Upfront, Trail, Switch or Charge.",
                                  "example": "Upfront",
                                  "enum": [
                                    "Upfront",
                                    "Trail",
                                    "Switch",
                                    "Charge"
                                  ]
                                },
                                "vatApplies": {
                                  "type": "boolean",
                                  "description": "Indicator as to whether VAT applies to the adviser charge.",
                                  "example": true,
                                  "nullable": true
                                }
                              }
                            }
                          },
                          "accountAttributes": {
                            "type": "array",
                            "nullable": true,
                            "description": "Details of attributes to be associated to the Account.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "attributeId": {
                                  "description": "A unique Composer identifier for the attribute.",
                                  "example": 397,
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/identifierWithNullable"
                                    }
                                  ]
                                },
                                "shortCode": {
                                  "type": "string",
                                  "description": "A unique Composer short-code for the attribute.",
                                  "example": "SORT",
                                  "nullable": true
                                },
                                "attributeValue": {
                                  "type": "string",
                                  "description": "The value of the attribute.",
                                  "example": "768F99CB",
                                  "nullable": true
                                }
                              }
                            }
                          },
                          "preferredCashDistChoice": {
                            "type": "string",
                            "description": "The preferred option for distributions received.",
                            "example": "test",
                            "enum": [
                              "ReInvestIntoDefaultCash",
                              "RePurchaseIntoSameAsset"
                            ]
                          },
                          "externalReferences": {
                            "type": "array",
                            "nullable": true,
                            "description": "Details of any External References held for an Account.",
                            "items": {
                              "type": "object",
                              "required" : [ "externalReference", "externalSystem" ],
                              "properties": {
                                "externalSystem": {
                                  "type": "string",
                                  "description": "An external system's reference number.",
                                  "example": "QTREFORIG"
                                },
                                "externalReference": {
                                  "type": "string",
                                  "description": "The description for an external system.",
                                  "example": "90260D7D3801FC9E9CB0"
                                }
                              }
                            }
                          }
                        },
                        "description": "The Crystallised Account Details."
                      }
                    },
                    "description": "The Account Details."
                  },
                  "adviceGiven": {
                    "type": "boolean",
                    "description": "Indicator as to whether advice was given for this event.",
                    "example": false
                  },
                  "basisOfSale": {
                    "type": "string",
                    "description": "Indicator as to the Basis of Sale. Possible Values: - I = Independent, R = Restricted and S = Simplified",
                    "example": "Independent",
                    "enum":[
                      "I",
                      "R",
                      "S"
                    ]
                  },
                  "adviserCreated": {
                    "type": "boolean",
                    "description": "Indicator as to whether this event was created by an adviser.",
                    "example": false,
                    "nullable": true
                  },
                  "discretionaryMandate": {
                    "type": "boolean",
                    "description": "Indicator as to whether there is a discretionary mandate which allows the adviser to place trades on the Investor Account.",
                    "example": false,
                    "nullable": true
                  },
                  "investor": {
                    "type": "object",
                    "properties": {
                      "bankAccounts": {
                        "type": "array",
                        "nullable": true,
                        "description": "The bank account details for an Investor.",
                        "items": {
                          "type": "object",
                          "required" : [ "bankAccountName" ],
                          "properties": {
                            "bankClassificationType": {
                              "type": "string",
                              "description": "This indicates if the bank account is D (Domestic) or (I) International.",
                              "example": "D",
                              "nullable": true,
                              "enum":  [
                                "D",
                                "I"
                              ]
                            },
                            "bankAccount": {
                              "type": "string",
                              "description": "The bank account held by the investor.",
                              "example": "406378",
                              "nullable": true
                            },
                            "accountNumber": {
                              "type": "string",
                              "description": "The account number associated to a domestic bank account.",
                              "example": "94915986",
                              "nullable": true
                            },
                            "bankAccountName": {
                              "type": "string",
                              "description": "The name of the bank account.",
                              "example": "Emu test"
                            },
                            "internationalAccountNumber": {
                              "type": "string",
                              "description": "The number associated to an international bank account (IBAN).",
                              "example": "94915986",
                              "nullable": true
                            },
                            "bankCustomerReference": {
                              "type": "string",
                              "description": "The customer reference for the bank account.",
                              "example": "ED1C78DD1C",
                              "nullable": true
                            },
                            "currencyCode": {
                              "type": "string",
                              "description": "The currency of the bank account. The value will match a currency code as configured in Composer.",
                              "example": "GBP",
                              "nullable": true
                            },
                            "bankIdentifierCode": {
                              "type": "string",
                              "description": "The Bank Identifier Code for the bank.",
                              "example": "Code1",
                              "nullable": true
                            },
                            "defaultBankAccount": {
                              "type": "boolean",
                              "description": "Indicator as to whether the bank account is set as the default for the entity.",
                              "example": true,
                              "nullable": true
                            },
                            "bankAccountType": {
                              "type": "string",
                              "description": "The specific type of bank account. Possible values are: T = Third Party, R = External Client Money.",
                              "example": "T",
                              "nullable": true
                            }
                          }
                        }
                      }
                    },
                    "description": "Details of Investor."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "sagaId": {
                          "description": "",
                          "example": 99,
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/identifier"
                            }
                          ]
                        },
                        "sagaStatus": {
                          "type": "string",
                          "description": "",
                          "example": "IN_PROGRESS"
                        }
                      },
                      "description": ""
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Resource was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response on successful creation of the resource",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/201CreatedRESPONSE"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/400BadRequestRESPONSE"
                    },
                    {
                      "$ref": "#/components/schemas/AccessTokenError"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "investorId",
          "in": "path",
          "description": "The unique Composer identifier for the Investor.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/identifier"
          }
        }
      ]
    },
    "/access-token": {
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "Obtain an API Access Token",
        "description": "This endpoint is for the purpose of providing the relevant user credentials to request an OAuth Access Token, when successful, the issued Token is to be provided within the header of the relevant endpoint message request header for use in the determination as to whether the user has been granted sufficient permissions to be able to perform that request.\n\nThe Access Token request requires that the applicable 'UserName', 'Password' and 'grant_type' is provided within the message request body.",
        "operationId": "POST-access-management_access-token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "jsnow"
                  },
                  "password": {
                    "type": "string",
                    "example": "mypassword"
                  },
                  "grant_type": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": " The access token issued by the authorization server.",
                      "example": "tePgmYec3uTYUsP5BrKwLvU8sSRk8aYqHQgTYYiwia2lkIiA6ICI4TkIwR25NZ0YtbG94T2JLM1RmTHZsTjA3M3JraGtqX0U1aTVsQnp5VWFnIn0.eyJleHAiOjE2NzkyNzM0ODgsImlhdCI6MTY3OTI3MzE4OCwianRpIjoiZGYxNDQ5MmUtYWI2OS00M2VhLTlmM2QtZWI5MWNmODI4YWFiIiwiaXNzIjoiaHR0cHM6Ly9jb21wb3Nlci02ODcxLmNvbXBvc2VyLXYyMC1kZXYuY29tcG9zZXItdWstZWtzLnN5ZC5hd3Mub25nYnN0Lm5ldC9jb21wb3Nlci9hY2Nlc3MtbWFuYWdlbWVudC1zZXJ2ZXIvYXV0aC9yZWFsbXMvY29tcG9zZXIiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiZjpmMzMyZDI0Ny1iMzk3LTQ4ZjktOTIwNi1lZDZkYzIyNGFkODI6bWVkaWFwaTIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjb21wX2JvdWkiLCJzZXNzaW9uX3N0YXRlIjoiM2U3YzA2NDUtYzk0YS00NThlLTgxYjUtMzZlNThlYWRmNjRjIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwic2lkIjoiM2U3YzA2NDUtYzk0YS00NThlLTgxYjUtMzZlNThlYWRmNjRjIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJncnAiOlsic3ZjX2FjY3RzIiwibWVkaWdyb3VwIl0sIm5hbWUiOiJtZWRpYXBpMiIsInByZWZlcnJlZF91c2VybmFtZSI6Im1lZGlhcGkyIiwiZ2l2ZW5fbmFtZSI6Im1lZGlhcGkyIiwiZmFtaWx5X25hbWUiOiIifQ.CZfVJviBfqSh4qVPLknNWX8_X8W_xOtGySCs7zcHj4Ewsqig0Q2WConuzmBJkL_kgQ12iSKBj8iyLZeoICYZ4dXpU96GmFfAxUz-C6g09ny6H271GAdYHSHqzdrLWDkRO5I5Fz6mDTAd2qPkryZWoHpltO4S4vFrQzacvzi4x-mZtSeQjON8CxbAMI691kPJ_VELGi8wXu-x_-jxbVd_Yl_thxmGAd7UA0QT81_laUb7gx3o6dtgamTFdJcEwWygOwWw5J5jyM25WvShjUlcPxfgqA-iIBHV-2l8CflZvE6JZuXHtLEaKAb0xZbS9AQa3XMurLYqzXTJXHo-r44mOO"
                    },
                    "expires_in": {
                      "type": "number",
                      "description": "The lifetime in seconds of the access token. For example, the value '300' denotes that the access token will expire in 5 minutes from the time the response was generated.",
                      "example": 300
                    },
                    "refresh_expires_in": {
                      "type": "number",
                      "description": "The Refresh Access Token expiration time in seconds since the response was generated.",
                      "example": 360
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "The refresh access token issued by the authorization server, which can be used to obtain new access tokens using the same authorization grant.",
                      "example": "tePgmYec3uTYUsP5BrKwLvU8sSRk8aYqHQgTYYiwia2lkIiA6ICI4TkIwR25NZ0YtbG94T2JLM1RmTHZsTjA3M3JraGtqX0U1aTVsQnp5VWFnIn0.eyJleHAiOjE2NzkyNzM0ODgsImlhdCI6MTY3OTI3MzE4OCwianRpIjoiZGYxNDQ5MmUtYWI2OS00M2VhLTlmM2QtZWI5MWNmODI4YWFiIiwiaXNzIjoiaHR0cHM6Ly9jb21wb3Nlci02ODcxLmNvbXBvc2VyLXYyMC1kZXYuY29tcG9zZXItdWstZWtzLnN5ZC5hd3Mub25nYnN0Lm5ldC9jb21wb3Nlci9hY2Nlc3MtbWFuYWdlbWVudC1zZXJ2ZXIvYXV0aC9yZWFsbXMvY29tcG9zZXIiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiZjpmMzMyZDI0Ny1iMzk3LTQ4ZjktOTIwNi1lZDZkYzIyNGFkODI6bWVkaWFwaTIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjb21wX2JvdWkiLCJzZXNzaW9uX3N0YXRlIjoiM2U3YzA2NDUtYzk0YS00NThlLTgxYjUtMzZlNThlYWRmNjRjIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwic2lkIjoiM2U3YzA2NDUtYzk0YS00NThlLTgxYjUtMzZlNThlYWRmNjRjIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJncnAiOlsic3ZjX2FjY3RzIiwibWVkaWdyb3VwIl0sIm5hbWUiOiJtZWRpYXBpMiIsInByZWZlcnJlZF91c2VybmFtZSI6Im1lZGlhcGkyIiwiZ2l2ZW5fbmFtZSI6Im1lZGlhcGkyIiwiZmFtaWx5X25hbWUiOiIifQ.CZfVJviBfqSh4qVPLknNWX8_X8W_xOtGySCs7zcHj4Ewsqig0Q2WConuzmBJkL_kgQ12iSKBj8iyLZeoICYZ4dXpU96GmFfAxUz-C6g09ny6H271GAdYHSHqzdrLWDkRO5I5Fz6mDTAd2qPkryZWoHpltO4S4vFrQzacvzi4x-mZtSeQjON8CxbAMI691kPJ_VELGi8wXu-x_-jxbVd_Yl_thxmGAd7UA0QT81_laUb7gx3o6dtgamTFdJcEwWygOwWw5J5jyM25WvShjUlcPxfgqA-iIBHV-2l8CflZvE6JZuXHtLEaKAb0xZbS9AQa3XMurLYqzXTJXHo-r44mOO"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request. The value MUST be Bearer or another token_type value that the Client has negotiated with the Authorization Server.",
                      "example": "Bearer"
                    },
                    "not-before-policy": {
                      "type": "number",
                      "description": "A not-before policy ensures that any tokens issued before that time become invalid.",
                      "example": 0
                    },
                    "session_state": {
                      "type": "string",
                      "description": "Active session in which the authorization request was made.",
                      "example": "5e6c9631-a49m-932s-83d9-03d79hrro55o"
                    },
                    "scope": {
                      "type": "string",
                      "description": "The scope parameter is not required to be provided when requesting authorization, the authorization server will process the request using a pre-defined default value.",
                      "example": "email profile"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation is bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/400BadRequestRESPONSE"
                    },
                    {
                      "$ref": "#/components/schemas/AccessTokenError"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Operation is not authorised",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/401UnauthorizedRESPONSE"
                    },
                    {
                      "$ref": "#/components/schemas/AccessTokenError"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Operation is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenRESPONSE"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFoundRESPONSE"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422UnprocessableEntityRESPONSE"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerErrorRESPONSE"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "201CreatedRESPONSE": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique Composer Id assigned to the created resource.",
                "example": "102"
              }
            }
          }
        }
      },
      "201CreatedRESPONSEWithWorkItemId": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "workItemId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/identifier"
                  }
                ],
                "description": "The unique Composer identifier of the work item created for this request.",
                "example": "2501"
              }
            }
          }
        }
      },
      "201CreatedRESPONSEBatchRunId": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "batchRunId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/identifier"
                  }
                ],
                "description": "The unique Composer identifier of the batch run created for this request.",
                "example": "2501"
              }
            }
          }
        }
      },
      "400BadRequestRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 400 Bad Request Error Response Code.",
                "example": 400
              },
              "name": {
                "type": "string",
                "description": "The HTTP 400 Error Response Code Name of 'Bad Request'.",
                "example": "Bad Request"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "The server cannot or will not process the request due to an apparent client error."
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "401UnauthorizedRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 401 Unauthorized Error Response Code.",
                "example": 401
              },
              "name": {
                "type": "string",
                "description": "The HTTP 401 Error Response Code Name of 'Unauthorized'.",
                "example": "Unauthorized"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "The operation is Unauthorised"
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "403ForbiddenRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 403 Forbidden Error Response Code.",
                "example": 403
              },
              "name": {
                "type": "string",
                "description": "The HTTP 403 Error Response Code Name of 'Forbidden'.",
                "example": "Forbidden"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "The operation is forbidden"
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "404NotFoundRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 404 Not Found Error Response Code.",
                "example": 404
              },
              "name": {
                "type": "string",
                "description": "The HTTP 404 Error Response Code Name of 'Not Found'.",
                "example": "Not Found"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "Resource not found"
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "422UnprocessableEntityRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 422 Unprocessable Entity Error Response Code.",
                "example": 422
              },
              "name": {
                "type": "string",
                "description": "The HTTP 422 Error Response Code Name of 'Unprocessable Entity'.",
                "example": "Unprocessable Entity"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "The request was well-formed but was unable to be followed due to semantic errors."
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "500InternalServerErrorRESPONSE": {
        "type": "object",
        "properties": {
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The HTTP 500 Internal Server Error Response Code.",
                "example": 500
              },
              "name": {
                "type": "string",
                "description": "The HTTP 500 Error Response Code Name of 'Internal Server Error'.",
                "example": "Internal Server Error"
              },
              "message": {
                "type": "string",
                "description": "A related error message.",
                "example": "Internal Server Error"
              },
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorDataSourceDetails"
                }
              }
            }
          }
        }
      },
      "AccessTokenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_grant"
          },
          "error_description": {
            "type": "string",
            "example": "Invalid user credentials"
          }
        }
      },
      "ErrorDataSourceDetails": {
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "Pointer to the data element in error.",
                "example": "/data/attributes/element"
              },
              "parameter": {
                "type": "string",
                "description": "Parameter that causes the error.",
                "example": "parameterName"
              }
            }
          },

          "title": {
            "type": "string",
            "description": "string",
            "example": "string"
          },
          "detail": {
            "type": "string",
            "description": "string",
            "example": "string"
          },
          "code": {
            "type": "string",
            "description": "string",
            "example": "string"
          }
        }
      },
      "nonNegativeInteger": {
        "minimum": 0,
        "maximum": 2147483647,
        "type": "integer",
        "format": "int64"
      },
      "identifier": {
        "minimum": 1,
        "type": "integer",
        "format": "int32"
      },
      "identifierWithNullable": {
        "minimum": 1,
        "type": "integer",
        "format": "int64",
        "nullable": true
      },
      "stringWithNullable": {
        "type": "string",
        "nullable": true
      },
      "activeInactiveStatus": {
        "type": "string",
        "enum": [
          "Active",
          "Inactive"
        ]
      },
      "date": {
        "type": "string",
        "format": "date"
      },
      "dateTime": {
        "type": "string",
        "format": "date-time"
      },
      "dateWithNullable": {
        "type": "string",
        "format": "date",
        "nullable": true
      },
      "dateTimeWithNullable": {
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "percentage": {
        "pattern": "^(\\-|\\+)?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
        "type": "string"
      },
      "percentageWithNullable": {
        "pattern": "^(\\-|\\+)?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
        "type": "string",
        "nullable": true
      },
      "decimal": {
        "pattern": "^(\\-|\\+)?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
        "type": "string"
      },
      "decimalWithNullable": {
        "pattern": "^(\\-|\\+)?((\\d+(\\.\\d*)?)|(\\.\\d+))$",
        "type": "string",
        "nullable": true
      },
      "booleanWithNullable": {
        "type": "boolean",
        "nullable": true
      },
      "workItemAttachmentId": {
        "pattern": "(\\d+)-(\\d+$)",
        "type": "string"
      },
      "autoEnrolmentClassification": {
        "type": "string",
        "enum": [
          "EligibleJobholder",
          "NonEligibleJobholder",
          "EntitledWorker",
          "ContractualJoiner",
          "Exempt",
          "None"
        ]
      },
      "partyType": {
        "type": "string",
        "enum": [
          "InvestorAccount",
          "Employer",
          "Adviser",
          "Custodian",
          "Dealer",
          "Fund",
          "Agent",
          "Insurer",
          "ProductGroup",
          "Trustee",
          "ExternalEntity",
          "AdviserGroup",
          "InvestmentManager",
          "Asset",
          "Investment",
          "Product",
          "InvestorInsuranceCover",
          "AssetParcel",
          "EmployerGroup",
          "Investor",
          "FundManager",
          "ComplyingFund",
          "EmployerVesting",
          "EmployerInsurance",
          "DealerBranch",
          "PortfolioDistributionParameter",
          "ApirCode",
          "PaymentRequest",
          "InvestorGroup",
          "FinancialInstitution",
          "InsuranceCoverType",
          "Contact",
          "DisbursementRuleId",
          "Property",
          "PropertyLoan",
          "System",
          "PropoertyInvoice",
          "MarketLevelAsset",
          "DiscretionaryFundManager",
          "MasterModel",
          "WorkItemType",
          "BankTransferRequest",
          "TermDepositParcel",
          "WorkItem",
          "InsuranceSubType",
          "SuperStreamMessageReceiver",
          "SuperStreamMessageSender",
          "FundAdviser",
          "FeeGroup",
          "Transaction",
          "Correspondence",
          "DiscretioneryInvestmentManager",
          "CustodianConfirmation",
          "RecurringSwitchBatch",
          "BankAccount",
          "ThirdParty",
          "PdcBatchRun"
        ]
      },
      "RecurringSwitchTypeEnum": {
        "type": "string",
        "enum": [
          "Rebalance",
          "PoundCostAveraging",
          "RebalanceTolerance"
        ],
        "example": "Rebalance",
        "description": "Type of Recurring Switch. Possible values are Rebalance, PoundCostAveraging, RebalanceTolerance."
      },
      "AccountCommissionType": {
        "type": "string",
        "enum": [
          "UPFRONT",
          "TRAIL",
          "SWITCH",
          "CHARGE"
        ],
        "example": "TRAIL",
        "description": "The type of commission. Possible values are UPFRONT, TRAIL, SWITCH, CHARGE."
      },
      "partyTypeForWIMT": {
        "type": "string",
        "enum": [
          "InvestorAccount",
          "Employer",
          "AdviserAccount",
          "Custodian",
          "Firm",
          "Scheme",
          "Agent",
          "Trustee",
          "ExternalEntity",
          "AdviserGroup",
          "InvestmentManager",
          "Investor",
          "FundManager",
          "FirmBranch",
          "DiscretionaryFundManager",
          "SchemeAdviser",
          "DiscretioneryInvestmentManager"
        ]
      },
      "partyTypeForCustomAttributes": {
        "type": "string",
        "enum": [
          "NonRelated",
          "InvestorAccount",
          "Employer",
          "Adviser",
          "Custodian",
          "Network",
          "Scheme",
          "Agent",
          "Insurer",
          "ProductGroup",
          "Trustee",
          "ExternalEntity",
          "AdviserGroup",
          "InvestmentManager",
          "AssetHolding",
          "Investment",
          "Product",
          "MemberInsurance",
          "AssetParcel",
          "EmployerGroup",
          "Investor",
          "FundManager",
          "ComplyingFund",
          "EmployerVesting",
          "EmployerInsurance",
          "AppointedRepOrFirmBranch",
          "PortfolioDistributionParameter",
          "ApirCode",
          "PaymentRequest",
          "InvestorGroup",
          "FinancialInstitution",
          "DisbursementRuleId",
          "Contact",
          "Property",
          "PropertyLoan",
          "PropertyInvoice",
          "MarketLevelAsset",
          "DiscretionaryFundManager",
          "MasterModel",
          "DFMAdmin",
          "ParaPlanner",
          "FirmOwner",
          "FirmAdminUser",
          "IfaFirmUser",
          "SysAdmin",
          "BoAdmin",
          "SchemeAdviser",
          "FeeGroup",
          "Transaction",
          "Correspondence",
          "DiscretioneryInvestmentManager",
          "CustodianConfirmation",
          "RecurringSwitchBatch",
          "CashInterestRate",
          "BankAccount",
          "ThirdParty",
          "PdcBatchRun",
          "AnnuityTranche",
          "AnnuityOffering",
          "TrustType",
          "AdhocWithdrawal",
          "BondLifeAssured"
        ]
      },
      "preferredCorrespondenceMethod": {
        "type": "string",
        "enum": [
          "Mail",
          "Email",
          "Personal",
          "Telephone"
        ]
      },
      "addressType": {
        "type": "string",
        "enum": [
          "Actual",
          "Postal",
          "Forwarding",
          "DocumentExchange"
        ]
      },
      "bankAccountType": {
        "type": "string",
        "enum": [
          "ThirdParty",
          "Retiready",
          "ExternalClientMoney"
        ]
      },
      "regularContReinvestmentApplies": {
        "type": "string",
        "enum": [
          "UserSpecified",
          "AsPerInvStrategy",
          "None"
        ]
      },
      "workItemStatus": {
        "type": "string",
        "enum": [
          "Open",
          "Closed",
          "Returned",
          "Entered",
          "Suspended",
          "WaitingVerification",
          "Cancelled",
          "Checking"
        ]
      },
      "workItemState": {
        "type": "string",
        "enum": [
          "InProgress",
          "Completed"
        ]
      },
      "receivedMethod": {
        "type": "string",
        "enum": [
          "Personal",
          "CBIS",
          "DataFile",
          "Telephone",
          "Email",
          "Fax",
          "Mail",
          "Web"
        ]
      },
      "processType": {
        "type": "string",
        "enum": [
          "Age75LTA",
          "AmalgamateSwitch",
          "AnnuityDeath",
          "AnnuityRecalculation",
          "AssetDistribution",
          "ConfirmationOfBenefits",
          "ContributionApplication",
          "DebitCardChargeback",
          "ExternalOrder",
          "FXOrder",
          "Guarantee",
          "InterAccountSwitch",
          "InterPersonAssetTransfer",
          "InvestmentSwitch",
          "ISARepairVoid",
          "LISAClaimCorrection",
          "MasterWorkItem",
          "NotApplicable",
          "PartyMaintenance",
          "ProductSwitch",
          "Redemption",
          "Rollover",
          "TaxWrapperTransferOut",
          "Transfer",
          "TransactionEntry",
          "UnitConversion",
          "BondAssignment",
          "BondDeath",
          "InvestmentModelAllocations"
        ]
      },
      "inOutFlag": {
        "type": "string",
        "enum": [
          "In",
          "Out"
        ]
      },
      "basisOfSale": {
        "type": "string",
        "enum": [
          "Advised",
          "Independent",
          "Restricted",
          "Simplified",
          "ExecutionOnly",
          "NoAdvice"
        ],
        "nullable": true
      },
      "productType": {
        "type": "string",
        "enum": [
          "Accumulation",
          "PensionAnnuity",
          "IncomeDrawdown",
          "IndividualSavingsAccount",
          "GeneralInvestmentAccount",
          "LifeAnnuity",
          "StandaloneGuaranteeAnnuity",
          "BondsOnshore",
          "BondsOffshore"
        ]
      },
      "batchRunStatus": {
        "type": "string",
        "enum": [
          "Approved",
          "Error",
          "InProgress",
          "Rejected",
          "WaitingApproval",
          "ReProcessed"
        ]
      },
      "accountType": {
        "type": "string",
        "enum": [
          "Domestic",
          "International"
        ]
      },
      "pensionPaymentFrequency": {
        "type": "string",
        "enum": [
          "Annual",
          "Quarterly",
          "HalfYearly",
          "Monthly",
          "Fortnightly",
          "Weekly",
          "Daily",
          "FOUR_WEEKLY"
        ]
      },
      "incomePaymentFrequency": {
        "type": "string",
        "enum": [
          "Weekly",
          "Monthly",
          "Quarterly",
          "HalfYearly",
          "Annually"
        ]
      },
      "tradingBasis": {
        "type": "string",
        "enum": [
          "All",
          "RealTime",
          "ValuationPoint"
        ]
      },
      "paymentFrequency": {
        "type": "string",
        "enum": [
          "_4Weekly",
          "Fortnightly",
          "Weekly",
          "Monthly"
        ]
      },
      "MemberAccountTransaction": {
        "type": "string",
        "enum": [
          "Active",
          "Pending",
          "Reversed",
          "AwaitingApproval",
          "Cancelled",
          "Reversal"
        ]
      },
      "fatcaStatus": {
        "type": "string",
        "enum": [
          "Reporting",
          "Exempt",
          "NonParticipating",
          "NonReporting",
          "NoServiceProvided"
        ],
        "example": "Reporting",
        "description": "The Investor’s FATCA status. Possible values are Exempt, No Service Provided, Reporting, Non-Reporting and Non-Participating."
      },
      "gender": {
        "type": "string",
        "enum": [
          "Female",
          "Male",
          "NotDisclosed",
          "Unknown"
        ]
      },
      "reportingFrequency": {
        "type": "string",
        "enum": [
          "Weekly",
          "Fortnightly",
          "Monthly",
          "Quarterly",
          "HalfYearly",
          "Annual"
        ],
        "example": "Weekly",
        "description": "The Investor’s nominated reporting frequency. Possible values are Weekly, Fortnightly, Monthly, Quarterly, HalfYearly and Annual."
      },
      "MasterWorkItemCreatedRESPONSE": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "The unique Master work item Id created.",
                "example": "102"
              },
              "childWorkItemId": {
                "type": "integer",
                "format": "int64",
                "description": "The unique Child work item Id created.",
                "example": "103"
              }
            }
          }
        }
      },
      "cashDistributionOption": {
        "type": "string",
        "enum": [
          "DC",
          "RA",
          "RC"
        ]
      },
      "AdhocIncomeRequestPostWIMT" : {
        "required" : [ "amount", "paymentCurrency" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "pattern" : "^(\\+|\\-)?\\d*\\.?\\d*$",
            "type" : "string",
            "description" : "The value (in GBP pounds and pence) to be paid out to the investor as an adhoc income payment.",
            "example" : "500.10"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The date on which the payment is requested to be made.",
            "format" : "date",
            "example" : "2018-01-31"
          },
          "paymentCurrency" : {
            "type" : "string",
            "description" : "Will indicate the currency in which pension payments will be made.\nShould always be 3 letters, e.g., GBP, EUR, USD\n"
          }
        },
        "description" : "Adhoc Pension Income item to add"
      },
      "EmployerContScheduleDtlUpdate": {
        "type": "object",
        "properties" : {
          "overrideStartDate" : {
            "description" : "Override start date must be greater than last start date of employee.",
            "example" : "2023-05-05",
            "allOf" : [ {
              "$ref" : "#/components/schemas/date"
            } ]
          },
          "employeeAvcFixedAmount" : {
            "description" : "The employee AVC contribution amount.",
            "example" : "10.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "employeeAvcFixedPercent" : {
            "description" : "The employee AVC contribution as a percentage of salary.",
            "example" : "10.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "employeeAvcPredefinedFieldId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the employee AVC contribution rate.",
            "example" : 1,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "employeeFixedAmount" : {
            "description" : "The employee contribution amount.",
            "example" : "20.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "employeeFixedPercent" : {
            "description" : "The employee contribution as a percentage of salary.",
            "example" : "20.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "employeePredefinedFieldId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the employee contribution rate.",
            "example" : 2,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "employerAvcFixedAmount" : {
            "description" : "The employer AVC contribution amount.",
            "example" : "30.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "employerAvcFixedPercent" : {
            "description" : "The employer AVC contribution as a percentage of salary.",
            "example" : "30.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "employerAvcPredefinedFieldId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the employer AVC contribution rate.",
            "example" : 3,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "employerFixedAmount" : {
            "description" : "The employer contribution amount.",
            "example" : "40.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "employerFixedPercent" : {
            "description" : "The employer contribution as a percentage of salary.",
            "example" : "40.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "employerPredefinedFieldId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the employer contribution rate.",
            "example" : 4,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "giaFixedAmount" : {
            "description" : "The GIA contribution amount.",
            "example" : "50.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "giaFixedPercent" : {
            "description" : "The GIA contribution as a percentage of salary.",
            "example" : "50.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "giaPredefinedId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the GIA contribution rate.",
            "example" : 5,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "isaCashFixedAmount" : {
            "description" : "The ISA Cash contribution amount.",
            "example" : "60.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "isaCashFixedPercent" : {
            "description" : "The ISA Cash contribution as a percentage of salary.",
            "example" : "60.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "isaCashPredefinedId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the ISA Cash contribution rate.",
            "example" : 6,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "isaSharesFixedAmount" : {
            "description" : "The ISA Stocks & Shares contribution amount.",
            "example" : "70.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "isaSharesFixedPercent" : {
            "description" : "The ISA Stocks & Shares contribution as a percentage of salary.",
            "example" : "70.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "isaSharesPredefinedId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the ISA Stocks & Shares contribution rate.",
            "example" : 7,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          },
          "salSacrificeFixedAmount" : {
            "description" : "The Salary Sacrifice contribution amount.",
            "example" : "80.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/decimal"
            } ]
          },
          "salSacrificeFixedPercent" : {
            "description" : "The Salary Sacrifice contribution as a percentage of salary.",
            "example" : "80.00",
            "allOf" : [ {
              "$ref" : "#/components/schemas/percentage"
            } ]
          },
          "salSacrificePredefinedId" : {
            "description" : "The unique Composer identifier for the predefined calculation for the Salary Sacrifice contribution rate.",
            "example" : 8,
            "allOf" : [ {
              "$ref" : "#/components/schemas/identifier"
            } ]
          }
        }
      },
      "EmployerContScheduleDtlCreate": {
        "required": [
          "employerContScheduleDtlId"
        ],
        "type": "object",
        "properties": {
          "overrideStartDate": {
            "description": "Override start date must be greater than last start date of employee.",
            "example": "2023-05-05",
            "allOf": [
              {
                "$ref": "#/components/schemas/date"
              }
            ]
          },
          "employerContScheduleDtlId": {
            "description": "The unique identifier for the employer default contribution schedule details which this override will be linked to.",
            "example": 70824753,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "employeeAvcFixedAmount": {
            "description": "The employee AVC contribution amount.",
            "example": "10.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "employeeAvcFixedPercent": {
            "description": "The employee AVC contribution as a percentage of salary.",
            "example": "10.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "employeeAvcPredefinedFieldId": {
            "description": "The unique Composer identifier for the predefined calculation for the employee AVC contribution rate.",
            "example": 1,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "employeeFixedAmount": {
            "description": "The employee contribution amount.",
            "example": "20.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "employeeFixedPercent": {
            "description": "The employee contribution as a percentage of salary.",
            "example": "20.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "employeePredefinedFieldId": {
            "description": "The unique Composer identifier for the predefined calculation for the employee contribution rate.",
            "example": 2,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "employerAvcFixedAmount": {
            "description": "The employer AVC contribution amount.",
            "example": "30.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "employerAvcFixedPercent": {
            "description": "The employer AVC contribution as a percentage of salary.",
            "example": "30.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "employerAvcPredefinedFieldId": {
            "description": "The unique Composer identifier for the predefined calculation for the employer AVC contribution rate.",
            "example": 3,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "employerFixedAmount": {
            "description": "The employer contribution amount.",
            "example": "40.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "employerFixedPercent": {
            "description": "The employer contribution as a percentage of salary.",
            "example": "40.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "employerPredefinedFieldId": {
            "description": "The unique Composer identifier for the predefined calculation for the employer contribution rate.",
            "example": 4,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "giaFixedAmount": {
            "description": "The GIA contribution amount.",
            "example": "50.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "giaFixedPercent": {
            "description": "The GIA contribution as a percentage of salary.",
            "example": "50.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "giaPredefinedId": {
            "description": "The unique Composer identifier for the predefined calculation for the GIA contribution rate.",
            "example": 5,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "isaCashFixedAmount": {
            "description": "The ISA Cash contribution amount.",
            "example": "60.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "isaCashFixedPercent": {
            "description": "The ISA Cash contribution as a percentage of salary.",
            "example": "60.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "isaCashPredefinedId": {
            "description": "The unique Composer identifier for the predefined calculation for the ISA Cash contribution rate.",
            "example": 6,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "isaSharesFixedAmount": {
            "description": "The ISA Stocks & Shares contribution amount.",
            "example": "70.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "isaSharesFixedPercent": {
            "description": "The ISA Stocks & Shares contribution as a percentage of salary.",
            "example": "70.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "isaSharesPredefinedId": {
            "description": "The unique Composer identifier for the predefined calculation for the ISA Stocks & Shares contribution rate.",
            "example": 7,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          },
          "salSacrificeFixedAmount": {
            "description": "The Salary Sacrifice contribution amount.",
            "example": "80.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/decimal"
              }
            ]
          },
          "salSacrificeFixedPercent": {
            "description": "The Salary Sacrifice contribution as a percentage of salary.",
            "example": "80.00",
            "allOf": [
              {
                "$ref": "#/components/schemas/percentage"
              }
            ]
          },
          "salSacrificePredefinedId": {
            "description": "The unique Composer identifier for the predefined calculation for the Salary Sacrifice contribution rate.",
            "example": 8,
            "allOf": [
              {
                "$ref": "#/components/schemas/identifier"
              }
            ]
          }
        }
      },
      "title": {
        "type": "string",
        "enum": [
          "Mr",
          "Master",
          "Mrs",
          "Miss",
          "Ms",
          "Doctor",
          "Professor",
          "Sir",
          "Dame",
          "Lord",
          "Lady",
          "Baron",
          "Baroness",
          "Duke",
          "Duchess",
          "Earl",
          "Countess",
          "Marquess",
          "Marchioness",
          "Viscount",
          "Viscountess",
          "TheHonourable",
          "TheHonourableMrs",
          "RightHonourable",
          "RightHonourableLord",
          "Father",
          "Sister",
          "Deacon",
          "Deaconess",
          "TheReverend",
          "TheReverendCanon",
          "TheReverendDoctor",
          "TheReverendFather",
          "TheReverendMr",
          "TheReverendMrs",
          "TheRightRevd",
          "TheVenerable",
          "Rabbi",
          "Admiral",
          "ViceAdmiral",
          "RearAdmiral",
          "Lieutenant",
          "Commodore",
          "Commander",
          "Captain",
          "WarrantOfficer",
          "General",
          "Brigadier",
          "Colonel",
          "LieutenantColonel",
          "SecondLieutenant",
          "Major",
          "Sergeant",
          "Corporal",
          "LanceCorporal",
          "AirChiefMarshall",
          "AirViceMarshall",
          "AirCommodore",
          "GroupCaptain",
          "WingCommander",
          "SquadronLeader",
          "FlightLieutenant"
        ]
      },
      "WIMTPartyType": {
        "type": "string",
        "enum": [
          "InvestorAccount",
          "Employer",
          "AdviserAccount",
          "Custodian",
          "Firm",
          "Scheme",
          "Agent",
          "Trustee",
          "ExternalEntity",
          "AdviserGroup",
          "InvestmentManager",
          "Investor",
          "FundManager",
          "FirmBranch",
          "DiscretionaryFundManager",
          "SchemeAdviser",
          "DiscretioneryInvestmentManager"
        ]
      },
      "paymentMethodType": {
        "type": "string",
        "enum": [
          "DirectDebit",
          "DirectCredit"
        ]
      },
      "entityType": {
        "type": "string",
        "enum": [
          "Company",
          "Individual",
          "JointOwner",
          "Partnership",
          "SuperannuationFund",
          "Trustee"
        ]
      },
      "attachmentDmsStatus": {
        "type": "string",
        "enum": [
          "Pending",
          "SentToDms",
          "U",
          "Error",
          "InProcess"
        ]
      },
      "attachmentType": {
        "type": "string",
        "enum": [
          "RedemptionQuoteAdvice",
          "ContributionUploadFile",
          "Document",
          "EtpPrepaymentSummary"
        ]
      },
      "clientRequestIllustrationType": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "SWITCHOUTBEFORE",
          "SWITCHOUTAFTER",
          "ADHOCBEFORE",
          "ADHOCAFTER",
          "SWITCHIN",
          "STARTINCOME",
          "BCE"
        ]
      },
      "illustrationResidency": {
        "type": "string",
        "enum": [
          "G",
          "S",
          "C"
        ]
      },
      "illustrationRequestContributionType": {
        "type": "string",
        "enum": [
          "S",
          "R"
        ]
      }
    }
  }
}
